DOM（Document Object Model)定义了表示和修改文档所需的方法。DOM对象即为宿主对象，由浏览器厂商定义，用来操作html和xml功能的一类对象的集合。
也有人称DOM是对HTML以及XML的标准编程接口
DOM不能操作css，谁都不能操控css(只能改变css行间样式）

xml -> xhtml -> html
(xml可以自定义元素，以前用来作发送数据的，现在基本不用了，都用json)

DOM 定义了访问文档的标准：“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问、更新文档的内容、结构和样式。”
W3C DOM 标准被分为 3 个不同的部分：
Core DOM - 所有文档类型的标准模型
XML DOM - XML 文档的标准模型
HTML DOM - HTML 文档的标准模型

HTML DOM 是 HTML 的标准对象模型和编程接口。它定义了：
作为对象的 HTML 元素
所有 HTML 元素的属性
访问所有 HTML 元素的方法
所有 HTML 元素的事件
换言之：HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准

在 DOM 中，所有 HTML 元素都被定义为对象

innerHTML 属性
获取元素内容最简单的方法是使用 innerHTML 属性。
innerHTML 属性可用于获取或替换 HTML 元素的内容。
innerHTML 属性可用于获取或改变任何 HTML 元素，包括 <html> 和 <body>

HTML DOM 文档对象是您的网页中所有其他对象的拥有者
HTML DOM Document 对象 
<html>标签属于<document>标签，即document表示整个文档（位置在<!DOCTYPE html>下面，但一般不写）
文档对象代表您的网页。如果您希望访问 HTML 页面中的任何元素，那么您总是从访问 document 对象开始
document.getElementsByTagName(name)	通过标签名来查找元素
element.innerHTML = new html content	改变元素的 inner HTML
element.attribute = new value	改变 HTML 元素的属性值
element.setAttribute(attribute, value)	改变 HTML 元素的属性值
element.style.property = new style	改变 HTML 元素的样式

document.createElement(element)	创建 HTML 元素
document.removeChild(element)	删除 HTML 元素
document.appendChild(element)	添加 HTML 元素
document.replaceChild(element)	替换 HTML 元素
document.write(text)	写入 HTML 输出流

document.documentElement	返回 <html> 元素
document.documentMode	返回浏览器使用的模式
document.implementation	返回 DOM 实现
document.inputEncoding	返回文档的编码（字符集）
document.lastModified	返回文档更新的日期和时间
document.readyState	返回文档的（加载）状态
document.referrer	返回引用的 URI（链接文档）
document.strictErrorChecking	返回是否强制执行错误检查

通过 id 查找 HTML 元素
通过标签名查找 HTML 元素
通过类名查找 HTML 元素
通过 CSS 选择器查找 HTML 元素
通过 HTML 对象集合查找 HTML 元素

查：
1、var myElement = document.getElementById("intro");(IE8以下如果没有id属性则name属性会被找到)
如果元素被找到，此方法会以对象返回该元素（在 myElement 中），如果未找到元素，myElement 将包含 null
后端经常会把id属性更改，因此不要用id属性比较就好
2、基本上系统返回的成组的都是以类数组返回
var y = x.getElementsByTagName("p"); （任何浏览器都兼容）
变量y会是HTMLCollection对象，y[0]是第一个p元素对象（通过类名获取也相同）
3、var y = x.getElementsByClassName("p"); (ie8及以下不兼容）
4、var y = x.getElementsByName("p"); （得到name属性）
5、querySelector("div span>strong.demo") 方法 css选择器 css怎么选取里面就怎么写 选取一个
6、querySelectorAll() 方法 css选择器
本例返回 class="intro" 的所有 <p> 元素列表：var x = document.querySelectorAll("p.intro");
css选择器在ie7及以下不管用，且不是实时的，后续的修改对他来说无效，它生成那一刻是什么样以后就一直是什么样
有多少个就多少个，顺序怎么样就怎么样，不会因为后续修改而改变，因此不使用css选择器，除非要保存它的副本就可以用一下

通过 HTML 对象选择器查找 HTML 对象
本例查找 id="frm1" 的 form 元素，在 forms 集合中，然后显示所有元素值：
var x = document.forms["frm1"];（x是form标签内的所有内容）
for (i = 0; i < x.length; i++) {
    text += x.elements[i].value + "<br>";
}
id为“frm1”的form元素的所有子元素的对象（因为是x.element)
详见谷歌收藏的JS HTML DOM 文档

在 JavaScript 中，document.write() 可用于直接写入 HTML 输出流：<script>document.write(Date());</script>
千万不要在文档加载后使用 document.write()。这么做会覆盖文档

创建动画容器：所有动画都应该与容器元素关联
为元素添加样式：应该通过 style = "position: relative" 创建容器元素。应该通过 style = "position: absolute" 创建动画元素。

document.getElementById("myBtn").onclick = displayDate;
不可以写成document.getElementById("myBtn").onclick = displayDate();因为带括号就会先执行一次了，结果会马上出来，不用点击

当用户进入后及离开页面时，会触发 onload 和 onunload 事件
onload 事件可用于检测访问者的浏览器类型和浏览器版本，然后基于该信息加载网页的恰当版本
onload 和 onunload 事件可用于处理 cookie：
<body onload="checkCookies()">
function checkCookies() {
  var text = "";
  if (navigator.cookieEnabled == true) {
    text = "Cookie 已启用";
  } else {
    text = "Cookie 未启用";
  }
  document.getElementById("demo").innerHTML = text;
}

onchange 事件经常与输入字段验证结合使用，当用户改变输入字段内容时（从无到有也会改变），会调用相关函数
onmousedown, onmouseup 以及 onclick 事件构成了完整的鼠标点击事件。
首先当鼠标按钮被点击时，onmousedown 事件被触发；然后当鼠标按钮被释放时，onmouseup 事件被触发；
最后，当鼠标点击完成后（按下放开后），onclick 事件被触发
onmousemove在进入内容和在内容里移动都会触发事件，而onmouseover只有在进入内容会触发内容

addEventListener() 方法为元素附加事件处理程序而不会覆盖已有的事件处理程序
您能够向一个元素添加多个事件处理程序。您能够向一个元素添加多个相同类型的事件处理程序，例如两个 "click" 事件。
您能够向任何 DOM 对象添加事件处理程序而非仅仅 HTML 元素，例如 window 对象
addEventListener() 方法使我们更容易控制事件如何对冒泡作出反应
能够通过使用 removeEventListener() 方法轻松地删除事件监听器

element.addEventListener(event, function, useCapture);
第一个参数是事件的类型（比如 "click" 或 "mousedown"）
第二个参数是当事件发生时我们需要调用的函数（写名字，没有括号）
第三个参数是布尔值，指定使用事件冒泡还是事件捕获。此参数是可选的
注意：请勿对事件使用 "on" 前缀；请使用 "click" 代替 "onclick"
element.addEventListener("click", function(){ alert("Hello World!"); });

element.addEventListener("click", myFunction);
element.addEventListener("click", mySecondFunction);
点一次后按顺序执行函数

添加当用户调整窗口大小时触发的事件监听器：
window.addEventListener("resize", function(){
    document.getElementById("demo").innerHTML = sometext;
});

当传递参数值时，请以参数形式使用调用指定函数的“匿名函数”：
var p1 = 5; var p2 = 7;
element.addEventListener("click", function(){ myFunction(p1, p2); });

在 HTML DOM 中有两种事件传播的方法：冒泡和捕获
事件传播是一种定义当发生事件时元素次序的方法。假如 <div> 元素内有一个 <p>，然后用户点击了这个 <p> 元素，应该首先处理哪个元素“click”事件？
在冒泡中，最内侧元素的事件会首先被处理，然后是更外侧的：首先处理 <p> 元素的点击事件，然后是 <div> 元素的点击事件。
在捕获中，最外侧元素的事件会首先被处理，然后是更内侧的：首先处理 <div> 元素的点击事件，然后是 <p> 元素的点击事件。
在 addEventListener() 方法中，你能够通过使用“useCapture”参数来规定传播类型：
addEventListener(event, function, useCapture);
默认值是 false，将使用冒泡传播，如果该值设置为 true，则事件使用捕获传播

removeEventListener() 方法会删除已通过 addEventListener() 方法附加的事件处理程序：
document.getElementById("myDIV").addEventListener("mousemove", myFunction);
document.getElementById("myDIV").removeEventListener("mousemove", myFunction);

IE 8、Opera 6.0 及其更早版本不支持 addEventListener() 和 removeEventListener() 方法。
不过，对于这些特殊的浏览器版本，您可以使用 attachEvent() 方法向元素添加事件处理程序，并由 detachEvent() 方法删除：
element.attachEvent(event, function);
element.detachEvent(event, function);
event使用onclick
跨浏览器解决方案：
var x = document.getElementById("myBtn");
if (x.addEventListener) {                    // 针对主流浏览器，除了 IE 8 及更正版本
    x.addEventListener("click", myFunction);
} else if (x.attachEvent) {                  // 针对 IE 8 及更早版本
    x.attachEvent("onclick", myFunction);
} 

根据 W3C HTML DOM 标准，HTML 文档中的所有事物都是节点：
整个文档是文档节点
每个 HTML 元素是元素节点
HTML 元素内的文本是文本节点
每个 HTML 属性是属性节点
所有注释是注释节点

在节点树中，顶端节点被称为根（根节点）（html文档中根节点为html）

通过 JavaScript，您可以使用以下节点属性在节点之间导航：
parentNode
childNodes[nodenumber]
firstChild
lastChild
nextSibling
previousSibling

DOM 处理中的一种常见错误是认为元素节点中包含文本(文本节点，内容（也就是平常所说的文本）是文本节点的值)
元素节点 <title> 不包含文本。它包含了值为 "DOM 教程" 的文本节点
文本节点的值能够通过节点的 innerHTML 属性进行访问，var myTitle = document.getElementById("demo").innerHTML;（demo的文本结点的值）
访问 innerHTML 属性等同于访问首个子节点的 nodeValue：var myTitle = document.getElementById("demo").firstChild.nodeValue;
也可以这样访问第一个子节点：var myTitle = document.getElementById("demo").childNodes[0].nodeValue;

使用 innerHTML 取回 HTML 元素的内容（元素里的所有内容）
document.body - 文档的 body 返回<body>标签
document.documentElement - 完整文档 返回<html>标签

nodeName 属性规定节点的名称
nodeName 是只读的
元素节点的 nodeName 等同于标签名
属性节点的 nodeName 是属性名称
文本节点的 nodeName 总是 #text
文档节点的 nodeName 总是 #document
注释：nodeName 总是包含 HTML 元素的大写标签名(总是返回标签的大写)

nodeValue 属性规定节点的值
元素节点的 nodeValue 是 undefined
文本节点的 nodeValue 是文本文本
属性节点的 nodeValue 是属性值

nodeType 属性返回节点的类型。nodeType 是只读的，返回的是数字
节点           类型  例子
ELEMENT_NODE	1	<h1 class="heading">W3School</h1>
ATTRIBUTE_NODE	2	class = "heading" （弃用）
TEXT_NODE	3	W3School
COMMENT_NODE	8	<!-- 这是注释 -->
DOCUMENT_NODE	9	HTML 文档本身（<html> 的父）
DOCUMENT_TYPE_NODE	10	<!Doctype html>
Type 2 在 HTML DOM 中已弃用。XML DOM 中未弃用

创建文本节点。这段代码创建了一个文本节点：var node = document.createTextNode("这是一个新段落。");
向 <p> 元素追加这个文本节点：para.appendChild(node);

appendChild() 方法，追加新元素作为父的最后一个子元素
element.insertBefore(para, child);  element是要插入结点的父节点，para是要插入的新节点，child是参考节点，para插在child前面
para和child是element的子节点
需删除某个 HTML 元素，您需要知晓该元素的父：
var parent = document.getElementById("div1");
var child = document.getElementById("p1");
parent.removeChild(child);
这是一种常见的解决方法：找到你想要删除的子，并利用其 parentNode 属性找到父：
var child = document.getElementById("p1");
child.parentNode.removeChild(child);

node.remove() 是在 DOM 4 规范中实现的。但是由于糟糕的浏览器支持，不应该使用该方法

如需替换元素的，请使用 replaceChild() 方法：parent.replaceChild(para,child); (para是新节点，child是原结点）

getElementsByTagName() 方法返回 HTMLCollection 对象，HTMLCollection 对象是类数组的 HTML 元素列表（集合）
length 属性定义了 HTMLCollection 中元素的数量，length 属性在您需要遍历集合中元素时是有用的
想要改变需要一个一个遍历，整个不能直接改
HTMLCollection 也许看起来像数组，但并非数组。您能够遍历列表并通过数字引用元素（就像数组那样）。
不过，您无法对 HTMLCollection 使用数组方法，比如 valueOf()、pop()、push() 或 join()

NodeList 对象是从文档中提取的节点列表（集合）。NodeList 对象与 HTMLCollection 对象几乎相同。
如使用 getElementsByClassName() 方法，某些（老的）浏览器会返回 NodeList 对象而不是 HTMLCollection。
所有浏览器都会为 childNodes 属性返回 NodeList 对象。
大多数浏览器会为 querySelectorAll() 方法返回 NodeList 对象
length 属性定义节点列表中的节点数

HTMLCollection 是 HTML 元素的集合。NodeList 是文档节点的集合。NodeList 和 HTML 集合几乎完全相同。
HTMLCollection 和 NodeList 对象都是类数组的对象列表（集合）。它们都有定义列表（集合）中项目数的 length 属性。
它们都可以通过索引 (0, 1, 2, 3, 4, ...) 像数组那样访问每个项目。
访问 HTMLCollection 项目，可以通过它们的名称(name属性)、id 或索引号。访问 NodeList 项目，只能通过它们的索引号。
HTMLCollection.namedItem(name或id)或HTMLCollection[name或id]
例：var x = document.getElementsByTagName("p")["myElement"]; 或 var x = document.getElementsByTagName("p").namedItem("myElement");
只有 NodeList 对象能包含属性节点和文本节点。
节点列表不是数组！节点数组看起来像数组，但并不是。您能够遍历节点列表并像数组那样引用其节点。
不过，您无法对节点列表使用数组方法，比如 valueOf()、push()、pop() 或 join()

onclick不同次结果不一样：
var count = 0;
div.onclick = function(){(几种状态就模几)
    count++;
    if(count % 2 == 1){...}
    else {...}
}
选项卡：
var btn = document.getElementsByTagName("button");
var div = document.getElementsByClassName("content");
for(var i = 0; i < btn.length; i++){
    (function(n){
         btn[n].onclick = function(){
              for(var j = 0; j < btn.length; j++){
                 btn[j].className = "";
                 div[j].style.display = "none";
              }
              this.className = "active";
              div[n].style.display = "block";
         }
    }(i));
}
动块：
var speed = 1;
var timer = setInterval(function(){
      speed += speed/10;
      div.style.left = parseInt(div.style.left) + 1 + "px";
      if(parseInt(div.style.left) > 200) clearInterval(timer);
},10);
按键盘的上下左右箭头移动：
document.onkeydown = function(e){ //e对象会记录键盘按下的信息
     switch(e.which) {//键盘的按钮的序号
       case 38: div.style.top = parseInt(div.style.top) - speed + "px";
       break;
       case 40: div.style.top = parseInt(div.style.top) + speed + "px";
       break;
       case 37: div.style.top = parseInt(div.style.left) - speed + "px";
       break;
       case 39: div.style.top = parseInt(div.style.left) + speed + "px";
       break;
     }
}加个按钮更改speed值就可以实现不同速度的变换
刮刮乐：
var ul = document.getElementsByTagName("ul")[0];
ul.onmouseover = function(e){
    var event = e || window.event;
    var target = event.target || event.srcElement;
    target.style.backgroundColor = "rgb(0, 255," + target.getAttribute('img-date') + ")";
    target.setAttribute('img-date', parseInt(target.getAttribute('img-date')) + 6);
}
