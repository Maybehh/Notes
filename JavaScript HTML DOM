DOM（Document Object Model)定义了表示和修改文档所需的方法。DOM对象即为宿主对象，由浏览器厂商定义，用来操作html和xml功能的一类对象的集合。
也有人称DOM是对HTML以及XML的标准编程接口
DOM不能操作css，谁都不能操控css(只能改变css行间样式）
现在说的不兼容大部分是ie9及以下，因为ie10开始的都遵循w3c，就兼容了

xml -> xhtml -> html
(xml可以自定义元素，以前用来作发送数据的，现在基本不用了，都用json)

DOM 定义了访问文档的标准：“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问、更新文档的内容、结构和样式。”
W3C DOM 标准被分为 3 个不同的部分：
Core DOM - 所有文档类型的标准模型
XML DOM - XML 文档的标准模型
HTML DOM - HTML 文档的标准模型

HTML DOM 是 HTML 的标准对象模型和编程接口。它定义了：
作为对象的 HTML 元素
所有 HTML 元素的属性
访问所有 HTML 元素的方法
所有 HTML 元素的事件
换言之：HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准

在 DOM 中，所有 HTML 元素都被定义为对象

innerHTML 属性
获取元素内容最简单的方法是使用 innerHTML 属性。
innerHTML 属性可用于获取或替换 HTML 元素的内容。
innerHTML 属性可用于获取或改变任何 HTML 元素，包括 <html> 和 <body>

HTML DOM 文档对象是您的网页中所有其他对象的拥有者
HTML DOM Document 对象 
<html>标签属于document节点的子元素节点，document表示整个文档
(document有整个页面那么大，html只有宽度是网页宽，高度是靠内容撑起来的）
文档对象代表您的网页。如果您希望访问 HTML 页面中的任何元素，那么您总是从访问 document 对象开始
document.getElementsByTagName(name)	通过标签名来查找元素
element.innerHTML = new html content	改变元素的 inner HTML
element.attribute = new value	改变 HTML 元素的属性值
element.setAttribute(attribute, value)	改变 HTML 元素的属性值
element.style.property = new style	改变 HTML 元素的样式

document.createElement(element)	创建 HTML 元素
document.removeChild(element)	删除 HTML 元素
document.appendChild(element)	添加 HTML 元素
document.replaceChild(element)	替换 HTML 元素
document.write(text)	写入 HTML 输出流

document.documentElement	返回 <html> 元素
document.documentMode	返回浏览器使用的模式
document.implementation	返回 DOM 实现
document.inputEncoding	返回文档的编码（字符集）
document.lastModified	返回文档更新的日期和时间
document.readyState	返回文档的（加载）状态
document.referrer	返回引用的 URI（链接文档）
document.strictErrorChecking	返回是否强制执行错误检查

通过 id 查找 HTML 元素
通过标签名查找 HTML 元素
通过类名查找 HTML 元素
通过 CSS 选择器查找 HTML 元素
通过 HTML 对象集合查找 HTML 元素

查：
1、var myElement = document.getElementById("intro");(IE8以下如果没有id属性则name属性会被找到)
如果元素被找到，此方法会以对象返回该元素（在 myElement 中），如果未找到元素，myElement 将包含 null
后端经常会把id属性更改，因此不要用id属性比较就好
2、基本上系统返回的成组的都是以类数组返回
var y = x.getElementsByTagName("p"); （任何浏览器都兼容）
变量y会是HTMLCollection对象，y[0]是第一个p元素对象（通过类名获取也相同）
3、var y = x.getElementsByClassName("p"); (ie8及以下不兼容）
4、var y = x.getElementsByName("p"); （得到name属性）
5、querySelector("div span>strong.demo") 方法 css选择器 css怎么选取里面就怎么写 选取一个
6、querySelectorAll() 方法 css选择器
本例返回 class="intro" 的所有 <p> 元素列表：var x = document.querySelectorAll("p.intro");
css选择器在ie7及以下不管用，且不是实时的，后续的选取的元素个数修改对他来说无效，它生成那一刻得到多少个以后就只能对这几个操作，可以感知其它对选取元素的
修改（只能对当时获取的那一部分元素进行操作，对外界增加同类元素或减少同类元素它是不知道的）
有多少个就多少个，不会因为后续修改而改变，因此不使用css选择器，除非要保存它的副本就可以用一下

通过 HTML 对象选择器查找 HTML 对象
本例查找 id="frm1" 的 form 元素，在 forms 集合中，然后显示所有元素值：
var x = document.forms["frm1"];（x是form标签内的所有内容）
for (i = 0; i < x.length; i++) {
    text += x.elements[i].value + "<br>";
}
id为“frm1”的form元素的所有子元素的对象（因为是x.element)
详见谷歌收藏的JS HTML DOM 文档

在 JavaScript 中，document.write() 可用于直接写入 HTML 输出流：<script>document.write(Date());</script>
千万不要在文档加载后使用 document.write()。这么做会覆盖文档

创建动画容器：所有动画都应该与容器元素关联
为元素添加样式：应该通过 style = "position: relative" 创建容器元素。应该通过 style = "position: absolute" 创建动画元素。

document.getElementById("myBtn").onclick = displayDate;
不可以写成document.getElementById("myBtn").onclick = displayDate();因为带括号就会先执行一次了，结果会马上出来，不用点击

事件：
1、ele.onXXX = function(event){}(这个是元素本来就有的事件，只是原来内容为空，现在给他绑定一个函数而已）
兼容性很好，但是一个元素的同一个事件上只能绑定一个函数，写多个会被最后一个覆盖
基本等同于写在行间样式上，即<div onclick = "console.log()"></div>在行间不用写function
on这种绑定方式叫做句柄的绑定方式
程序this指向是dom元素本身

解除绑定：elem.onclick = null/''/false;
点一次就解除：elem.onclick = function(){ ....; this.onclick = null;}

当用户进入后及离开页面时，会触发 onload 和 onunload 事件
onload 事件可用于检测访问者的浏览器类型和浏览器版本，然后基于该信息加载网页的恰当版本
onload 和 onunload 事件可用于处理 cookie：
<body onload="checkCookies()">
function checkCookies() {
  var text = "";
  if (navigator.cookieEnabled == true) {
    text = "Cookie 已启用";
  } else {
    text = "Cookie 未启用";
  }
  document.getElementById("demo").innerHTML = text;
}

onchange 事件经常与输入字段验证结合使用，当用户改变输入字段内容时（从无到有也会改变），会调用相关函数
onmousedown, onmouseup 以及 onclick 事件构成了完整的鼠标点击事件。
首先当鼠标按钮被点击时，onmousedown 事件被触发；然后当鼠标按钮被释放时，onmouseup 事件被触发；
最后，当鼠标点击完成后（按下放开后），onclick 事件被触发
onmousemove在进入内容和在内容里移动都会触发事件，而onmouseover只有在进入内容会触发内容

2、addEventListener() 方法为元素附加事件处理程序而不会覆盖已有的事件处理程序
您能够向一个元素添加多个事件处理程序。您能够向一个元素添加多个相同类型的事件处理程序，例如两个 "click" 事件。
您能够向任何 DOM 对象添加事件处理程序而非仅仅 HTML 元素，例如 window 对象
addEventListener() 方法使我们更容易控制事件如何对冒泡作出反应
能够通过使用 removeEventListener() 方法轻松地删除事件监听器

element.addEventListener(event, function, useCapture);
第一个参数是事件的类型（比如 "click" 或 "mousedown"）
第二个参数是当事件发生时我们需要调用的函数（写名字，没有括号）
第三个参数是布尔值，指定使用事件冒泡还是事件捕获。此参数是可选的
注意：请勿对事件使用 "on" 前缀；请使用 "click" 代替 "onclick"
element.addEventListener("click", function(){ alert("Hello World!"); });
程序this指向是dom元素本身

可以绑定多次：（ie9以下不兼容）
element.addEventListener("click", myFunction);
element.addEventListener("click", mySecondFunction);
点一次后按顺序执行函数

element.addEventListener("click", function(){ alert("Hello World!"); });
element.addEventListener("click", function(){ alert("Hello World!"); });
点一次后弹两次警告框（函数的地址不一样，是两个函数）
element.addEventListener("click", test);
element.addEventListener("click", test);
function test(){ alert("Hello World!"); }
点击一次后只弹一个框，因为是同一个函数，即同一个元素绑定同一个事件，事件函数是同一个函数（地址相同）只能执行一次

添加当用户调整窗口大小时触发的事件监听器：
window.addEventListener("resize", function(){
    document.getElementById("demo").innerHTML = sometext;
});

当传递参数值时，请以参数形式使用调用指定函数的“匿名函数”：
var p1 = 5; var p2 = 7;
element.addEventListener("click", function(){ myFunction(p1, p2); });

在 HTML DOM 中有两种事件传播的方法：冒泡和捕获
事件传播是一种定义当发生事件时元素次序的方法。假如 <div> 元素内有一个 <p>，然后用户点击了这个 <p> 元素，应该首先处理哪个元素“click”事件？
在冒泡中，最内侧元素的事件会首先被处理，然后是更外侧的：首先处理 <p> 元素的点击事件，然后是 <div> 元素的点击事件。
在捕获中，最外侧元素的事件会首先被处理，然后是更内侧的：首先处理 <div> 元素的点击事件，然后是 <p> 元素的点击事件。
在 addEventListener() 方法中，你能够通过使用“useCapture”参数来规定传播类型：
addEventListener(event, function, useCapture);
默认值是 false，将使用冒泡传播，如果该值设置为 true，则事件使用捕获传播

removeEventListener() 方法会删除已通过 addEventListener() 方法附加的事件处理程序：
document.getElementById("myDIV").addEventListener("mousemove", myFunction);
document.getElementById("myDIV").removeEventListener("mousemove", myFunction);
若绑定匿名函数，则无法解除
想要解除绑定的事件的函数必须同一个函数，因此函数必须得写在外面，使用函数声明，这样子才能找到函数解除绑定

IE 8、Opera 6.0 及其更早版本不支持 addEventListener() 和 removeEventListener() 方法。
不过，对于这些特殊的浏览器版本，您可以使用 attachEvent() 方法向元素添加事件处理程序，并由 detachEvent() 方法删除：
element.attachEvent(event, function);（可以同时绑定同一个函数多次，即可以执行多次）
element.detachEvent(event, function);
event使用onclick
attachEvent只有两个参数，当然传第三个也不会报错，函数中不使用它而已，不会有任何意义（仅存在arguments中，没什么用）
程序this指向是window，使this指向元素方法：
div.attachEvent('onclick', function(){
    handle.call(div);
});
function handle(){
    this......
}

跨浏览器解决方案：
var x = document.getElementById("myBtn");
if (x.addEventListener) {                    // 针对主流浏览器，除了 IE 8 及更正版本
    x.addEventListener("click", myFunction);
} else if (x.attachEvent) {                  // 针对 IE 8 及更早版本
    x.attachEvent("onclick", myFunction);
} 

封装函数：
function addEvent(elem, type, handle){
      if(elem.addEventListener) {
           elem.addEventListener(type, handle, false);
      } else if(elem.attachEvent){
           elem.attachEvent('on' + type, handle);
      } else {
           elem['on' + type] = handle;
      }
}

点击li，出现它的索引：
for(var i = 0; i < len; i++){
    (function(i){
          liCol[i].onclick = addEventListener('click', function(){
                 console.log(i);
          }, false);
     }(i));
}

事件冒泡：（仅结构上是父子关系才会冒泡和捕获，视觉上重叠的却没有父子关系并不会触发）
结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素（自底向上）
事件捕获：
结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）（自顶向下）
点击的那个元素是正常执行，它的父元素是捕获到然后执行（ie没有捕获事件）

捕获冒泡混合写，触发顺序：先捕获，后冒泡
然后被点击的那个元素是正常执行，不关捕获和冒泡的事，看具体程序编写的顺序正常执行

focus, blur, change, submit, reset, select等事件不冒泡
mouseover/out会事件冒泡和捕获，mouseenter/leave不会事件冒泡和捕获

<div class="wrapper">
   <div class="img-box"></div>
   <div class="btn"></div>
</div>
设置wrapper和img-box等大，img-box位置和wrapper重叠，btn位置是wrapper中的一小块
则hover btn，会触发wrapper和btn，并不会触发img-box
即hover仅看hover位置的第一层的那个元素，触发后冒泡

当事件执行函数执行时，系统会传一个对象（该对象有各种信息，如鼠标点击的坐标等）给事件执行函数的第一个参数，
因此可以在函数写上一个参数e，方便接受和操作这个对象
事件对象：
event || window.event   //ie会把系统的返回信息对象存储到window.event里而不是事件执行函数的参数里
因此兼容var event = e || window.event; //e是函数自己写的参数，window.event是固定的

事件源对象：（触发事件的那个元素对象（在DOM中，元素皆对象））
event.target 火狐只有这个
event.srcElement IE只有这个
谷歌两个都有
兼容：var target = event.target || event.srcElement;

点击li,输出li里的内容：
var ul = document......;
ul.onclick = function(e){
     var event = e || window.event;
     var target = event.target || event.srcElement;
     console.log(target.innerText);
} //点击li会冒泡到ul上，因此设置ul的点击事件，就不用一个一个去绑定li了，然后获取点击的target，就得到具体的li元素，这样叫做事件委托

事件委托：
利用事件冒泡和事件源对象进行处理
优点：
1、性能 不需要循环所有的元素一个个绑定事件
2、灵活 当有新的子元素时不需要重新绑定事件

取消冒泡：（stopPropagation和cancelBubble都是系统传来的对象的方法）
event.stopPropagation(); w3c标准，因此不支持ie9以下的版本
event.cancelBubble = true; ie独有（现在谷歌也有了）

封装：
function stopBubble(event){
     if(event.stopPropagetion){
           event.stopPropagetion();
     } else {
         event.cancelBubble = true;
     }
}

阻止默认事件：（表单提交、右键菜单、a标签跳转等是默认事件）
document.oncontextmenu = function(e){  //默认事件是document对象的事件，使用document., 元素对象不能. (加了也没有默认事件的作用)
      console.log('a'); //在鼠标右键出菜单的同时，在控制台打印a
}  //oncontextmenu是鼠标右键出菜单事件
想要阻止默认事件：比如在右键的时候不要有菜单出现
1、return false; 以对象属性的方式注册的事件才生效 //该方式只能阻止句柄写法的默认事件
2、event.preventDefault(); W3C标注，ie9以下不兼容
3、event.returnValue = false; 兼容ie

封装：
function cancelHandler(event){
     if(event.preventDefault){
          event.preventDefault();
     } else if(event.returnValue){
          event.returnValue = false;
     } else {
          return false;
     }
}
调用的时候用return cancelHandler(e);  //e是调用cancelHandler函数的函数的系统传入的对象

a标签的跳转默认事件：(a中不写href属性就不会跳转，写了href = "" 就是默认到顶部)
var a = ....; //href是目的意思，没有跳转功能，点击后跳转是a标签的默认行为
a.onclick = function(){
   return false;
}
也可以直接写<a href = "javascript: void(0)"></a> 在这里写void相当于写返回值，结果是return括号里的参数
根据 W3C HTML DOM 标准，HTML 文档中的所有事物都是节点：
整个文档是文档节点
每个 HTML 元素是元素节点
HTML 元素内的文本是文本节点
每个 HTML 属性是属性节点
所有注释是注释节点

在节点树中，顶端节点被称为根（根节点）（html文档中根节点为html）

通过 JavaScript，您可以使用以下节点属性在节点之间导航：（返回的数组都是类数组）
1、parentNode（html的父节点是#document(代表整个文档，里面有<!DOCTYPE>等其他所有);   #document的父节点是null;)(最顶端的父节点是#document)
2、childNodes[nodenumber]
（直系的不包含孙子的结点集合，有元素结点、属性结点、文本节点、注释结点、document（记住document自成一个节点）、DocumentFragment）
<div>1
   <span>1</span>
   <strong></strong>
   <p></p>
</div>
div有7个子节点，文本节点（内容是1）、元素节点(span)、空白文本节点、元素节点(strong)、空白文本节点、元素节点(p)、空白文本节点
3、firstChild 第一个子节点，上例中是文本节点（内容是1）
4、lastChild 最后一个子节点，上例中是空白文本节点
5、nextSibling 上一个兄弟节点（没有就是空）
6、previousSibling 下一个兄弟节点（没有就是空）

元素节点（必须得是元素,不能是文本、document等其他）(除children，其他的IE9以下都不兼容，其他浏览器都兼容）（返回的数组都是类数组）
1、parentElement(html标签的父元素节点是null）
2、children(直系的非子孙的元素节点）（children所有浏览器都兼容）
3、childElementCount（子元素节点的个数）不用，用.child.length代替  childElementCount === .child.length
4、firstElementChild
5、lastElementChild
6、nextElementSibling 
7、previousElementSibling

DOM 处理中的一种常见错误是认为元素节点中包含文本(文本节点，内容（也就是平常所说的文本）是文本节点的值)
元素节点 <title> 不包含文本。它包含了值为 "DOM 教程" 的文本节点
文本节点的值能够通过节点的 innerHTML 属性进行访问，var myTitle = document.getElementById("demo").innerHTML;（demo的文本结点的值）
访问 innerHTML 属性等同于访问首个子节点的 nodeValue：var myTitle = document.getElementById("demo").firstChild.nodeValue;
也可以这样访问第一个子节点：var myTitle = document.getElementById("demo").childNodes[0].nodeValue;

元素节点的一些属性：
1、innerHTML: 
使用 innerHTML 取回 HTML 元素的内容（元素里的所有内容,以字符串形式，如" <span>123</span> "，前后空的是折行的空白文本节点）
对一个元素使用.innerHTML会覆盖原来的所有内容
追加内容：div.innerHTML += "123"
会把innerHTML识别为html的结构内容，因此写样式也会生效<span style = "...."></span>
2、innerText：会按顺序把文本节点取出来 <span>123</span> <strong>234</strong> 结果是 123 234 前中后的空格是空白文本节点
赋值的话会把其他类型的节点也覆盖，如原来<div> <span>123</span> </div> 如果div.innerText = "123"，就会变成<div>123</div>
老版本火狐不兼容，用了textContent（老版本ie不支持），现在浏览器基本兼容了innerText

节点的四个属性：
1、nodeName 属性规定节点的名称
nodeName 是只读的
元素节点的 nodeName 等同于标签名
属性节点的 nodeName 是属性名称
文本节点的 nodeName 总是 #text
文档节点的 nodeName 总是 #document
注释：nodeName 总是包含 HTML 元素的大写标签名(总是返回标签的大写)

2、nodeValue 属性规定节点的值
元素节点的 nodeValue 是 undefined
文本节点的 nodeValue 是文本文本 （可读可更改）
属性节点的 nodeValue 是属性值
注释节点的 nodeValue 是注释的内容 （可读可更改）

3、nodeType 属性返回节点的类型。nodeType 是只读的，返回的是数字
节点           类型  例子
ELEMENT_NODE	1	<h1 class="heading">W3School</h1>
ATTRIBUTE_NODE	2	class = "heading" （弃用）
TEXT_NODE	3	W3School
COMMENT_NODE	8	<!-- 这是注释 -->
DOCUMENT_NODE	9	HTML 文档本身（<html> 的父）
DOCUMENT_TYPE_NODE	10	<!Doctype html>
Type 2 在 HTML DOM 中已弃用。XML DOM 中未弃用
不用children返回元素节点：
function retChildElement(node){
    var temp = {//类数组
           length: 0,
           push: Array.prototype.push,
           splice: Array.prototype.splice(不加这个，对象返回的时候以对象的样子显示出来，加了的话就以数组的样子显示出来，但其还是类数组对象）
        },
        child = node.childNodes,
        len = child.length;
    for(var i = 0; i < len ; i++){
        if(child[i].nodeType === 1){
            temp.push(child[i]);
        }
    }
    return temp;
}
4、attribute: Element的属性集合 
<div id = "only" class = "demo"></demo>
div.attribute[0].name = "id"; div.attribute[0].value = "only";  可以更改属性值，但不能更改属性名
div.attribute[0] 结果是 id = "only"
div.attribute 结果是 NamedNodeMap = { 0: id, 1: class, length: 2}的类数组

节点的一个方法：node.hasChildNodes()，返回布尔值

DOM继承树：
       —— Document —— HTMLDocument          
                   —— XHTMLDocument
                                             —— HTMLHeadElement
       —— CharacterData —— Text              —— HTMLBodyElement
                        —— Comment(注释)     —— HTMLTitleElement
Node——                                       —— HTMLParagraphElement
       —— Element —— HTMLElement  —————————— —— HTMLInputElement
                  —— XHTMLElement            —— HTMLTableElement
                                             —— ...etc.
       —— Attr
       
Document相当于构造函数，但不可以new         
document --> HTMLDocument.prototype --> Document.prototype
document.__proto__.__proto__.__proto__是Node{}
document.__proto__.__proto__.__proto__.__proto__是EventTarget{}
document.__proto__.__proto__.__proto__.__proto__.__proto__是Object{}
getElementById定义在Document.prototype上
getElementsByName定义在HTMLDocument.prototype上
getElementSByTagName定义在Document.prototype和Element.prototype上（因此最常用）
HTMLDocument.prototype定义了一些常用属性，body和head分别指向文档中的<body>和<head>标签
（即document.body和document.head相当于获取了body和head标签，就不用再用getElementsByTagName获得了）
Document.prototype上定义了documentElement属性，指代文档的根元素，在HTML文档中，总指代<html>元素
（即document.documentElement相当于获取了html标签）
getElementsByClassName、querySelector、querySelectorAll在Element.prototype和Document.prototype类中均有定义

document.getElementsByTagName("*"); 选择所有元素节点

找第n层祖先节点：（一个节点只有一个父节点，子节点指的是直系孩子，就是子而不是孙子）
function retParent(elem, n){
     while(elem && n){
         elem = elem.parentElement;
         n--;
     }
     return elem;
}

找第n个兄弟元素节点，n=0就是自己，n>0就是nextElementSibling，n<0就是previousElementSibling：
function retSibling(e, n){
    while(e && n){
          if(n > 0){
             if(e.nextElementSibling){
                  e = e.nextElementSibling;
             } else {//兼容
                for(e = e.nextSibling; e(判断null) && e.nodeType != 1; e = e.nextSibling);
             }
             n--;
          } else {
             if(e.previousElementSibling){
                  e = e.previousElementSibling;
             } else {//兼容
                for(e = e.previousSibling; e(判断null) && e.nodeType != 1; e = e.previousSibling);
             }
             n++;
          }
    }
    return e;
}

增：
1、createElement() 创建元素节点
2、createTextNode() 创建文本节点。这段代码创建了一个文本节点：var node = document.createTextNode("这是一个新段落。");
向 <p> 元素追加这个文本节点：para.appendChild(node);
3、createComment() 创建注释节点
4、createDocmentFragment() 创建

插：
1、parentNode.appendChild() 方法，追加新元素作为父的最后一个子元素 是剪贴操作，把原来的剪下来，再粘到新的位置（就一个，原来的在原来的位置会不见）
2、parentNode.insertBefore(para, child);  parentNode是要插入结点的父节点，para是要插入的新节点，child是参考节点，para插在child前面
para和child是parentNode的子节点

删：
1、需删除某个 HTML 元素，您需要知晓该元素的父：
var parent = document.getElementById("div1");
var child = document.getElementById("p1");
parent.removeChild(child);
这是一种常见的解决方法：找到你想要删除的子，并利用其 parentNode 属性找到父：
var child = document.getElementById("p1");
child.parentNode.removeChild(child);  返回的是被删除的节点（被剪切出来）
2、child.remove() 是在 DOM 4 规范中实现的。但是由于糟糕的浏览器支持，不应该使用该方法
remove()是真正的销毁，没有返回，结果是返回undefined

替换：
如需替换元素的，请使用 replaceChild() 方法：parent.replaceChild(new,origin); (new是新节点，origin是原结点）剪贴操作，返回的是origin节点

getElementsByTagName() 方法返回 HTMLCollection 对象，HTMLCollection 对象是类数组的 HTML 元素列表（集合）
length 属性定义了 HTMLCollection 中元素的数量，length 属性在您需要遍历集合中元素时是有用的
想要改变需要一个一个遍历，整个不能直接改
HTMLCollection 也许看起来像数组，但并非数组。您能够遍历列表并通过数字引用元素（就像数组那样）。
不过，您无法对 HTMLCollection 使用数组方法，比如 valueOf()、pop()、push() 或 join()

NodeList 对象是从文档中提取的节点列表（集合）。NodeList 对象与 HTMLCollection 对象几乎相同。
如使用 getElementsByClassName() 方法，某些（老的）浏览器会返回 NodeList 对象而不是 HTMLCollection。
所有浏览器都会为 childNodes 属性返回 NodeList 对象。
大多数浏览器会为 querySelectorAll() 方法返回 NodeList 对象
length 属性定义节点列表中的节点数

HTMLCollection 是 HTML 元素的集合。NodeList 是文档节点的集合。NodeList 和 HTML 集合几乎完全相同。
HTMLCollection 和 NodeList 对象都是类数组的对象列表（集合）。它们都有定义列表（集合）中项目数的 length 属性。
它们都可以通过索引 (0, 1, 2, 3, 4, ...) 像数组那样访问每个项目。
访问 HTMLCollection 项目，可以通过它们的名称(name属性)、id 或索引号。访问 NodeList 项目，只能通过它们的索引号。
HTMLCollection.namedItem(name或id)或HTMLCollection[name或id]
例：var x = document.getElementsByTagName("p")["myElement"]; 或 var x = document.getElementsByTagName("p").namedItem("myElement");
只有 NodeList 对象能包含属性节点和文本节点。
节点列表不是数组！节点数组看起来像数组，但并不是。您能够遍历节点列表并像数组那样引用其节点。
不过，您无法对节点列表使用数组方法，比如 valueOf()、push()、pop() 或 join()

onclick不同次结果不一样：
var count = 0;
div.onclick = function(){(几种状态就模几)
    count++;
    if(count % 2 == 1){...}
    else {...}
}
选项卡：
var btn = document.getElementsByTagName("button");
var div = document.getElementsByClassName("content");
for(var i = 0; i < btn.length; i++){
    (function(n){
         btn[n].onclick = function(){
              for(var j = 0; j < btn.length; j++){
                 btn[j].className = "";
                 div[j].style.display = "none";
              }
              this.className = "active";
              div[n].style.display = "block";
         }
    }(i));
}
动块：
var speed = 1;
var timer = setInterval(function(){
      speed += speed/10;
      div.style.left = parseInt(div.style.left) + 1 + "px";
      if(parseInt(div.style.left) > 200) clearInterval(timer);
},10);
按键盘的上下左右箭头移动：
document.onkeydown = function(e){ //e对象会记录键盘按下的信息
     switch(e.which) {//键盘的按钮的序号
       case 38: div.style.top = parseInt(div.style.top) - speed + "px";
       break;
       case 40: div.style.top = parseInt(div.style.top) + speed + "px";
       break;
       case 37: div.style.top = parseInt(div.style.left) - speed + "px";
       break;
       case 39: div.style.top = parseInt(div.style.left) + speed + "px";
       break;
     }
}加个按钮更改speed值就可以实现不同速度的变换
刮刮乐：
var ul = document.getElementsByTagName("ul")[0];
ul.onmouseover = function(e){
    var event = e || window.event;
    var target = event.target || event.srcElement;
    target.style.backgroundColor = "rgb(0, 255," + target.getAttribute('img-date') + ")";
    target.setAttribute('img-date', parseInt(target.getAttribute('img-date')) + 6);
}

data-log是人工自己设计出来的属性，如data-log = "0"，data-log = "1"等，每个标签的属性值是唯一的，通过该属性值，点击一次后台就会获得该属性一次，
通过属性值的个数来计算点击次数
获取方法：
a.onclick = function (){
   console.log(this.getAttribute('data-log'));
}
getAttribute可以获取自行定义和系统定义的属性
setAttribute可以设置自行定义和系统定义的属性

通过js写一个结构：
可以按照结构通过setAttribute、appendChild等写，也可以直接写一个最大的元素，然后在最大的里写innerHTML

系统没有insertAfter，自己写：
Element.prototype.insertAfter = function(targetNode, afterNode){
         var beforeNode = afterNode.nextElementSibling;
         if(beforeNode == null){
              this.appendChild(targetNode);
         } else {
              this.insertBefore(targetNode, beforeNode);
         }
}
习惯在原型链上写方法，可以继承，不用把调用函数的对象也当作参数传进来（直接封装函数的话就得传）

把内部元素节点倒置：children获得子元素节点后，先把倒数第二个appendChild，然后倒数第三，直到第一个
Element.prototype.reverse = function(){
       var arr = this.children;
       var len = arr.length;
       for(var i = len - 2 ; i >= 0; i--){
            this.appendChild(arr[i]);
       }
}//每一次for循环，arr都在变化(如果子元素节点内有内容，也会跟着一起移)

定时器：
var time = 1000;
setInterval(function(){
    ...
}, time); //time只读取一次，以后的值永远是那一次读取的值，1000，不会变成2000
time = 2000;

setInterval是非常不准的，它的机制是基于红黑树的，所以有提前有延后
setInterval是window上的方法，只找GO和内部函数的AO
每一个setInterval都会返回一个数字，作为他的唯一标识，第一个定时器，第二个定时器，......（从1开始）
因此clearInterval(..)就是clear传入的那个标识的对应的定时器
因此需要用变量 = setInterval(..),以便于清除，不用变量接收标识就得清楚具体的标识，如clearInterval(1);

重新给timer赋值，timer原来的计时器如果没有被清除，则会继续执行

setInterval("console.log('a');", 100); function的位置可以写代码块，也会执行

setTimeout(function(){},1000); 延迟1000毫秒执行函数，只执行一次
clearTimeout(timer)，标识不会setInterval重叠，不同时存在标识为1的setTimeout和setInterval，依次罗列
var timer = setInterval(..);
var timer2 = setTimeout(..); 
程序中按顺序写的话，timer = 1; timer2 = 2; 即在全局中标识每一个数字只会出现一次，按顺序进行标识

都是全局window上的方法，内部函数的this指向window

计时器：
var minutesNode = document.getElementsByTagName("input")[0];
var secondsNode = document.getElementsByTagName("input")[1];
var minutes = 0,
    seconds = 0;
var timer = setInterval(function(){
        seconds++;
        if(seconds == 60){
           seconds = 0;
           minutes++;
        }
        minutesNode.value = minutes;
        secondsNode.value = seconds;
        if(minutes == 3){
           clearInterval(timer);
        }
},1000);

鼠标事件：
拖方块：
var disX, disY;
elem.onmousedown = function(e){
      var event = e || window.event;
      disX = event.pageX - parseInt(elem.style.left);
      disY = event.pageY - parseInt(elem.style.top);
      document.onmousemove = function(e){
      //在document上onmousemove,以防鼠标移动太快事件监听跟不上
      绑定固定的元素的话只有在元素上move有效,如果一下子鼠标太快离开元素,系统可能监听不上，之后鼠标在元素外move，方块也不会动了
            var event = e || window.event;
            elem.style.left = event.pageX - disX + "px";
            elem.style.top = event.pageY - disY + "px";
      }
      document.onmouseup = function(){
           document.onmousemove = null;
      }
}
ie有elem.setCapture()和elem.releaseCapture()两个方法，可以把document上的事件硬捕获到自己身上（只有ie能用）

click,mousedown,mouseup三个事件, 无论怎么写，都是先down, 后up, 最后click
mouseover和mouseout, mouseenter和mouseleave(html5中) 这两对是同样的功能
elem.mouseover在elem内移动不会触发，elem.mousemove在元素内移动也会触发

onmousedown: 鼠标左键：e.button = 0, 鼠标右键：e.button = 2

DOM3规定：click事件只能监听左键，只能通过 mousedown 和 mouseup 来判断鼠标键

区分点击和down和up: 
var firstTime = 0;
var lastTime = 0;
var key = false;
document.onmousedown = function () {
   firstTime = new Date().getTime();
   document.onmousemove = function (e) {
      ...
   }
}
document.onmouseup = function () {
   lastTime = new Date().getTime();
   if(lastTime - firstTime < 300) {
       key = true;
   }
}
document.onclick = function () {
   if(key) {
       ...;
       key = false;
   }
}

键盘事件：
触发顺序：keydown > keypress > keyup
键盘是按住一直触发，一直keydown keypress keydown keypress .... 
keydown 和 keypress 区别：
keydown 可以响应任意键盘按键，keypress只可以响应字符类键盘按键
keypress返回ASCII码，可以转换成相应字符（通过charCode属性获取）
document.onkeypress = function (e) {
    console.log(String.fromCharCode(e.charCode));
}
按键之后的信息对象的which记录按下的是哪一个键（键盘每一个键有一个标号）

oninput：当input的value变化时就会触发
onchange: 聚焦和失焦的时候input的内容改变了就会触发（聚焦和失焦的时候内容一样就不会触发）

DOM0级和DOM2级:
DOM0级事件绑定：只能给一个元素的某一个行为绑定一次方法，第二次绑定的会把前面的覆盖掉(onclick)
DOM2级事件绑定：可以给某一个元素的同一个行为绑定多个不同的方法(addEventListener)
DOM1成为W3C推荐标准，1级DOM标准中并没有定义事件相关的内容所以没有1级DOM事件模型

写：dots[d].id = d;格式 必须是html认识的属性，写成ids就加不上去 自定义属性可用setAttribute来设置html不认识的属性
读：.xx 的获取必须是html认识的且写在内联里的属性，自定义属性只能写在内联里，不认识的是undefined，不认识的写在内联的是undefined，认识的不写在内联的是空
