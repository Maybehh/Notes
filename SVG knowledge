什么是SVG？
SVG 指可伸缩矢量图形 (Scalable Vector Graphics)
SVG 用于定义用于网络的基于矢量的图形
SVG 使用 XML 格式定义图形
SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失
SVG 是万维网联盟的标准

SVG 的优势
与其他图像格式相比（比如 JPEG 和 GIF），使用 SVG 的优势在于：
SVG 图像可通过文本编辑器来创建和修改
SVG 图像可被搜索、索引、脚本化或压缩
SVG 是可伸缩的
SVG 图像可在任何的分辨率下被高质量地打印
SVG 可在图像质量不下降的情况下被放大
SVG 图像中的文本是可选的，同时也是可搜索的（很适合制作地图）

SVG 是使用 XML 来描述二维图形和绘图程序的语言
SVG 文件必须使用 .svg 后缀来保存
SVG 代码以 <svg> 元素开始，包括开启标签 <svg> 和关闭标签 </svg> 。这是根元素。width 和 height 属性可设置此 SVG 文档的宽度和高度
version 属性可定义所使用的 SVG 版本，xmlns 属性可定义 SVG 命名空间。
<svg width="100%" height="100%" version="1.1"
xmlns="http://www.w3.org/2000/svg">

SVG 文件可通过以下标签嵌入 HTML 文档：<embed>、<object> 或者 <iframe>
<embed src="rect.svg" width="300" height="100" type="image/svg+xml" pluginspage="http://www.adobe.com/svg/viewer/install/" />
注释：pluginspage 属性指向下载插件的 URL
<object> 标签是 HTML 4 的标准标签，被所有较新的浏览器支持。它的缺点是不允许使用脚本。
注释：假如您安装了最新版本的 Adobe SVG Viewer，那么当使用 <object> 标签时 SVG 文件无法工作（至少不能在 IE 中工作）！
<object data="rect.svg" width="300" height="100" type="image/svg+xml" codebase="http://www.adobe.com/svg/viewer/install/" />
注释：codebase 属性指向下载插件的 URL。

例：<?xml version="1.0" standalone="no"?>

<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

<svg width="100%" height="100%" version="1.1"
xmlns="http://www.w3.org/2000/svg">定义了一个100*100px的SVG画布

<rect x="20" y="20" rx="20" ry="20" width="250"
height="100" style="fill:red;stroke:black;
stroke-width:5;opacity:0.5"/>
（rx 和 ry 属性可使矩形产生圆角)
rx圆角的x方位的半径
ry圆角的y方位的半径
</svg>

<ellipse> 标签可用来创建椭圆 
cx 属性定义圆点的 x 坐标
cy 属性定义圆点的 y 坐标
rx 属性定义水平半径
ry 属性定义垂直半径

<line> 标签用来创建线条
x1 属性在 x 轴定义线条的开始
y1 属性在 y 轴定义线条的开始
x2 属性在 x 轴定义线条的结束
y2 属性在 y 轴定义线条的结束

<polygon> 标签用来创建含有不少于三个边的图形
points 属性定义多边形每个角的 x 和 y 坐标 
例：<polygon points="220,100 300,210 170,250" style="fill:#cccccc; stroke:#000000;stroke-width:1"/>
polygon的路径在最后一个点处自动回到第一个点

<polyline> 标签用来创建仅包含直线的形状
例：<polyline points="0,0 0,20 20,20 20,40 40,40 40,60" style="fill:white;stroke:red;stroke-width:2"/>

<path> 标签用来定义路径（均为闭合的）
下面的命令可用于路径数据：
M = moveto
L = lineto
H = horizontal lineto H，绘制水平线(H x (or h dx右为正，左为负))
V = vertical lineto   V，绘制垂直线(V y (or v dy下为正，上为负))
C = curveto 三次贝塞尔曲线，控制点描述的是曲线起始点的斜率和曲线结束点的斜率，曲线上各个点的斜率，是从起点斜率到终点斜率的渐变过程
S = smooth curveto
Q = quadratic Belzier curve二次贝塞尔曲线Q只需要一个控制点，用来确定起点和终点的曲线斜率
T = smooth quadratic Belzier curveto
A = elliptical Arc
Z = closepath(不区分大小写）
注释：以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位（例如：从上一个点开始，向上移动10px，向左移动7px）
例：<path d="M250 150 L150 350 L350 350 Z" />（m dx dy)
属性d采用的是用户坐标系统，所以不需标明单位
三次贝塞尔曲线有一个S命令，二次贝塞尔曲线有一个T命令，可以通过更简短的参数，延长贝塞尔曲线
S:S x2 y2, x y (or s dx2 dy2, dx dy)(第二个控制点以及结束点）
S命令可以用来创建与前面一样的贝塞尔曲线，但是，如果S命令跟在一个C或S命令后面，
则它的第一个控制点会被假设成前一个命令曲线的第二个控制点的中心对称点（以前一个S或C的结束点作中心对称）
如果S命令单独使用，前面没有C或S命令，那当前点将作为第一个控制点
T x y (or t dx dy)（结束点）
T命令前面必须是一个Q命令，或者是另一个T命令，和上述的S命令的对称方式相同。如果T单独使用，那么控制点就会被认为和终点是同一个点，所以画出来的将是一条直线
弧形命令A
 A rx ry x-axis-rotation large-arc-flag sweep-flag x y
 a rx ry x-axis-rotation large-arc-flag sweep-flag dx dy
 rx,ry x,y轴半径
 x,y 终点
 x-axis-rotation（x轴旋转角度） 
 large-arc-flag（角度大小），large-arc-flag决定弧线是大于还是小于180度，0表示小角度弧，1表示大角度弧
 sweep-flag（弧线方向），sweep-flag表示弧线的方向，0表示从起点到终点沿逆时针画弧，1表示从起点到终点沿顺时针画弧
 
通过指定stroke-dasharray属性，将虚线类型应用在描边上
stroke-dasharray属性的参数，是一组用逗号分割的数字组成的数列，数字必须用逗号分割（空格会被忽略）
每一组数字，第一个用来表示填色区域的长度，第二个用来表示非填色区域的长度（第一个是填色的）
第一个例子指定了3个数字，这种情况下，数字会循环两次，形成一个偶数的虚线模式（奇数个循环两次变偶数个）。所以该路径首先渲染5个填色单位，10个空白单位，
5个填色单位，然后回头以这3个数字做一次循环，但是这次是创建5个空白单位，10个填色单位，5个空白单位。通过这两次循环得到偶数模式，并将这个偶数模式不断重复

SVG规范将属性区分成properties和其他attributes，前者是可以用CSS设置的，后者不能
在svg里<style>则放在<defs>标签里。<defs>表示定义，这里面可以定义一些不会在SVG图形中出现、但是可以被其他元素使用的元素
<?xml version="1.0" standalone="no"?>
<svg width="200" height="200" xmlns="http://www.w3.org/2000/svg" version="1.1">
  <defs>
    <style type="text/css"><![CDATA[
       #MyRect {
         stroke: black;
         fill: red;
       }
    ]]></style>
  </defs>
  <rect x="10" height="180" y="10" width="180" id="MyRect"/>
</svg>
定义一个外部的样式表，但是要符合normal XML-stylesheet syntax的CSS规则<?xml-stylesheet type="text/css" href="style.css"?>

SVG 渐变必须在 <defs> 标签中进行定义
<linearGradient> 可用来定义 SVG 的线性渐变
当 y1 和 y2 相等，而 x1 和 x2 不同时，可创建水平渐变
当 x1 和 x2 相等，而 y1 和 y2 不同时，可创建垂直渐变
当 x1 和 x2 不同，且 y1 和 y2 不同时，可创建角形渐变
例：
<defs>
<linearGradient id="orange_red" x1="0%" y1="0%" x2="100%" y2="0%">
<stop offset="0%" style="stop-color:rgb(255,255,0);
stop-opacity:1"/>
<stop offset="100%" style="stop-color:rgb(255,0,0);
stop-opacity:1"/>
</linearGradient>
</defs>

<ellipse cx="200" cy="190" rx="85" ry="55"
style="fill:url(#orange_red)"/>
线性渐变内部有几个<stop>（中值）结点，这些结点通过指定位置的offset（偏移）属性和stop-color（颜色中值）属性来说明在渐变的特定位置上应该是什么颜色
偏移量应该始终从0%开始（或者0也可以，百分号可以扔掉），到100%（或1）结束。如果stop设置的位置有重合，将使用XML树中较晚设置的值
渐变色默认是水平方向的
可以在渐变上使用xlink:href属性。
如果使用了该属性时，一个渐变的属性和颜色中值（stop）可以被另一个渐变包含引用。在下例中，你就不需要再Grandient2中重新创建全部的颜色中值（stop）
<linearGradient id="Gradient1">
   <stop id="stop1" offset="0%"/>
   <stop id="stop2" offset="50%"/>
   <stop id="stop3" offset="100%"/>
 </linearGradient>
 <linearGradient id="Gradient2" x1="0" x2="0" y1="0" y2="1" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#Gradient1"/>
    
<defs>
<radialGradient id="grey_blue" cx="50%" cy="50%" r="50%"
fx="50%" fy="50%">
<stop offset="0%" style="stop-color:rgb(200,200,200);
stop-opacity:0"/>
<stop offset="100%" style="stop-color:rgb(0,0,255);
stop-opacity:1"/>
</radialGradient>
</defs>

<ellipse cx="230" cy="200" rx="110" ry="100"
style="fill:url(#grey_blue)"/>
cx、cy 和 r 属性定义了渐变结束所围绕的圆环，它需要一个中心点
焦点，由fx和fy属性定义。第一个点描述了渐变边缘位置，焦点则描述了渐变的中心
如果焦点移到圆圈的外面，渐变将不能正确呈现，所以该点会被假定在圆圈范围内。如果没有给出焦点，将认为该点与中心点的位置一致
spreadMethod属性，该属性控制了当渐变到达终点的行为，但是此时该对象尚未被填充颜色。这个属性可以有三个值：pad、reflect或repeat
pad当渐变到达终点时，最终的偏移颜色被用于填充对象剩下的空间。
reflect会让渐变一直持续下去，不过它的效果是与渐变本身是相反的，以100%偏移位置的颜色开始，逐渐偏移到0%位置的颜色，然后再回到100%偏移位置的颜色
repeat也会让渐变继续，但是它不会像reflect那样反向渐变，而是跳回到最初的颜色然后继续渐变
两种渐变都有一个叫做 gradientUnits（渐变单元）的属性，它描述了用来描述渐变的大小和方向的单元系统。该属性有两个值：userSpaceOnUse 、objectBoundingBox。
默认值为objectBoundingBox，我们目前看到的效果都是在这种系统下的，它大体上定义了对象的渐变大小范围，所以你只要指定从0到1的坐标值，
渐变就会自动的缩放到对象相同大小。userSpaceOnUse使用绝对单元，所以你必须知道对象的位置，并将渐变放在同样地位置上

<text x="15" y="30" fill="white" font-family="sans-serif" font-size="12pt">Pad</text>
属性text-anchor，可以有这些值：start、middle、end或inherit，允许决定从这一点开始的文本流的方向
tspan
该元素用来标记大块文本的子部分，它必须是一个text元素或别的tspan元素的子元素。一个典型的用法是把句子中的一个词变成粗体红色
例：
<text>
  <tspan font-weight="bold" fill="red">This is bold and red</tspan>
</text>
属性：
x为容器设置一个新绝对x坐标。它覆盖了默认的当前的文本位置。这个属性可以包含一个数列，它们将一个一个地应用到tspan元素内的每一个字符上
dx从当前位置，用一个水平偏移开始绘制文本。这里，你可以提供一个值数列，可以应用到连续的字体，因此每次累积一个偏移
属性y和属性dy作垂直转换
rotate把所有的字符旋转一个角度。如果是一个数列，则使每个字符旋转分别旋转到那个值，剩下的字符根据最后一个值旋转
textLength这是一个很模糊的属性，给出字符串的计算长度。它意味着如果它自己的度量文字和长度不满足这个提供的值，则允许渲染引擎精细调整字型的位置

tref
tref元素允许引用已经定义的文本，高效地把它复制到当前位置。你可以使用xlink:href属性，把它指向一个元素，取得其文本内容。
你可以独立于源样式化它、修改它的外观。
<text id="example">This is an example text.</text>
<text>
    <tref xlink:href="#example" />
</text>

textPath
该元素利用它的xlink:href属性取得一个任意路径，把字符对齐到路径，于是字体会环绕路径、顺着路径走：
<path id="my_path" d="M 20,20 C 40,40 80,40 100,20" />
<text>
  <textPath xlink:href="#my_path">This text follows a curve.</textPath>
</text>

<pattern>需要放在SVG文档的<defs>内部
patternUnits属性：同 gradientUnits属性（在objectBoundingBox下，width和height设置为0.5为对象的一半，以此类推）
patternContentUnits属性：描述了pattern元素基于基本形状使用的单元系统，这个属性默认值为userSpaceOnUse
userSpaceOnUse:有确认的大小(不变)并且重复他们自己，与对象形状独立开来，为了美观需要自己调整位置:x和y 或者大小
这意味着除非你至少指定其中一个属性值（patternContentUnits或patternUnits），
否则在pattern中绘制的形状（patternUnits）将与pattern元素（patternContentUnits）使用的坐标系不同
因为pattern内容与pattern本身处于相同的单元系统中，所以我们不用偏移边框以使pattern在正确的位置上开始，并且即使对象变大，
pattern也会自动的缩放以保证pattern内部的对象数目和重复不变。
这与userSpaceOnUse系统不同，userSpaceOnUse系统中如果对象改变大小，pattern本身会保持不变，只是重复更多次去填满边框
<pattern id="Pattern" width=".25" height=".25" patternContentUnits="objectBoundingBox">(pattern以及pattern里的内容百分比均为相对于对象来说）
   <rect x="0" y="0" width=".25" height=".25" fill="skyblue"/>
   <rect x="0" y="0" width=".125" height=".125" fill="url(#Gradient2)"/>
   <circle cx=".125" cy=".125" r=".1" fill="url(#Gradient1)" fill-opacity="0.5"/>
 </pattern>
如果你已经知道了如何创建基本SVG文件，下一步就是把它们上传到web服务器，但是在这阶段有一些陷阱。对于普通SVG文件，服务器应该会发送下面的HTTP头：
Content-Type: image/svg+xml
Vary: Accept-Encoding
对于gzip压缩的SVG文件，服务器应该会发送下面的HTTP头：
Content-Type: image/svg+xml
Content-Encoding: gzip
Vary: Accept-Encoding

基本上，在 SVG 文档中的1个像素对应输出设备（比如显示屏）上的1个像素。但是这种情况是可以改变的，
否则 SVG 的名字里也不至于会有“Scalable”（可缩放）这个词。
如同CSS可以定义字体的绝对大小和相对大小，SVG也可以定义绝对大小（比如使用“pt”或“cm”标识维度）同时SVG也能使用相对大小，
只需给出数字，不标明单位，输出时就会采用用户的单位
在没有进一步规范说明的情况下，1个用户单位等同于1个屏幕单位。要明确改变这种设定，SVG里有多种方法(svg跟用户，用户与屏幕单位有规定）
<svg width="200" height="200" viewBox="0 0 100 100">
这里定义的画布尺寸是200*200px。但是，viewBox属性定义了画布上可以显示的区域：从(0,0)点开始，100宽*100高的区域。
这个100*100的区域，会放到200*200的画布上显示。于是就形成了放大两倍的效果

基本变形：
transform属性定义了应用于元素和元素子元素的转换定义列表
元素<g>是用来组合对象的容器。添加到g元素上的变换会应用到其所有的子元素上。添加到g元素的属性会被其所有的子元素继承，例：
<svg viewBox="-40 0 150 100" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <g fill="grey"
     transform="rotate(-10 50 100)
                translate(-36 45.5)
                skewX(40)
                scale(1 0.5)">
    <path id="heart" d="M 10,30 A 20,20 0,0,1 50,30 A 20,20 0,0,1 90,30 Q 90,60 50,90 Q 10,60 10,30 z" />
  </g>
  <use xlink:href="#heart" fill="none" stroke="red"/>
</svg>
平移translate()
<rect x="0" y="0" width="10" height="10" transform="translate(30,40)" />呈现一个矩形，移到点(30,40)，而不是出现在点(0,0)
旋转rotate()
在rotate(<a> [<x> <y>])通过变换函数指定的旋转a度约一个指定的点。
如果可选参数x和y不提供，旋转是关于当前用户的坐标系的原点。如果提供了可选参数x和y，则旋转点为(x, y)
斜切skewX()变形和skewY()变形
缩放scale()需要两个数字，作为比率计算如何缩放。0.5表示收缩到50%。如果第二个数字被忽略了，它默认等于第一个值
变形矩阵matrix()
SVG嵌在SVG内部
比之HTML，SVG允许你无缝嵌入别的svg元素。因此你可以利用内部svg元素的属性viewBox、属性width和属性height简单创建一个新的坐标系统

Clipping用来移除在别处定义的元素的部分内容。在这里，任何半透明效果都是不行的。它只能要么显示要么不显示
Masking允许使用透明度和灰度值遮罩计算得的软边缘
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <defs>
    <clipPath id="cut-off-bottom">
      <rect x="0" y="0" width="200" height="100" />
    </clipPath>
  </defs>

  <circle cx="100" cy="100" r="100" clip-path="url(#cut-off-bottom)" />
</svg>
rect不会被绘制，它的像素数据将用来确定：圆形的哪些像素需要最终呈现出来

<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <defs>
    <linearGradient id="Gradient">
      <stop offset="0" stop-color="white" stop-opacity="0" />
      <stop offset="1" stop-color="white" stop-opacity="1" />
    </linearGradient>
    <mask id="Mask">
      <rect x="0" y="0" width="200" height="200" fill="url(#Gradient)"  />
    </mask>
  </defs>

  <rect x="0" y="0" width="200" height="200" fill="green" />
  <rect x="0" y="0" width="200" height="200" fill="red" mask="url(#Mask)" />
</svg>
mask元素的内容是一个单一的rect元素，它填充了一个透明到白色的渐变。作为红色矩形继承mark内容的alpha值（透明度）的结果，我们看到一个从绿色到红色渐变的输出
填充和描边还有两个属性是fill-opacity和stroke-opacity，分别用来控制填充和描边的不透明度。需要注意的是描边将绘制在填充的上面
因此，如果你在一个元素上设置了描边透明度，但它同时设有填充，则描边的一半应用填充色，另一半将应用背景色

所有的SVG元素的初始display值都是inline

嵌入光栅图像
<svg version="1.1"
     xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
     width="200" height="200">
  <image x="90" y="-65" width="128" height="146" transform="rotate(45)"
     xlink:href="https://developer.mozilla.org/media/img/mdn-logo.png"/>（Image元素位置占这么大，具体怎么铺图片看滤镜等其他要求）
</svg>
如果你没有设置x属性或y属性，它们自动被设置为0
如果你没有设置height属性或width属性，它们自动被设置为0
如果width属性或height等于0，将不会呈现这个图像

嵌入任意XML
<foreignObject> 元素,它的唯一的目的是作为其它标记的容器和SVG样式属性的载体（更突出的width和height用来定义该对象占用的空间)
foreignObject元素是一个好办法，用来在SVG中嵌入XHTML。如果你有更长的文本，该HTML布局比SVG text元素更适合,另一个经常被引用的用例是用MathML写的方程式
foreignObject元素的内容是能被浏览器加工的。一个独立的SVG浏览器不太可能呈现HTML或MathML
<svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
  <style>
    polygon { fill: black }
 
    div {
      color: white;
      font:18px serif;
      height: 100%;
      overflow: auto;
    }
  </style>
 
  <polygon points="5,5 195,10 185,185 10,195" />
  
  <foreignObject x="20" y="20" width="160" height="160">
    <div xmlns="http://www.w3.org/1999/xhtml">
      Lorem ipsum dolor sit amet, consectetur adipiscing elit.
      Sed mollis mollis mi ut ultricies. Nullam magna ipsum,
      porta vel dui convallis, rutrum imperdiet eros. Aliquam
      erat volutpat.
    </div>
  </foreignObject>
</svg>

定义一个字体
<font id="Font1" horiz-adv-x="1000">
  <font-face font-family="Super Sans" font-weight="bold" font-style="normal"
      units-per-em="1000" cap-height="600" x-height="400"
      ascent="700" descent="300"
      alphabetic="0" mathematical="350" ideographic="400" hanging="500">
    <font-face-src>
      <font-face-name name="Super Sans Bold"/>
    </font-face-src>
  </font-face>
  <missing-glyph><path d="M0,0h200v200h-200z"/></missing-glyph>
  <glyph unicode="!" horiz-adv-x="300"><!-- Outline of exclam. pt. glyph --></glyph>
  <glyph unicode="@"><!-- Outline of @ glyph --></glyph>
  <!-- more glyphs -->
</font>
horiz-adv-x定义了相比之单一字形的路径定义，一个字符的平均宽度
<font-face>元素在SVG中等同于CSS的 @font-face 声明
它的子元素，<font-face-src>元素，相对于CSS的@font-face描述符中的src描述符。你可以利用它的子元素 <font-face-name>和<font-face-uri>把字体声明指向外源
以上示例表达了如果渲染器有一个名为“Super Sans Bold”的本地字体可用，它将使用这个本地字体
<missing-glyph>元素。它定义了如果一个特定的字形在字体中找不到，而且也没有回调机制的话，该如何显示。它同时还显示了如何创建字形
真正的字形是用<glyph>元素定义的。它最重要的属性是unicode。它定义了表达这个字形的unicode代码点
<hkern>元素和<vkern>元素。这两个元素每个引用到至少两个字符（属性u1和属性u2）以及一个属性k
属性k决定了那些字符之间的距离应该减少多少。下面的示例指示用户代理把“A”和“V”字符放得比标准的字符间距更靠近一些
<hkern u1="A" u2="V" k="20" />

引用一个字体
<font>
  <font-face font-family="Super Sans" />
  <!-- and so on -->
</font>
<text font-family="Super Sans">My text uses Super Sans</text>
可以使用@font-face以引用远程（或者非远程）字体
<font id="Super_Sans">
  <!-- and so on -->
</font>
<style type="text/css">
@font-face {
  font-family: "Super Sans";
  src: url(#Super_Sans);
}
</style>
<text font-family="Super Sans">My text uses Super Sans</text>

font-face-uri元素允许你引用一个外来字体
<font>
  <font-face font-family="Super Sans">
    <font-face-src>
      <font-face-uri xlink:href="fonts.svg#Super_Sans" />
    </font-face-src>
  </font-face>
</font> 

必须在 <defs> 标签中定义 SVG 滤镜
例：
<defs>
<filter id="Gaussian_Blur">
<feGaussianBlur in="SourceGraphic" stdDeviation="3" />
</filter>
</defs>

<ellipse cx="200" cy="150" rx="70" ry="40"
style="fill:#ff0000;stroke:#000000;
stroke-width:2;filter:url(#Gaussian_Blur)"/>

滤镜：输入和输出，对图形加滤镜后输出显示
<filter>
x,y:定义滤镜渲染区域左上角的坐标,默认值均为-10%（滤镜会加东西变大，偏离保持结果完整）
width，height：默认值均为120%（滤镜会加东西变大，加大保持结果完整）
filterUnits：userSpaceOnUse（参照用户的坐标系统） | objectBoundingBox 默认值	objectBoundingBox（所述参考元件上的边界框的分数或百分比（使用百分比））
primitiveUnits：为过滤器基元内的各种长度值以及定义过滤器基元子区域的属性指定坐标系 默认值	userSpaceOnUse
in: 标识给定过滤器原语的输入,如果没有提供任何值，并且这是第一个过滤器原语，则此过滤器原语将SourceGraphic用作其输入
SourceGraphic作为元素原始输入的图形元素
SourceAlpha作为元素原始输入的图形元素(只使用Alpha通道)
BackgroundImage <filter>在调用元素时SVG文档在过滤器区域下的图像快照
BackgroundAlpha BackgroundImage除仅使用Alpha通道外，其他均相同
FillPaint fill滤镜效果的目标元素上的属性值
StrokePaint stroke滤镜效果的目标元素上的属性值
<filter-primitive-reference> This value is an assigned name for the filter primitive in the form of a <custom-ident>
如果提供，则可以通过同一过滤器元素内后续过滤器基元上的in属性来引用处理此过滤器基元所得到的图形
如果未提供任何值，则该输出仅可用于下一个过滤器原语的隐式输入（如果该过滤器原语不为其in属性提供值）
BackgroundImage的解决方法
除了使用in="BackgroundImage"，我们还需要使用导入其中一张图像以将其融合到滤镜本身中  <feImage> element
<svg style="width:200px; height:200px; display: inline;" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <defs>
    <filter id="imageMultiply">
      <!-- This is a workaround. -->
      <feImage xlink:href="https://developer.mozilla.org/files/6457/mdn_logo_only_color.png" x="10%" y="10%" width="80%" height="80%"/>
      <feBlend in2="SourceGraphic" mode="multiply"/>（in中自动继承了feImage的result)
    </filter>
  </defs>
  <circle cx="50%" cy="40%" r="40%" fill="#c00" style="filter:url(#imageMultiply);"/>
</svg>

<feBlend>
mode：定义了<feBlend>过滤器原语上的混合模式
normal无论底色是什么，最终颜色都是顶色。效果就像两张不透明的纸叠在一起
multiply最终颜色是顶部和底部颜色相乘的结果。黑色层导致黑色最终层，而白色层则没有变化。效果就像透明胶片上印刷的两个图像重叠一样
screen最终的颜色是反转颜色，将它们相乘并反转该值的结果。黑色层不会导致变化，而白色层则会导致白色最终层。效果就像两个图像照在投影屏幕上一样
overlay最终颜色是multiply底色较深或screen底色较浅的结果。此混合模式等效于hard-light但交换了层
darken最终颜色由每个颜色通道的最暗值组成
lighten最终颜色由每个颜色通道的最亮值组成
color-dodge最终颜色是将底色除以顶色的倒数的结果。黑色前景不会改变。具有背景相反颜色的前景会导致完全照亮颜色。
此混合模式类似于screen，但是前景仅需要与背景相反的亮度即可创建完全照亮的颜色
color-burn最终颜色是将底色反转，将值除以顶色并反转该值的结果。白色前景不变。具有背景相反颜色的前景导致黑色最终图像。
此混合模式类似于multiply，但是前景只需要与背景相反，就可以使最终图像变黑
hard-light最终颜色是multiply顶部颜色较深或screen顶部颜色较浅的结果。此混合模式等效于overlay但交换了层。效果类似于在背景上照亮刺眼的聚光灯
soft-light最终颜色类似于hard-light，但更柔和。此混合模式的行为类似于hard-light。效果类似于在背景上照亮散射的聚光灯
difference最终颜色是从较浅的一种颜色中减去两种颜色中的较深颜色的结果。黑色层没有效果，而白色层会反转另一层的颜色
exclusion最终颜色类似于difference,但对比度较低。与一样difference，黑色层无效，而白色层则反转另一层的颜色
hue最终颜色具有顶部颜色的色相，同时使用底部颜色的饱和度和光度
saturation最终颜色具有顶部颜色的饱和度，同时使用底部颜色的色相和亮度。纯灰色背景（不饱和）将不起作用
color最终颜色具有顶部颜色的色相和饱和度，同时使用底部颜色的光度。 该效果保留灰度级，可用于使前景着色
luminosity最终颜色具有顶部颜色的亮度，同时使用底部颜色的色相和饱和度。此混合模式等效于color，但是交换了图层

<feComponentTransfer>
针对每个像素数据的过滤器进行原始颜色分量级重新映射。它允许进行诸如亮度调节，对比度调节，色彩平衡或阈值设置之类的操作
计算是对未预乘的颜色值进行的,颜色是由每个通道（R，G，B和A）改变到什么样的结果，由<feFuncR>，<feFuncB>，<feFuncG>，和<feFuncA>返回

<feComposite>
使用Porter-Duff合成操作之一在图像空间中以像素方式执行两个输入图像的组合
operator属性对于<feComposite>元素，它定义要执行的合成操作，over | in | out | atop | xor | arithmetic
over此值指示in属性中定义的源图形放置在in2属性中定义的目标图形上方
in此值表示in属性中定义的源图形中与属性中定义的目标图形重叠的部分in2替换了目标图形
out此值指示显示in属性中定义的源图形中属于属性中定义的目标图形之外的in2部分
atop此值表示in属性中定义的源图形的部分与属性中定义的目标图形重叠的部分in2替换了目标图形。目标图形中与源图形不重叠的部分保持不变
xor此值指示in属性中定义的源图形和in2属性中定义的目标图形的非重叠区域已合并
lighter此值指示显示in属性中定义的源图形和属性中定义的目标图形之和in2
arithmetic
arithmetic运算对于将<feDiffuseLighting>和<feSpecularLighting>过滤器的输出与纹理数据组合起来非常有用
如果选择arithmetic运算，则使用以下公式计算每个结果像素：
result = k1*i1*i2 + k2*i1 + k3*i2 + k4
i1和i2表示输入图像的相应像素通道值，分别映射到in和in2
k1, k2, k3和k4表示具有相同名称的属性的值(默认值为0)

<feConvolveMatrix>
应用矩阵卷积滤波器效果。 卷积将输入图像中的像素与相邻像素组合以产生结果图像。 通过卷积可以实现各种各样的成像操作，包括模糊，边缘检测，锐化，压花和斜角
order属性指示<feConvolveMatrix>元素要使用的矩阵的大小
第一个数字<orderX>表示矩阵中的列数。 第二个数字<orderY>表示矩阵中的行数。 如果未提供<orderY> ，则默认为<orderX>
kernelMatrix属性定义构成<feConvolveMatrix>元素的内核矩阵
divisor属性输入图像以生成数字后，将该数字除以赋予divisor属性的值，以生成最终目标颜色值
divisor是所有矩阵值的总和，往往会对结果的整体颜色强度产生影响
默认值是kernelMatrix中所有值的总和，但如果总和为零，则除数设置为1,指定零除数是错误的
bias属性改变了滤波器的范围,输入图像以生成数字并应用divisor属性后，将bias属性添加到每个组件（改变起始值）。这样可以表示原本可以固定为0或1的值
偏置的一种应用是在希望使0.5灰度值为滤波器的零响应时
targetX属性确定卷积矩阵相对于输入图像中的给定目标像素在X中的定位。 矩阵的最左列是列号零
默认情况下，卷积矩阵在输入图像的每个像素上以X为中心（即targetX = floor ( orderX / 2 ))
edgeMode属性确定如何根据需要使用颜色值扩展输入图像，以便在内核位于输入图像边缘或附近时应用矩阵操作
duplicate它表示通过复制输入图像的给定边缘处的颜色值，根据需要沿其每个边界扩展输入图像（默认值）
wrap它表示通过从图像的相对边缘获取颜色值来扩展输入图像
none它表示输入图像扩展为R，G，B和A的像素值为零
kernelUnitLength属性指示连续列和行之间的当前过滤器单元中的预期距离（由属性primitiveUnits的值确定的单位）
第一个数字是<dx>值。 第二个数字是<dy>值。 如果未指定<dy>值，则默认为与<dx>相同的值
preserveAlpha属性指示<feConvolveMatrix>元素如何处理alpha透明度
值false表示卷积矩阵将应用于所有通道，包括alpha通道，这是默认值
值true表示卷积矩阵仅适用于颜色通道

<feDiffuseLighting> 
滤镜光照一个图像，使用alpha通道作为隆起映射。结果图像，是一个RGBA不透明图像，取决于光的颜色、光的位置以及输入隆起映射的表面几何形状
surfaceScale属性表示滤镜基元的曲面高度。 如果未指定该属性，则效果就好像指定了值1
diffuseConstant属性表示Phong照明模型中的k d值。在SVG中，这可以是任何非负数。它用于确定给定像素的最终RGB值。照明颜色越亮，该数字应该越小 
kernelUnitLength属性表示在曲面法线计算公式中分别用于dx和dy的当前滤镜单元中的预期距离

<feDisplacementMap> 
使用来自in2的图像中的像素值来从中空间移位图像
P'(x,y) ← P( x + scale * (XC(x,y) - 0.5), y + scale * (YC(x,y) - 0.5))
P'(x,y)指的是转换之后的x, y坐标。
· x + scale * (XC(x,y) - 0.5), y + scale * (YC(x,y) - 0.5)指的是具体的转换规则。
· XC(x,y)表示当前x,y坐标像素点其X轴方向上设置的对应通道的计算值，范围是0~1。
· YC(x,y)表示当前x,y坐标像素点其Y轴方向上设置的对应通道的计算值，范围是0~1。
· -0.5是偏移值，因此XC(x,y) - 0.5范围是-0.5~0.5，YC(x,y) - 0.5范围也是-0.5~0.5。
· scale表示计算后的偏移值相乘的比例，scale越大，则偏移越大
xChannelSelector对应XC(x,y)，表示X轴坐标使用的是哪个颜色通道进行位置偏移。我们应该都知道，颜色有RGBA四个通道，R表示red红色，G表示green绿色，
B表示blue蓝色，A表示alpha可以理解为透明度。因此，xChannelSelector属性值可以是R、G、B、A中的任意一个，默认是A，基于透明度进行位置偏移
偏移为正，是反向的位移：原来的0,0坐标变成了40,0坐标，于是，原始图片所有点都往左移动了40像素
color-interpolation-filters表示滤镜对颜色进行计算时候采用的颜色模式类型。分为linearRGB（默认值）和sRGB
in表示输入的原始图形，in2表示用来映射的图形
图片不移动: <feImage>颜色是50度灰的时候，RGB表示为rgb(127,127,127)，16进制色值为#7f7f7f
因此，在feDisplacementMap世界里，五十度灰可以等同于“纹丝不动”的意思

<feDistantLight>
定义了一个可在照明滤镜基元中使用的远光源： <feDiffuseLighting>或<feSpecularLighting>
azimuth属性表示XY平面上光源的方向角（顺时针），以度为单位，以x轴为单位。如果未指定该属性，则效果就像指定了值0一样
elevation属性表示光源从XY平面朝向z轴的方向角度，以度为单位。 注意，正Z轴指向内容的观看者。如果未指定该属性，则效果就像指定了值0一样

<fePointLight>允许创建点光源效果

<feSpotLight>
允许创建聚光灯效果
pointsAtX属性表示由光源指向的点的<filter>元素上的属性primitiveUnits建立的坐标系中的X位置
specularExponent属性控制光源的焦点，值越大表示光线越“亮”
limitingConeAngle属性表示点光轴（即光源与其指向的点之间的轴）与点光锥之间的角度（以度为单位）
因此，它定义了一个限制锥，它限制了光投射的区域。 锥体外没有光投射。如果未指定任何值，则不会应用限制锥

<feDropShadow>
创建输入图像的阴影。 它是速记过滤器，并根据其他过滤器基元的组合进行定义
stdDeviation属性定义模糊操作的标准偏差。 如果提供两个<number> ，则第一个数字表示沿x轴的标准偏差值。
第二个值表示沿y轴的标准偏差。 如果提供了一个数字，则该值用于X和Y
dx,dy


<feMerge>
同时应用滤镜效果而不是顺序应用滤镜效果。 这是通过其他过滤器通过result属性存储其输出，然后在<feMergeNode>子项中访问它来实现的
 <feMerge>
      <feMergeNode in="blur2" />
      <feMergeNode in="SourceGraphic" />
</feMerge>

<feFlood> 
使用flood-color和flood-opacity透明度定义的颜色和不透明度填充滤镜子区域
<feFlood x="50" y="50" width="100" height="100"
          flood-color="green" flood-opacity="0.5"/>
<use style="filter: url(#floodFilter);"/>（对<g>和滤镜来说，用use标签可以直接调用）

<feImage>
从外部源获取图像数据并提供像素数据作为输出（意味着如果外部源是SVG图像，则进行栅格化。）
viewport<svg width="500" height="300"></svg>
viewbox: viewBox="x, y, width, height" 
SVG就像是我们的显示器屏幕，viewBox就是截屏工具选中的那个框框，最终的呈现就是把框框中的截屏内容再次在显示器中全屏显示！
preserveAspectRatio属性指示具有提供给定纵横比的viewBox的元素如何必须适合具有不同纵横比的视口
由于SVG图像的长宽比由viewBox属性定义，因此，如果未设置此属性，则该属性preserveAspectRatio无效
它的值由一个或两个关键字组成：必需的对齐值和一个可选的“ meet or slice”引用
第1个值表示，viewBox如何与SVG viewport对齐；第2个值表示，如何维持高宽比（如果有）
其中，第1个值又是由两部分组成的。前半部分表示x方向对齐，后半部分表示y方向对齐。家族成员如下：
xMin	viewBox和viewport左边对齐
xMid	viewBox和viewportx轴中心对齐
xMax	viewBox和viewport右边对齐
YMin	viewBox和viewport上边缘对齐。注意Y是大写
YMid	viewBox和viewporty轴中心点对齐。注意Y是大写
YMax	viewBox和viewport下边缘对齐。注意Y是大写
preserveAspectRatio属性第2部分的值支持下面3个：（viewbox中的内容占的比例不变）
meet	保持纵横比缩放viewBox适应viewport（拉对角）（塞得进）
slice	保持纵横比同时比例小的方向放大填满viewport（拉对角）（塞得满）
none	扭曲纵横比以充分适应viewport（看情况）（塞得满）

<feMorphology>
用来腐蚀或扩张输入图像。它的作用尤其在于增脂或稀疏效果
operator属性定义是否侵蚀(稀疏）或扩张（变胖）源图形 erode（侵蚀） | dilate（扩大）
radius属性表示在给定的<feMorphology>滤波器基元上进行操作的半径（或半径）
如果提供两个数字，则第一个数字表示x半径，第二个数字表示y半径，如果提供一个数字，则该值将同时用于x和y。
这些值位于元素primitiveUnits上的属性所建立的坐标系中，负值或零将禁用给定滤镜基元的效果（即结果是滤镜输入图像）

<feOffset> 
允许偏移输入图像。 输入图像整体上由dx和dy属性中指定的值偏移

<feSpecularLighting> 
使用Alpha通道作为凹凸贴图点亮源图形。 得到的图像是基于光色的RGBA图像
surfaceScale属性表示滤镜基元的曲面高度。 如果未指定该属性，则效果就好像指定了值1
specularConstant属性表示Phong照明模型中的ks值。 在SVG中，这可以是任何非负数。如果未指定该属性，则效果就好像指定了值1
specularExponent属性控制光源的焦点，值越大表示光线越“亮”。对于<feSpecularLighting>该值应在1.0到128.0的范围内,如果未指定该属性，则指定值1
kernelUnitLength对于照明滤镜图元，它表示在曲面法线计算公式中分别用于dx和dy的当前滤镜单元中的预期距离（即，由属性primitiveUnits的值确定的单位)

<feTile>允许使用输入图像的重复平铺图案填充目标矩形

<feTurbulence>
使用Perlin湍流函数创建图像。 它允许合成人造纹理，如云或大理石。 生成的图像将填充整个过滤器基元子区域
baseFrequency属性表示<feTurbulence>原语的噪声函数的基本频率参数。 
如果提供两个<number> s <number> ，则第一个数字表示X方向上的基频，第二个值表示Y方向上的基频。如果提供了一个数字，则该值用于X和Y.禁止使用负值
numOctaves属性：噪声函数的numOctaves参数
seed属性表示<feTurbulence>原语的伪随机数生成器的起始编号
stitchTiles属性定义Perlin切片在边框处的行为方式
如果stitchTiles="noStitch" ，则不会尝试在包含湍流函数的图块边界处实现平滑过渡。 有时，结果将在图块边框处显示明显的不连续性。
如果stitchTiles="stitch" ，那么浏览器将自动调整baseFrequency-x和baseFrequency-y值，使得<feTurbulence>节点的宽度和高度（即当前子区域的宽度和高度）
包含Perlin的整数第一个八度音阶的平铺宽度和高度
type属性指示滤波器基元是否应执行噪声或湍流功能fractalNoise | turbulence

<animate>
begin,end,min,max,dur: 一次动画的时间属性
restart：指定动画是否可以重新启动(默认always)
always 此值指示可以随时重新启动动画
whenNotActive 该值指示动画只能在不活动时（即，在活动结束之后）重新启动。在动画激活期间尝试重新启动动画的尝试将被忽略
never 此值指示在加载文档时无法重新启动动画
repeatCount: 指示动画将发生的次数(大于0的值或者indefinite)
repeatDur: 指定重复动画的总持续时间(大于0的值或者indefinite)
fill：定义动画的最终状态 freeze（保留最后一个动画帧的状态）| remove（保持第一个动画帧的状态）(默认remove)
calcMode: 指定动画的插值模式,默认模式为linear，但是如果属性不支持线性插值（例如，对于字符串），则将calcMode忽略该属性，并使用离散插值
路径动画calcMode默认值是paced，也就是说并不是所有动画calcMode默认属性值是linear
linear
<animate xlink:href="#ant"
      attributeName="x"
      calcMode="linear"
      values="10;30;150"
      dur="4s"
      begin="click"/>
动画通过values属性划分为两个阶段，在x轴方位（10至30）与（30至150）
这两个阶段动画持续时间相同，也就是都是2秒
动画在这两个阶段都是允许进行
discrete
<animate xlink:href="#ant"
      attributeName="x"
      calcMode="discrete"
      values="10;30;150"
      dur="4s"
      begin="click"/>
点击蓝色矩形可以开始动画效果，整个动画持续时间为4秒，但是没有动画效果，都是瞬间完成
动画通过values属性划分为两个阶段，在x轴方位（10至30）与（30至150）
这两个阶段动画持续时间相同，也就是都是2秒
点击按钮之后，需要等待2秒，然后瞬时完成第一阶段，再等待两秒，再瞬时完成第二阶段
paced
<animate xlink:href="#ant"
      attributeName="x"
      calcMode="paced"
      values="10;30;150"
      dur="4s"
      begin="click"/>
将属性值设置为"paced"之后，动画效果比较耿直，动画阶段无论如何划分，都是匀速执行
比如上述代码，动画划分为两个阶段，点击按钮后，动画会从头到尾保持相同速度完成
keyTimes：为动画各个阶段指定动画持续时间
 <animate xlink:href="#ant"
      attributeName="x"
      calcMode="linear"
      values="10;30;40;60;80;140;160"
      keyTimes="0;0.15;0.3;0.45;0.6;0.75;1"
      dur="10s"
      begin="click"/>
通过values属性为整个动画划分阶段
keyTimes可以为values规定的动画阶段规定对应的执行时间
将整个动画持续过程看做1，keyTimes值对0-1这个这个时间段进行划分区间与value规定的值对应起来（每个value对应一个时间）
keySplines：定义了一个与keyTimes列表相关的一组Bézier控制点，定义了一个控制间隔速率的三次Bézier函数，每一段内不同点速度不同（依据曲线）
calcMode属性值为"spline"的时候，keySplines属性才会生效
 <animate xlink:href="#ant"
      attributeName="x"
      calcMode="spline"
      values="10;60;140;160"
      keyTimes="0;0.3;0.8;1"
      keySplines="0.42 0 1 1;
        0 0 0.59 1;
        0.42 0 1 1;"
      dur="10s"
      begin="click"/>
keySplines属性值是一组三次贝塞尔控制点（默认0 0 1 1）（keySplines值是控制点）
每个控制点使用4个浮点值表示：x1 y1 x2 y2，值范围0~1
from：指示将在动画期间修改的属性的初始值（通过values属性定义值列表时，将忽略from，to，by）
与to属性一起使用时，动画会将修改后的属性从from值更改为to值。与该by属性一起使用时，动画会将其属性从from值相对更改为by(加上或减掉by变成最后的结果）
<svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
  <rect x="10" y="10" height="100">
    <animate attributeName="width" fill="freeze" from="100" to="150" dur="3s"/>
  </rect>
</svg>
to：指示将在动画期间修改的属性的最终值
by：将在动画期间修改的属性指定相对偏移值
<svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
  <rect x="10" y="10" width="100" height="100">
    <animate attributeName="width" fill="freeze" by="50" dur="3s"/>
  </rect>
</svg>
attributeName: 指示将在动画过程中更改的CSS属性的名称或目标元素的属性
additive: 控制动画是否可叠加（replace | sum 默认值	replace）（将动画定义为属性值的偏移量或增量而不是绝对值的时候通常很有用）
sum指定动画将添加到属性和其他较低优先级动画的基础值
<animate xlink:href="#ant"
           attributeName="x"
           from="0"
           to="100"
           dur="5s"
           begin="0s" />
  <animate xlink:href="#ant"
           attributeName="x"
           from="0"
           to="100"
           dur="5s"
           begin="0s" />
  第二个会覆盖第一个的效果,也就是优先级低覆盖优先级高,结果是0到100用了5s,速度20/s
  <animate xlink:href="#ant"
           attributeName="x"
           from="0"
           to="100"
           dur="5s"
           begin="0s" />
  <animate xlink:href="#ant"
           additive="sum"
           attributeName="x"
           from="0"
           to="100"
           dur="5s"
           begin="0s" />
为第二个动画元素添加additive="sum"（意味着允许前面的动画叠加），动画速度加快了一倍
这就是优先级高的动画效果会附加到优先级低的动画效果,结果是0到200用了5s，速度40/s

accumulate：规定是否将当前动画结束的状态作为下一次动画的起始状态
none默认值，表示从起始状态进行下一次动画
sum表示从当前动画结束的状态为起始点进行下一次动画
如果目标属性值不支持加法，或者动画元素不重复，则忽略此属性
如果仅使用该to属性指定了动画功能，则将忽略该属性
<animate attributeType="XML"
             attributeName="x"
             from="10" to="50"
             dur="1s"
             accumulate="sum"
             repeatCount="3"
             begin="click"
             fill="freeze">
</animate>
 默认状态下，重复的动画都是从最初的起始状态重新再执行一次；如果将accumulate属性值设置为"num"，那么下一次动画的指定都是在上一次动画结束状态基础上进行的
 
 <set>
 提供了一种简单的方法，可以仅在指定的持续时间内设置属性的值
 <set>元素是无添加剂。将additive和accumulate属性是不允许的，如果指定将被忽略
 to: 定义在动画持续时间内要应用于目标属性的值
 <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
  <style>
    rect { cursor: pointer }
    .round { rx: 5px; fill: green; }
  </style>

  <rect id="me" width="10" height="10">
    <set attributeName="class" to="round" begin="me.click" dur="2s" />
  </rect>
</svg>

“nonzero规则”顾名思意就是“非零规则”，用通俗的话讲，就算计算某些东西是不是0，如果不是0则内部，填充；如果是0则外部，不填充
“evenodd规则”顾名思意就是“奇偶规则”，用通俗的话讲，就算计算某些东西是不是奇数，如果是奇数则内部，填充；如果是偶数则外部，不填充
nonzero是计算顺时针逆时针数量，evenodd是交叉路径数量
对于nonzero规则：起始值为0，射线会和路径相交，如果路径方向和射线方向形成的是顺时针方向则+1，如果是逆时针方向则-1，最后如果数值为0，则是路径的外部；
如果不是0，则是路径的内部，因此被称为“非0规则”（与射线相交的路径才看方向，才做计算累加，从路径开始，沿着走到射线尾，然后继续走绕个圆，判断是顺还是逆）
对于evenodd规则：起始值为0，射线会和路径相交，每交叉一条路径，我们计数就+1，最后看我们的总计算数值，如果是奇数，则认为是路径内部，
如果是偶数，则认为是路径外部
