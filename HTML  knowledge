有tittle就有下划线，title(图片提示符）
dfn 定义项目 定义缩写 斜体
addr 缩写 首字母缩略语
cite 著作的标题 斜体
bdo 文本方向 dir="rtl"
kbd 键盘输入
samp 计算机输出
code 代码 不保留多余的空格和折行
pre 预格式化文本(保留的意思)
var 定义数学变量(公式) 斜体
sup 上标，当前文本流中字符高度的一半来显示，但是与当前文本流中文字的字体和字号都是一样的
sub 下标
<!--> 中间可以有标签 
条件注释<!--[if IE 8]>....<![endif]-->只有IE执行的HTML标签(执行里面的内容...)
软件程序标签注释
<b>加粗标签
<abbr>	定义缩写
<acronym>	定义只取首字母的缩写
<big> 标签呈现大号字体效果，其字体比周围的文字要大一号，但是，如果文字已经是最大号字体，这个 <big> 标签将不起任何作用（<small>等同)
<tt>	呈现类似打字机或者等宽的文本效果
<bdi> 标签允许您设置一段文本，使其脱离其父元素的文本方向设置,属性同<bdo>
<dfn> 标签可标记那些对特殊术语或短语的定义
<mark> 标签定义带有记号的文本。请在需要突出显示文本时使用 <m> 标签(对应文本有所记号，本例中变黄）
<pre> 标签:标题、<p> 和 <address> 标签）绝不能包含在 <pre> 所定义的块里,width属性定义每行的最大字符数（通常是 40、80 或 132）
<strong> 标签（加粗）和 <em> 标签（斜体）一样，用于强调文本，但它强调的程度更强一些

<progress> 标签标示任务的进度（进程），<progress> 标签与 JavaScript 一同使用，来显示任务的进度
max 属性规定完成任务一共需要多少工作
value 属性规定任务已完成多少
<progress> 标签不适合用来表示度量衡（例如，磁盘空间使用情况或查询结果）。如需表示度量衡，请使用 <meter> 标签代替

<summary> 标签包含 details 元素的标题，"details" 元素用于描述有关文档或文档片段的详细信息
请与 <details> 标签一起使用，标题是可见的（detail内容是不可见的），当用户点击标题时会显示出详细信息
"summary" 元素应该是 "details" 元素的第一个子元素
<details>
<summary>HTML 5</summary>
This document teaches you everything you have to learn about HTML 5.
</details>

<menu> 标签定义命令的列表或菜单
<menu> 标签用于上下文菜单、工具栏以及用于列出表单控件和命令
label属性规定菜单的可见标签
type属性规定要显示哪种菜单类型
list	默认，规定列表菜单。一个用户可执行或激活的命令列表（li 元素）
context	规定上下文菜单。该菜单必须在用户能够与命令进行交互之前被激活
toolbar	规定工具栏菜单。活动式命令，允许用户立即与命令进行交互

<menuitem> 标签定义用户可以从弹出菜单调用的命令/菜单项目
label必需。规定命令/菜单项的名称，以向用户显示
icon规定命令/菜单项的图标
checked规定在页面加载后选中命令/菜单项目。仅适用于 type="radio" 或 type="checkbox"
open定义 details 是否可见
radiogroup规定命令组的名称，命令组会在命令/菜单项本身被切换时进行切换。仅适用于 type="radio"
type属性checkbox command radio 规定命令/菜单项的类型。默认是 "command"
<div style="background:yellow;border:1px solid #cccccc;padding: 10px;" contextmenu="mymenu">
<p>请在框中右键点击，就可以看到快捷菜单！</p>
<menu type="context" id="mymenu">
  <menuitem label="Refresh" onclick="window.location.reload();" icon="ico_reload.png">
  </menuitem>
  <menu label="Share on...">
    <menuitem label="Twitter" icon="ico_twitter.png"
    onclick="window.open('//twitter.com/intent/tweet?text='+window.location.href);">
    </menuitem>
    <menuitem label="Facebook" icon="ico_facebook.png"
    onclick="window.open('//facebook.com/sharer/sharer.php?u='+window.location.href);">
    </menuitem>
  </menu>
  <menuitem label="Email This Page"
  onclick="window.location='mailto:?body='+window.location.href;"></menuitem>
</menu>

<meter> 标签定义已知范围或分数值内的标量测量。也被称为 gauge（尺度）
例子：磁盘用量、查询结果的相关性，等等
注释：<meter> 标签不应用于指示进度（在进度条中）。如果标记进度条，请使用 <progress> 标签（会有一条进度条出来，显示结果）
high 属性规定的范围是被视为高值的度量值
max 属性规定度量的上限
optimum 属性规定的范围是被视为最佳值的度量值
value必需。规定度量的当前值

<dialog> 标签定义对话框或窗口
open 属性规定在 HTML 页面上 details 应该是可见的

<figure> 标签规定独立的流内容（图像、图表、照片、代码等等）
figure 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响
"figcaption" 元素应该被置于 "figure" 元素的第一个或最后一个子元素的位置

<keygen> 标签规定用于表单的密钥对生成器字段
当提交表单时，私钥存储在本地，公钥发送到服务器
form 属性规定 keygen 字段所属的一个或多个表单,form 属性的值必须是其所属的表单的 id,如需引用一个以上的表单，请使用空格分隔的列表
keytype 属性规定应该使用哪种密钥生成算法
name 属性规定 keygen 元素的名称,keygen 元素的 name 属性用于在表单数据已被提交后对数据进行引用
command 元素表示用户能够调用的命令
<command> 标签可以定义命令按钮，比如单选按钮、复选框或按钮
只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键

<colgroup> 标签用于对表格中的列进行组合，以便对其进行格式化
如需对全部列应用样式，<colgroup> 标签很有用，这样就不需要对各个单元和各行重复应用样式了
<colgroup> 标签只能在 table 元素中使用
span规定列组应该横跨的列数
<col> 标签为表格中一个或多个列定义属性值
如果没有 col 元素，列会从 colgroup 那里继承所有的属性值
<table width="100%" border="1">
  <colgroup span="2" align="left"></colgroup>
  <colgroup align="right" style="color:#0000FF;"></colgroup>
  <tr>
    <th>ISBN</th>
    <th>Title</th>
    <th>Price</th>
  </tr>
  <tr>
    <td>3476896</td>
    <td>My first HTML</td>
    <td>$53</td>
  </tr>
</table>
<table width="100%" border="1">
  <col align="left" />
  <col align="left" />
  <col align="right" />
  <tr>
    <th>ISBN</th>
    <th>Title</th>
    <th>Price</th>
  </tr>
  <tr>
    <td>3476896</td>
    <td>My first HTML</td>
    <td>$53</td>
  </tr>
</table>

<a href="(链接)#tips"> 锚 
找不到name就为顶端
链接最后加上斜杠，不然会产生两次访问服务器，第一次加斜杠，第二次访问
链接到邮件时，邮件内容%20制造空格
<a href="tel:111">可以拨通电话
<a href="mailto:">发邮件
<a href="javascript:while(1){alert("hh");}">(协议限定符）

< img src/>没有结束标签 对齐 align="bottom"默认
left right 为浮动到文本的左右边 源代码中代码顺序不管
img与map配合使用，map中使用area可制作点击图片特定区域进行操作的功能

<img> 标签的 ismap 和 usemap 属性告诉浏览器这个图像是一个特殊的可视映射，可以通过鼠标来对一个或多个超链接进行选择，也就是通常所说的图像映射
ismap:
图像映射的 ismap 样式被称为 “服务器端”图像映射，它只可以用在 <a> 标签标识的超链接里面
当用户在 ismap 图像上单击了某处时，浏览器会自动把鼠标的 x、y 位置（相对于图像的左上角）发送到服务器端
特殊的服务器端软件（在本例中是 /example/map 程序）可以根据这些坐标来做出响应
usemap:
usemap 属性提供了一种“客户端”的图像映射机制，有效地消除了服务器端对鼠标坐标的处理，以及由此带来的网络延迟问题
通过特殊的 <map> 和 <area> 标签，HTML 创作者可以提供一个描述 usemap 图像中超链接敏感区域坐标的映射，这个映射同时包含相应的超链接 URL
usemap 属性的值是一个 URL，它指向特殊的 <map> 区域,用户计算机上的浏览器将把鼠标在图像上单击时的坐标转换成特定的行为，包括加载和显示另外一个文档

<img> 中的 usemap 属性可引用 <map> 中的 id 或 name 属性（由浏览器决定），所以我们需要同时向 <map> 添加 id 和 name 两个属性

<area>中的coords:
x1,y1,x2,y2	如果 shape 属性设置为 "rect"，则该值规定矩形左上角和右下角的坐标。
x,y,radius	如果 shape 属性设置为 "circ"，则该值规定圆心的坐标和半径。
x1,y1,x2,y2,..,xn,yn	如果 shape 属性设置为 "poly"，则该值规定多边形各边的坐标。如果第一个坐标和最后一个坐标不一致，
那么为了关闭多边形，浏览器必须添加最后一对坐标
多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域

nohref从图像映射排除某个区域
<area shape="circle" coords="180,139,14" nohref="nohref" alt="Venus" />

<rp> 标签在 ruby 注释中使用，以定义不支持 ruby 元素的浏览器所显示的内容
<rt> 标签定义字符（中文注音或字符）的解释或发音
<ruby> 标签定义 ruby 注释（中文注音或字符），在东亚使用，显示的是东亚字符的发音
<ruby>
 漢 <rt> ㄏㄢˋ </rt>      结果：ㄏㄢˋ
</ruby>                         漢 

单元格边距(Cell padding)
单元格间距(Cell spacing)
框架(frame)属性："frame" 属性来控制围绕表格的边框
<table frame="box">
<ol type="a">
<ol start="50">

什么是响应式 Web 设计？
RWD 指的是响应式 Web 设计（Responsive Web Design）
RWD 能够以可变尺寸传递网页
RWD 对于平板和移动设备是必需的
使用 Bootstrap
另一个创建响应式设计的方法，是使用现成的 CSS 框架
Bootstrap 是最流行的开发响应式 web 的 HTML, CSS, 和 JS 框架
Bootstrap 帮助您开发在任何尺寸都外观出众的站点：显示器、笔记本电脑、平板电脑或手机

<meta name="viewport" content="width=device-width, initial-scale=1">
width是设备的width
initial-scale=1是加载文档的时候不进行所缩放，按原大小加载绘制出来
maximum-scale和minimum-scale设置最大和最小缩放比例
user-scalable=no 不允许用户进行缩放

<frameset cols="25%,75%">
   <frame src="frame_a.htm">
   <frame src="frame_b.htm">
</frameset>
不能与 <frameset></frameset> 标签一起使用 <body></body> 标签。不过，如果您需要为不支持框架的浏览器添加一个 <noframes> 标签，
请务必将此标签放置在 <body></body> 标签中！
一个框架有可见边框，用户可以拖动边框来改变它的大小。为了避免这种情况发生，可以在 <frame> 标签中加入：noresize="noresize"
为不支持框架的浏览器添加 <noframes> 标签
<iframe src="demo_iframe.htm" frameborder="0"></iframe>
<iframe src="demo_iframe.htm" name="iframe_a"></iframe>
<p><a href="http://www.w3school.com.cn" target="iframe_a">W3School.com.cn</a></p>

<img src="picture.jpg">	picture.jpg 位于与当前网页相同的文件夹
<img src="images/picture.jpg">	picture.jpg 位于当前文件夹的 images 文件夹中
<img src="/images/picture.jpg">	picture.jpg 当前站点根目录的 images 文件夹中
<img src="../picture.jpg">	picture.jpg 位于当前文件夹的上一级文件夹中

<title> 标签定义文档的标题
title 元素在所有 HTML/XHTML 文档中都是必需的
title 元素能够：
定义浏览器工具栏中的标题
提供页面被添加到收藏夹时显示的标题
显示在搜索引擎结果中的页面标题

<base> 标签为页面上的所有链接规定默认地址（href)或默认目标（target）
<meta> 标签提供关于 HTML 文档的元数据
       name 和 content 属性的作用是描述页面的内容
       
<link>charset 属性规定被链接文档的字符编码方式
      media 属性规定被链接文档将显示在什么设备上
      media 属性用于为不同的媒介类型规定不同的样式
      rel 属性规定当前文档与被链接文档之间的关系(stylesheet文档的外部样式表)
      rev 属性规定被链接文档与当前文档之间的关系
      sizes 属性规定被链接资源的尺寸
            只有当被链接资源是图标时 (rel="icon")，才能使用该属性
            该属性可接受多个值,值由空格分隔
            heightxwidth为被链接的图标规定一个或多个以像素计的高度/宽度值对,高度与宽度之间由 "x" 或 "X" 分隔
            any规定图标是可伸缩的（比如 SVG 图像）
            target _blank在新窗口中打开被链接文档
                   _self	默认。在相同的框架中打开被链接文档
                   _parent	在父框架集中打开被链接文档
                   _top	在整个窗口中打开被链接文档
                   framename	在指定的框架中打开被链接文档
            type 属性规定被链接文档的 MIME 类型
 <meta>name（定义content里的每一个内容的作用）属性提供了名称/值对中的名称
       "keywords" 是一个经常被用到的名称，它为文档定义了一组关键字。某些搜索引擎在遇到这些关键字时，会用这些关键字对文档进行分类
       类似这样的 meta 标签可能对于进入搜索引擎的索引有帮助：
       <meta name="keywords" content="HTML,ASP,PHP,SQL">
       
       http-equiv（发送）属性为名称/值对提供了名称。并指示服务器在发送实际的文档之前先在要传送给浏览器的 MIME 文档头部包含名称/值对
       当服务器向浏览器发送文档时，会先发送许多名称/值对。虽然有些服务器会发送许多这种名称/值对，
       但是所有服务器都至少要发送一个：content-type:text/html。这将告诉浏览器准备接受一个 HTML 文档。
       使用带有 http-equiv 属性的 <meta> 标签时，服务器将把名称/值对添加到发送给浏览器的内容头部。例如，添加：
       <meta http-equiv="charset" content="iso-8859-1">
       <meta http-equiv="expires" content="31 Dec 2008">
       这样发送到浏览器的头部就应该包含：
       content-type: text/html
       charset:iso-8859-1
       expires:31 Dec 2008
       
       content 属性始终要和 name 属性或 http-equiv 属性一起使用
       scheme 属性用于指定要用来翻译属性值的方案。此方案应该在由 <head> 标签的 profile 属性指定的概况文件中进行了定义
       <meta http-equiv="Refresh" content="5;url=http://www.w3school.com.cn" />重定向
       
<section> 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分
cite属性section 的 URL，假如 section 摘自 web 的话

<select> 
disabled 属性规定禁用下拉列表。被禁用的下拉列表既不可用，也不可点击
multiple 属性规定可选择多个选项
required 属性规定文本区域是必填的
size 属性规定下拉列表中可见选项的数目，如果 size 属性的值大于 1，但是小于列表中选项的总数目，浏览器会显示出滚动条，表示可以查看更多选项（默认为1）

<script>
HTML 4 和 XHTML 在处理脚本中的内容方面有所不同：
在 HTML 4 中，内容类型声明为 CDATA，就是说不会对实体进行解析。
在 XHTML 中，内容类型声明为 (#PCDATA)，也就是说会对实体进行解析。
这意味着，在 XHTML 中，应该编码所有特殊的字符，或者把所有内容嵌套在 CDATA 部分中。
为了确保在 XHTML 文档中脚本正确进行解析，请使用如下语法：
<script type="text/javascript"><![CDATA[
  document.write("Hello World!")
//]]></script>
async 属性规定一旦脚本可用，则会异步执行。
注释：async 属性仅适用于外部脚本（只有在使用 src 属性时）。
注释：有多种执行外部脚本的方法：
如果 async="async"：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）
如果不使用 async 且 defer="defer"：脚本将在页面完成解析时执行
如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本

defer 属性规定是否对脚本执行进行延迟，直到页面加载为止
有的 javascript 脚本 document.write 方法来创建当前的文档内容，其他脚本就不一定是了
如果您的脚本不会改变文档的内容，可将 defer 属性加入到 <script> 标签中，以便加快处理文档的速度。
因为浏览器知道它将能够安全地读取文档的剩余部分而不用执行脚本，它将推迟对脚本的解释，直到文档已经显示给用户为止

<style> 标签用于为 HTML 文档定义样式信息
在 style 中，您可以规定在浏览器中如何呈现 HTML 文档
type 属性是必需的，定义 style 元素的内容。唯一可能的值是 "text/css"
style 元素位于 head 部分中
media 属性用于为不同的媒介类型规定不同的样式
提示：如需在一个 style 元素中定义一个以上的媒介类型，请使用逗号分隔的列表（例如：<style type="text/css" media="screen,projection">）
<html>
<head>
<style type="text/css">
h1 {color:#FF0000;}
p {color:#0000FF;}
body {background-color:#FFEFD6;}
</style>

<style type="text/css" media="print">
h1 {color:#000000;}
p {color:#000000;}
body {background-color:#FFFFFF;}
</style>
</head>

<body>
<h1>Header 1</h1>
<p>A paragraph.</p>
</body>
</html>

URL 可以由单词组成，比如 “w3school.com.cn”，或者是因特网协议（IP）地址：192.168.1.253
scheme://host.domain:port/path/filename
解释：
scheme - 定义因特网服务的类型。最常见的类型是 http
host - 定义域主机（http 的默认主机是 www）
domain - 定义因特网域名，比如 w3school.com.cn
:port - 定义主机上的端口号（http 的默认端口号是 80）
path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。
filename - 定义文档/资源的名称
编者注：URL 的英文全称是 Uniform Resource Locator，中文也译为“统一资源定位符”

http	超文本传输协议	以 http:// 开头的普通网页。不加密。
https	安全超文本传输协议	安全网页。加密所有信息交换。
ftp	文件传输协议	用于将文件下载或上传至网站。
file	您计算机上的文件

URL 编码使用 "%" 其后跟随两位的十六进制数来替换非 ASCII 字符。
URL 不能包含空格。URL 编码通常使用 + 来替换空格

如果希望向世界发布您的网站，那么您必须把它存放在 web 服务器上
使用因特网服务提供商（ISP）

<!DOCTYPE> 声明帮助浏览器正确地显示网页
<!DOCTYPE> 不是 HTML 标签。它为浏览器提供一项信息（声明），即 HTML 是用什么版本编写的

浏览器有两种渲染模式，一种是怪异/混杂模式（可以兼容以前的语法规则），一种是标准模式（只能识别写该浏览器的一种语法规则）
没有<!DOCTYPE>一行就是怪异模式

&lt; is the same as <
&gt; is the same as >
&#169; is the same as ©

XHTML 指的是可扩展超文本标记语言
XHTML 是以 XML 应用的方式定义的 HTML
文档结构
XHTML DOCTYPE 是强制性的（DOCTYPE 没有关闭标签）
<html> 中的 XML namespace 属性是强制性的
<html>、<head>、<title> 以及 <body> 也是强制性的
元素语法
XHTML 元素必须正确嵌套
XHTML 元素必须始终关闭
XHTML 元素必须小写
XHTML 文档必须有一个根元素
属性语法
XHTML 属性必须使用小写
XHTML 属性值必须用引号包围
XHTML 属性最小化也是禁止的（属性简写）<input checked>错误 <input checked="checked" />正确

如何从 HTML 转换到 XHTML
向每张页面的第一行添加 XHTML <!DOCTYPE>
向每张页面的 html 元素添加 xmlns 属性，例如：<html xmlns="http://www.w3.org/1999/xhtml">
把所有元素名改为小写
关闭所有空元素
把所有属性名改为小写
为所有属性值加引号
文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构
通过 DTD，您的每一个 XML 文件均可携带一个有关其自身格式的描述。
通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。
而您的应用程序也可使用某个标准的 DTD 来验证从外部接收到的数据。
您还可以使用 DTD 来验证您自身的数据
在 XHTML 中有哪些不同的 DTD ？ Strict, Transitional, Frameset
Transitional是最常用的 XHTML DTD

<input type="submit"> 定义用于向表单处理程序（form-handler）提交表单的按钮。
表单处理程序通常是包含用来处理输入数据的脚本的服务器页面。
表单处理程序在表单的 action 属性中指定：
实例
<form action="action_page.php">
First name:<br>
<input type="text" name="firstname" value="Mickey">
<br>
Last name:<br>
<input type="text" name="lastname" value="Mouse">
<br><br>
<input type="submit" value="Submit">
</form> 
Action 属性
action 属性定义在提交表单时执行的动作
向服务器提交表单的通常做法是使用提交按钮
通常，表单会被提交到 web 服务器上的网页
在上面的例子中，指定了某个服务器脚本来处理被提交表单：
<form action="action_page.php">
如果省略 action 属性，则 action 会被设置为当前页面

method 属性规定在提交表单时所用的 HTTP 方法（GET 或 POST）
您能够使用 GET（默认方法）：
如果表单提交是被动的（比如搜索引擎查询），并且没有敏感信息。
当您使用 GET 时，表单数据在页面地址栏中是可见的：
action_page.php?firstname=Mickey&lastname=Mouse
注释：GET 最适合少量数据的提交。浏览器会设定容量限制。

如果表单正在更新数据，或者包含敏感信息（例如密码）
POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的

Name 属性
如果要正确地被提交，每个输入字段必须设置一个 name 属性
数据想要发送成功必须有数据名和数据值，值是自己输入的，因此在input必须得有name属性
get的话在地址栏会加?数据名：数据值&数据名：数据值&数据名：数据值....

用 <fieldset> 组合表单数据,在数据周围绘制一个带标题的框
<fieldset> 元素组合表单中的相关数据
<legend> 元素为 <fieldset> 元素定义标题
实例
<form action="action_page.php">
<fieldset>
<legend>Personal information:</legend>
First name:<br>
<input type="text" name="firstname" value="Mickey">
<br>
Last name:<br>
<input type="text" name="lastname" value="Mouse">
<br><br>
<input type="submit" value="Submit"></fieldset>
</form> 

下面是 <form> 属性的列表：
accept-charset	规定在被提交表单中使用的字符集（默认：页面字符集）。
action	规定向何处提交表单的地址（URL）（提交页面）。
autocomplete	规定浏览器应该自动完成表单（默认：开启）。
enctype	规定被提交数据的编码（默认：url-encoded）。
method	规定在提交表单时所用的 HTTP 方法（默认：GET）。
name	规定识别表单的名称（对于 DOM 使用：document.forms.name）。
novalidate	规定浏览器不验证表单。
target	规定 action 属性中地址的目标（默认：_self）

<select name="cars">
<option value="volvo" selected="selected">Volvo</option>
<option value="saab">Saab</option>
<option value="fiat">Fiat</option>
<option value="audi">Audi</option>
</select>

<textarea name="message" rows="10" cols="30">
The cat was playing in the garden.
</textarea>
wrap 属性规定当在表单中提交时，文本区域（text area）中的文本如何换行
soft	当在表单中提交时，textarea 中的文本不换行。默认值。
hard	当在表单中提交时，textarea 中的文本换行（包含换行符）

<button type="button" onclick="alert('Hello World!')">Click Me!</button>

表头单元 - 包含头部信息（由 th 元素创建）
标准单元 - 包含数据（由 td 元素创建）
th 元素内部的文本通常会呈现为居中的粗体文本，而 td 元素内的文本通常是左对齐的普通文本

<td>
axis 属性用于对单元格进行分类，axis 属性可用于对相关的信息列进行组合
如果你在一个食物购物的单元格中使用 axis=meals，浏览器能够找到那些单元格，获取它的值，并且计算出总数
headers 属性规定表头与单元格相关联,headers 属性不会在普通浏览器中产生任何视觉变化,屏幕阅读器可以利用该属性
headers 属性会将表格中的一个表头单元格和一个数据单元格联系起来
这个属性的值是引号包括的一列名称，这些名称是用 id 属性定义的不同表头单元格的名称
headers 属性对非可视化的浏览器，也就是那些在显示出相关数据单元格内容之前就显示表头单元格内容的浏览器非常有用
(表头用id，数据单元格用headers)
rowspan="0" 指示浏览器横跨到表格部分的最后一行（thead、tbody 或者 tfoot）
scope 属性定义将表头单元与数据单元相关联的方法,标识某个单元是否是列、行、列组或行组的表头。不会在普通浏览器中产生任何视觉变化,屏幕阅读器可以利用该属性。
通过属性值 row，表头行包括的所有表格都将和表头单元格联系起来。指定 col，会将当前列的所有单元格和表头单元格绑定起来。
使用 rowgroup 和 colgroup 会将单元格的行组（由 <thead>、<tbody> 或 <tfoot> 标签定义）或
列组中的所有单元格和表头单元格绑定起来（由 <col> 或 <colgroup> 标签定义

如果您使用 thead、tfoot 以及 tbody 元素，您就必须使用全部的元素
它们的出现次序是：thead、tfoot、tbody，这样浏览器就可以在收到所有数据前呈现页脚了。您必须在 table 元素内部使用这些标签
<thead> 内部必须拥有 <tr> 标签！
align	 right|left|center|justify|char定义 tbody 元素中内容的对齐方式
char 规定根据哪个字符来进行文本对齐
charoff 规定第一个对齐字符的偏移量
valign	top|middle|bottom|baseline 规定 tbody 元素中内容的垂直对齐方式

<label> 标签为 input 元素定义标注（标记）。
label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。如果您在 label 元素内点击文本，就会触发此控件
就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。控件的事件也会绑定到对应的label上，即点击label，会触发label和控件的事件
<label> 标签的 for 属性应当与相关元素的 id 属性相同
form规定 label 字段所属的一个或多个表单

<optgroup> 标签定义选项组
optgroup 元素用于组合选项。当您使用一个长的选项列表时，对相关的选项进行组合会使处理更加容易
label 属性为选项组规定描述，通过 <optgroup> 标签把相关的选项组合在一起（为option分组，组名会显示）
disabled属性规定禁用该选项组

<output> 标签定义不同类型的输出，比如脚本的输出
<form oninput="x.value=parseInt(a.value)+parseInt(b.value)">0
<input type="range" id="a" value="50">100
+<input type="number" id="b" value="50">
=<output name="x" for="a b"></output>
</form>
0range控件100+50(文本框)=53
oninput="x.value=parseInt(a.value)+parseInt(b.value)" 决定output的运算
for 属性规定了计算中使用的元素与计算结果之间的关系
<output for="element_id"> element_id	一个或多个元素的 id 列表，以空格分隔，规定计算中使用的元素与计算结果之间的关系
form 属性规定 <output> 元素所属的一个或多个表单 <output form="form_id">
<form action="demo_form.asp" id="numform"
 oninput="x.value=parseInt(a.value)+parseInt(b.value)">0
 <input type="range" id="a" name="a" value="50">100
 +<input type="number" id="b" name="b" value="50">
 <br><br>
 <input type="submit">
</form>
name 属性规定 <output> 元素的名称，name 属性用于在提交表单后引用表单数据，或者在 JavaScript 中引用元素
<output form="numform" name="x" for="a b"></output> 

<datalist> 元素为 <input> 元素规定预定义选项列表。
用户会在他们输入数据时看到预定义选项的下拉列表。
<input> 元素的 list 属性必须引用 <datalist> 元素的 id 属性。
实例
通过 <datalist> 设置预定义值的 <input> 元素：
<form action="action_page.php">
<input list="browsers">
<datalist id="browsers">
   <option value="Internet Explorer">
   <option value="Firefox">
   <option value="Chrome">
   <option value="Opera">
   <option value="Safari">
</datalist> 
</form>

<time> 标签定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的
该元素能够以机器可读的方式对日期和时间进行编码，这样，举例说，用户代理能够把生日提醒或排定的事件添加到用户日程表中，搜索引擎也能够生成更智能的搜索结果
datetime 属性规定日期或时间:YYYY-MM-DDThh:mm:ssTZD
YYYY - 年 (例如 2011)
MM - 月 (例如 01 表示 January)
DD - 天 (例如 08)
T - 必需的分隔符，若规定时间的话
hh - 时 (例如 22 表示 10.00pm)
mm - 分 (例如 55)
ss - 秒 (例如 03)
TZD - 时区标识符 (Z 表示祖鲁，也称为格林威治时间)
pubdate 属性指示 <time> 元素中的日期 / 时间是文档（或最近的前辈 <article> 元素）的发布日期
<time pubdate="pubdate">
属性值：pubdate	指示 <time> 元素中的日期 / 时间是文档（或最近的前辈 <article> 元素）的发布日期

<track> 标签为诸如 video 元素之类的媒介规定外部文本轨道
用于规定字幕文件或其他包含文本的文件，当媒介播放时，这些文件是可见的
使用 default 属性，则规定应该使用该轨道，假如用户没有选择其他轨道的话
<video width="320" height="240" controls="controls">
  <source src="forrest_gump.mp4" type="video/mp4" />
  <source src="forrest_gump.ogg" type="video/ogg" />
  <track kind="subtitles" src="subschi.srt" srclang="zh" label="Chinese">
  <track kind="subtitles" default src="subseng.srt" srclang="en" label="English">
</video>
kind 属性规定轨道的种类
captions	该轨道定义将在播放器中显示的简短说明。
chapters	该轨道定义章节，用于导航媒介资源。
descriptions	该轨道定义描述，用于通过音频描述媒介的内容，假如内容不可播放或不可见。
metadata	该轨道定义脚本使用的内容
subtitles	该轨道定义字幕，用于在视频中显示字幕
label 属性规定轨道的标签，例如，当用户选择字幕轨道时，标签会显示出来
<track kind="subtitles" label="Chinese subtitles" src="chisubs.srt" srclang="zh">
src 属性规定轨道的 url
srclang 属性定义轨道的语言，如果 kind 属性的值是 "subtitles"，则 srclang 属性是必需的

<wbr>
Word Break Opportunity (<wbr>) 规定在文本中的何处适合添加换行符
如果单词太长，或者您担心浏览器会在错误的位置换行，那么您可以使用 <wbr> 元素来添加 Word Break Opportunity（单词换行时机）
在单词的后面加<wbr>，则此单词会看准时机换行

<input type="text"> 定义供文本输入的单行输入字段
<input type="password"> 定义密码字段 注释：password 字段中的字符会被做掩码处理（显示为星号或实心圆）
<input type="submit" value="Submit"(按钮上的文字）> 定义提交表单数据至表单处理程序的按钮

<input type="radio" name="sex" value="male" checked>单选按钮（一个圈）
<input type="checkbox" name="vehicle" value="Bike">复选框（一个圈）
单选框radio复选框checkbox的name属性就是给每一组分组，单选框name不同可以同时勾选，name相同的不可以同时勾选，同理
复选框name相同的可以复选，name不同的也可以复选
单选复选的value就是提交的数据值，name就是提交的数据名

<input type="button> 定义按钮
<input type="number"> 用于应该包含数字值的输入字段,您能够对数字做出限制,根据浏览器支持，限制可应用到输入字段
                      <input type="number" name="quantity" min="1" max="5">
                      
输入限制
这里列出了一些常用的输入限制（其中一些是 HTML5 中新增的）：
disabled	规定输入字段应该被禁用。
max	规定输入字段的最大值。
maxlength	规定输入字段的最大字符数。
min	规定输入字段的最小值。
pattern	规定通过其检查输入值的正则表达式。
readonly	规定输入字段为只读（无法修改）。
required	规定输入字段是必需的（必需填写）。
size	规定输入字段的宽度（以字符计）。
step	规定输入字段的合法数字间隔。
value	规定输入字段的默认值
例：<input type="number" name="points" min="0" max="100" step="10" value="30">

<input type="date"> 用于应该包含日期的输入字段
根据浏览器支持，日期选择器会出现输入字段中
<input type="date" name="bday" max="1979-12-31">
<input type="date" name="bday" min="2000-01-02">

<input type="password">输入的时候显示的时候全是黑圈

<input type="color"> 用于应该包含颜色的输入字段
根据浏览器支持，颜色选择器会出现输入字段中

<input type="range"> 用于应该包含一定范围内的值的输入字段
根据浏览器支持，输入字段能够显示为滑块控件
<input type="range" name="points" min="0" max="10">

<input type="month"> 允许用户选择月份和年份
根据浏览器支持，日期选择器会出现输入字段中

<input type="week"> 允许用户选择周和年
根据浏览器支持，日期选择器会出现输入字段中

<input type="time"> 允许用户选择时间（无时区）
根据浏览器支持，时间选择器会出现输入字段中

<input type="datetime"> 允许用户选择日期和时间（有时区）
根据浏览器支持，日期选择器会出现输入字段中

<input type="datetime-local"> 允许用户选择日期和时间（无时区）
根据浏览器支持，日期选择器会出现输入字段中

<input type="email"> 用于应该包含电子邮件地址的输入字段
根据浏览器支持，能够在被提交时自动对电子邮件地址进行验证
某些智能手机会识别 email 类型，并在键盘增加 ".com" 以匹配电子邮件输入

<input type="search"> 用于搜索字段（搜索字段的表现类似常规文本字段）

<input type="tel"> 用于应该包含电话号码的输入字段

<input type="url"> 用于应该包含 URL 地址的输入字段
根据浏览器支持，在提交时能够自动验证 url 字段
某些智能手机识别 url 类型，并向键盘添加 ".com" 以匹配 url 输入

readonly 属性规定输入字段为只读（不能修改）
<input type="text" name="firstname" value="John" readonly>
readonly 属性不需要值。它等同于 readonly="readonly"

novalidate 属性属于 <form> 属性
如果设置，则 novalidate 规定在提交表单时不对表单数据进行验证

autofocus 属性是布尔属性
如果设置，则规定当页面加载时 <input> 元素应该自动获得焦点

form 属性规定 <input> 元素所属的一个或多个表单
提示：如需引用一个以上的表单，请使用空格分隔的表单 id 列表
实例
输入字段位于 HTML 表单之外（但仍属表单）：
<form action="action_page.php" id="form1">
   First name: <input type="text" name="fname"><br>
   <input type="submit" value="Submit">
</form>
Last name: <input type="text" name="lname" form="form1">

formaction 属性规定当提交表单时处理该输入控件的文件的 URL
formaction 属性覆盖 <form> 元素的 action 属性
formaction 属性适用于 type="submit" 以及 type="image"
<form action="action_page.php">
   First name: <input type="text" name="fname"><br>
   Last name: <input type="text" name="lname"><br>
   <input type="submit" value="Submit"><br>
   <input type="submit" formaction="demo_admin.asp"
   value="Submit as admin">
</form> 

formenctype 属性规定当把表单数据（form-data）提交至服务器时如何对其进行编码（仅针对 method="post" 的表单）
formenctype 属性覆盖 <form> 元素的 enctype 属性
formenctype 属性适用于 type="submit" 以及 type="image"

formmethod 属性定义用以向 action URL 发送表单数据（form-data）的 HTTP 方法
formmethod 属性覆盖 <form> 元素的 method 属性
formmethod 属性适用于 type="submit" 以及 type="image"

formnovalidate 属性覆盖 <form> 元素的 novalidate 属性
formnovalidate 属性可用于 type="submit"
拥有两个提交按钮的表单（验证和不验证）：
<form action="action_page.php">
   E-mail: <input type="email" name="userid"><br>
   <input type="submit" value="Submit"><br>
   <input type="submit" formnovalidate value="Submit without validation">
</form> 

formtarget 属性规定的名称或关键词指示提交表单后在何处显示接收到的响应
formtarget 属性会覆盖 <form> 元素的 target 属性
formtarget 属性可与 type="submit" 和 type="image" 使用

height 和 width 属性规定 <input> 元素的高度和宽度
height 和 width 属性仅用于 <input type="image">

list 属性引用的 <datalist> 元素中包含了 <input> 元素的预定义选项

min 和 max 属性规定 <input> 元素的最小值和最大值
min 和 max 属性适用于如需输入类型：number、range、date、datetime、datetime-local、month、time 以及 week

multiple 属性是布尔属性
如果设置，则规定允许用户在 <input> 元素中输入一个以上的值
multiple 属性适用于以下输入类型：email 和 file
接受多个值的文件上传字段
<input type="file" name="img" multiple="multiple" />

pattern 属性规定用于检查 <input> 元素值的正则表达式
pattern 属性适用于以下输入类型：text、search、url、tel、email、and password
提示：请使用全局的 title 属性对模式进行描述以帮助用户(输入框提示title的内容）
<input type="text" name="country_code" pattern="[A-z]{3}" title="三个字母的国家代码" />

placeholder 属性规定用以描述输入字段预期值的提示（样本值或有关格式的简短描述）
该提示会在用户输入值之前显示在输入字段中
placeholder 属性适用于以下输入类型：text、search、url、tel、email 以及 password

required 属性是布尔属性
如果设置，则规定在提交表单之前必须填写输入字段
required 属性适用于以下输入类型：text、search、url、tel、email、password、date pickers、number、checkbox、radio、and file

step 属性规定 <input> 元素的合法数字间隔
示例：如果 step="3"，则合法数字应该是 -3、0、3、6、等等
提示：step 属性可与 max 以及 min 属性一同使用，来创建合法值的范围
step 属性适用于以下输入类型：number、range、date、datetime、datetime-local、month、time 以及 week

HTML5 是专门为承载丰富的 web 内容而设计的，并且无需额外插件

HTML5 定义了八个新的语义 HTML 元素。所有都是块级元素
您可以把 CSS display 属性设置为 block，以确保老式浏览器中正确的行为:
header, section, footer, aside, nav, main, article, figure {
    display: block; 
}

向 HTML 添加新元素
您可以通过浏览器 trick 向 HTML 添加任何新元素：
本例向 HTML 添加了一个名为 <myHero> 的新元素，并为其定义 display 样式：
<script>document.createElement("myHero")</script>(已添加的JavaScript语句document.createElement("myHero")，仅适用于IE(IE需要，其他的直接写）)
<style>
  myHero {
    display: block;
    background-color: #ddd;
    padding: 50px;
    font-size: 30px;
  } 
</style> 
<myHero>My First Hero</myHero>

上述方案可用于所有新的 HTML5 元素，但是：
注意：Internet Explorer 8 以及更早的版本，不允许对未知元素添加样式
幸运的是，Sjoerd Visscher 创造了 "HTML5 Enabling JavaScript", "the shiv"：
<!--[if lt IE 9]>
  <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
以上代码是一段注释，但是 IE9 的早期版本会读取它（并理解它）

完整的 Shiv 解决方案
<!DOCTYPE html>
<html>
<head>
  <title>Styling HTML5</title>
  <!--[if lt IE 9]>
  <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
</head>
<body>
<h1>My First Article</h1>
<article>
London is the capital city of England. 
It is the most populous city in the United Kingdom, 
with a metropolitan area of over 13 million inhabitants.
</article>
</body>
</html>
引用 shiv 代码的链接必须位于 <head> 元素中，因为 Internet Explorer 需要在读取之前认识所有新元素

语义元素清楚地向浏览器和开发者描述其意义
非语义元素的例子：<div> 和 <span> - 无法提供关于其内容的信息
语义元素的例子：<form>、<table> 以及 <img> - 清晰地定义其内容

<section> 元素定义文档中的节
根据 W3C 的 HTML 文献：“节（section）是有主题的内容组，通常具有标题”
可以将网站首页划分为简介、内容、联系信息等节

在 HTML5 标准中，<article> 元素定义完整的相关元素自包含块
<section> 元素被定义为相关元素块
我们能够使用该定义来决定如何嵌套元素吗？不，我们不能！

<header> 元素为文档或节规定页眉
<header> 元素应该被用作介绍性内容的容器
一个文档中可以有多个 <header> 元素

<footer> 元素为文档或节规定页脚
<footer> 元素应该提供有关其包含元素的信息
页脚通常包含文档的作者、版权信息、使用条款链接、联系信息等等
您可以在一个文档中使用多个 <footer> 元素

<nav> 元素定义导航链接集合
<nav> 元素旨在定义大型的导航链接块。不过，并非文档中所有链接都应该位于 <nav> 元素中！

<aside> 元素页面主内容之外的某些内容（比如侧栏）
aside 内容应该与周围内容相关

在书籍和报纸中，与图片搭配的标题很常见
标题（caption）的作用是为图片添加可见的解释
通过 HTML5，图片和标题能够被组合在 <figure> 元素中：
实例
<figure>
   <img src="pic_mountain.jpg" alt="The Pulpit Rock" width="304" height="228">
   <figcaption>Fig1. - The Pulpit Pock, Norway.</figcaption>
</figure> （位置按代码顺序）
<img> 元素定义图像，<figcaption> 元素定义标题。

为何使用 HTML5 元素？
根据 W3C，语义网：
“允许跨应用程序、企业和团体对数据进行分享和重用。”（统一属性名）

<main>	规定文档的主内容
<mark>	定义重要的或强调的文本
<details>	定义用户能够查看或隐藏的额外细节
<summary>	定义 <details> 元素的可见标题
<time>	定义日期/时间

<div id="menu">	<nav>
<div id="content">	<section>
<div id="post">	<article>
HTML5 doctype：<!DOCTYPE html>
修改编码信息，从 HTML4：
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
改为 HTML5：
<meta charset="utf-8">
在 HTML5 标准中，<article> <section> 与 <div> 之间的差异很小，令人困惑
在 HTML5 标准中，<section> 元素被定位为相关元素的块
<article> 元素被定义为相关元素的完整的自包含块
<div> 元素被定义为子元素的块

html5
请始终对图像使用 alt 属性,当图像无法显示时该属性很重要
请始终定义图像尺寸。这样做会减少闪烁，因为浏览器会在图像加载之前为图像预留空间
在 HTML5 标准中，<head> 标签也能够被省略
默认地，浏览器会把 <body> 之前的所有元素添加到默认的 <head> 元素
通过省略 <head> 标签，您能够降低 HTML 的复杂性
短注释应该在单行中书写，并在 <!-- 之后增加一个空格，在 <!-- 之前增加一个空格：
<!-- This is a comment -->
长注释，跨越多行，应该通过 <!-- 和 --> 在独立的行中书写：
<!-- 
  This is a long comment example. This is a long comment example. This is a long comment example.
  This is a long comment example. This is a long comment example. This is a long comment example.
-->
长注释更易观察，如果它们被缩进两个空格的话
只在值包含空格时使用引号来包围值（css)

html编码：&;这种格式
标签的<>可以用&lt;&gt;代替
英文排序超过Z就用AA
start属性写第几个就可以了，都写阿拉伯，从117开始就写start="117"（不管是英文还是罗马还是阿拉伯数字格式）
alt图片占位符
placeholder属性（默认提示值，聚焦消失，如果输入内容为空失焦重现，不为空时失焦输入值不会消失（包括输入值与默认值相同的情况），
这时重新聚焦输入值还在（包括输入值与默认值相同的情况））
