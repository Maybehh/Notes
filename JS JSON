JSON: JavaScript Object Notation（JavaScript 对象标记法）。JSON 是一种存储和交换数据的语法。JSON 是通过 JavaScript 对象标记法书写的文本

当数据在浏览器与服务器之间进行交换时，这些数据只能是文本。
JSON 属于文本，并且我们能够把任何 JavaScript 对象转换为 JSON，然后将 JSON 发送到服务器。
我们也能把从服务器接收到的任何 JSON 转换为 JavaScript 对象。
以这样的方式，我们能够把数据作为 JavaScript 对象来处理，无需复杂的解析和转译

在存储数据时，数据必须是某种具体的格式，并且无论您选择在何处存储它，文本永远是合法格式之一。JSON 让 JavaScript 对象存储为文本成为可能
// 存储数据：
myObj = { "name":"Bill Gates",  "age":62, "city":"Seattle" };
myJSON = JSON.stringify(myObj);
localStorage.setItem("testJSON", myJSON);
// 取回数据：
text = localStorage.getItem("testJSON");
obj = JSON.parse(text);
document.getElementById("demo").innerHTML = obj.name;

JSON 指的是 JavaScript 对象标记法（JavaScript Object Notation）
JSON 是一种轻量级的数据交换格式
JSON 具有自我描述性且易于理解
JSON 独立于语言

JSON 使用 JavaScript 语法，但是 JSON 格式是纯文本的。
文本可被任何编程语言作为数据来读取和使用。
JSON 格式最初由 Douglas Crockford 提出

为什么使用 JSON？
因为 JSON 格式仅仅是文本，它能够轻松地在服务器浏览器之间传输，并用作任何编程语言的数据格式。
JavaScript 提供內建函数把以 JSON 格式写的字符串转换为原生 JavaScript 对象：
JSON.parse()
因此，如果您以 JSON 格式从服务器接收数据，那么您可以像任何其他 JavaScript 对象那样使用它

JSON 语法是 JavaScript 语法的子集
JSON 名称需要双引号。而 JavaScript 名称不需要
JSON – 求值为 JavaScript 对象
在 JSON 中，值必须是字符串，由双引号包围：
JSON
{ "name":"Bill Gates" }
在 JavaScript 中，值可以是字符串、数字或标识符名称：
JavaScript
{ name:"Bill Gates" }

在 JSON 中，值必须是以下数据类型之一：
字符串
数字
对象（JSON 对象）
数组
布尔
null
在 JavaScript 中，以上所列均可为值，外加其他有效的 JavaScript 表达式，包括：
函数
日期
undefined

在 JSON 中，字符串值必须由双引号编写，在 JavaScript 中，您可以书写使用双引号或单引号的字符串值
JSON 文件的文件类型是 ".json"
JSON 文本的 MIME 类型是 "application/json"

JSON 和 XML 均可用于从 web 服务器接收数据
JSON 和 XML 都能被 XMLHttpRequest 读取
XML 必须使用 XML 解析器进行解析。而 JSON 可通过标准的 JavaScript 函数进行解析

XML 比 JSON 更难解析。
JSON 被解析为可供使用的 JavaScript 对象。
对于 AJAX 应用程序，JSON 比 XML 更快更易用：
使用 XML：
读取 XML 文档
使用 XML DOM 遍历文档
提取变量中存储的值
使用 JSON：
读取 JSON 字符串
JSON.Parse JSON 字符串

{ "name":"John" }
{ "age":30 }
{"employee":{ "name":"Bill Gates", "age":62, "city":"Seattle" }}
{"employees":[ "Bill", "Steve", "David" ]}
{ "sale":true }
{ "middlename":null }

在从 web 服务器接收数据时，数据永远是字符串
<script>
var text = '{"employees":[' +
'{"firstName":"Bill","lastName":"Gates" },' +
'{"firstName":"Steve","lastName":"Jobs" },' +
'{"firstName":"Elon","lastName":"Musk" }]}';

obj = JSON.parse(text);
document.getElementById("demo").innerHTML =
obj.employees[1].firstName + " " + obj.employees[1].lastName;
</script>

var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function()  {
    if (this.readyState == 4 && this.status == 200) {
        myObj =  JSON.parse(this.responseText);
        document.getElementById("demo").innerHTML  = myObj.name;
    }
};
xmlhttp.open("GET", "json_demo.txt", true);
xmlhttp.send();

在对衍生自数组的 JSON 使用 JSON.parse() 后，此方法将返回 JavaScript 数组，而不是 JavaScript 对象
var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function()  {
    if (this.readyState == 4 && this.status == 200) {
        myArr =  JSON.parse(this.responseText);
        document.getElementById("demo").innerHTML  = myArr[0];
    }
};
xmlhttp.open("GET", "json_demo_array.txt", true);
xmlhttp.send();

JSON 中不允许日期对象。如果您需要包含日期，请写为字符串。之后您可以将其转换回日期对象：
var text =  '{ "name":"Bill Gates", "birth":"1955-10-28", "city":"Seattle"}';
var obj = JSON.parse(text);
obj.birth = new Date(obj.birth);（数字，变量名做参数不加引号，字符串要加引号，2019-02-34含有非数字也要加引号）
document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth;

或者您可以已使用 JSON.parse() 函数的第二个参数，被称为 reviver
这个 reviver 参数是函数，在返回值之前，它会检查每个属性
var text =  '{ "name":"Bill Gates", "birth":"1955-10-28", "city":"Seattle"}';
var obj = JSON.parse(text, function (key, value) {
    if  (key == "birth") {
        return new Date(value);
    } else {
         return value;
   }});
document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth;

JSON 中不允许函数，如果您需要包含函数，请把它写作字符串。稍后您可以把它转换回函数：
var text =  '{ "name":"Bill Gates", "age":"function () {return 62;}", "city":"Seattle"}';
var obj = JSON.parse(text);
obj.age = eval("(" + obj.age + ")");
document.getElementById("demo").innerHTML = obj.name + ", " +  obj.age();
您应该避免在 JSON 中使用函数，函数会丢失它们的作用域，而且您还需要使用 eval() 把它们转换回函数

eval函数见谷歌收藏
eval 返回最后一个表达式的值
var x = 5;
var str = "if (x == 5) {console.log('z is 42'); z = 42; x = 420; } else z = 0;";
console.log('x is %i', eval(str)); // z is 42  x is 420 最后一个表达式是x=420，因此返回420

eval 中函数作为字符串被定义需要“（”和“）”作为前缀和后缀
var fctStr1 = 'function a() {}'
var fctStr2 = '(function a() {})'
var fct1 = eval(fctStr1)  // 返回undefined
var fct2 = eval(fctStr2)  // 返回一个函数

在向 web 服务器发送数据时，数据必须是字符串
在 JSON 中，不允许日期对象。JSON.stringify() 函数将把任何日期转换为字符串
在 JSON 中，不允许函数作为对象值。JSON.stringify() 函数将从 JavaScript 对象删除任何函数，包括键(属性)和值
如果您在运行 JSON.stringify() 函数前已将函数转换为字符串，这个环节可以省略

您能够通过使用 for-in 遍历对象属性：
myObj =  { "name":"Bill Gates", "age":62, "car":null };
for (x in myObj) {
   document.getElementById("demo").innerHTML  += x;
}输出的是属性名
在 for-in 循环中，请使用括号标记法(不可以用.属性)来访问属性值：document.getElementById("demo").innerHTML  += myObj[x]; 输出的是属性值
myObj.cars.car2 = "Mercedes Benz";
for (i in myObj.cars) {
  x += myObj.cars[i] + "<br>";
}(x += myObj.cars.i + "<br>";输出的全部是undefined)
for (i in myObj.cars)中x的属性值不可以用.x访问值，必须用[x]访问，其他的可以用.属性  
txt += myObj[x].name + "<br>";是可以的 name是x属性值的name属性

使用 delete 关键词来删除 JSON 对象的属性：delete myObj.cars.car1;

可以通过使用 for-in 循环来访问数组值：
for (i in myObj.cars) {
     x  += myObj.cars[i];
}

通过使用 PHP 函数 json_encode()，PHP 中的对象可转换为 JSON:
<?php
$myObj->name = "Bill Gates";
$myObj->age = 62;
$myObj->city = "Seattle";

$myJSON = json_encode($myObj);

echo $myJSON;//返回$myJSON JSON
?>

在使用 PHP 函数 json_encode() 时，PHP 中的数组也将被转换为 JSON：
<?php
$myArr = array("Bill Gates", "Steve Jobs", "Elon Musk");

$myJSON = json_encode($myArr);

echo $myJSON;
?>
将请求转换为对象，使用 PHP 函数 json_decode()

在向服务器发送数据时，通常最好是使用 HTTP POST 方法。如需使用 POST 方法来发送 AJAX 请求，请指定该方法和正确的头部。
发送到服务器的数据现在必须是 .send() 方法的参数：
xmlhttp.open("POST", "demo_json_db.php", true);
xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xmlhttp.send("x=" + dbParam);

JSONP 是一种无需考虑跨域问题即可传送 JSON 数据的方法。JSONP 不使用 XMLHttpRequest 对象。JSONP 使用 <script> 标签取而代之
JSONP 指的是 JSON with Padding。从另一个域请求文件会引起问题，由于跨域政策。从另一个域请求外部脚本没有这个问题。
JSONP 利用了这个优势，并使用 script 标签替代 XMLHttpRequest 对象
（就是把用AJAX访问改成了用<script src = ....>访问）

s.src = "jsonp_demo_db.php?x="  + JSON.stringify(obj); 与用户交互地访问服务器

<?php
$myJSON = '{ "name":"Bill Gates", "age":62, "city":"Seattle" }';
echo "myFunc(".$myJSON.");";
?>
结果返回对名为 "myFunc" 的函数的调用，其中的 JSON 数据为参数。请确保客户端存在该函数

回调函数：
如果您无法控制服务器文件，那么如何使服务器文件调用正确的函数呢？有时服务器文件提供回调函数作为参数：
PHP 文件会调用您作为回调参数传递的函数：
function clickButton() {
    var s = document.createElement("script");
    s.src = "jsonp_demo_db.php?callback=myDisplayFunction";
    document.body.appendChild(s);
}
返回的时候用myDisplayFunction函数，函数参数为服务器文件写好的返回的函数的参数

domTree的检索是深度优先 （检测到div后，检索div的子元素，等全部检索完，再检索div的兄弟节点）
domTree变了则renderTree就会变，因此要重新渲染，叫reflow重构（重排）
reflow: dom节点的删除、添加
        dom节点的宽高变化，位置变化，display: none和block的互变（cssTree变了，dom节点的大小等变化了）
        offsetWidth, offsetHeight, offsetLeft等 系统读取的时候会重绘renderTree,以确保得到的是实时的数据
repaint重绘：改变颜色之类的，不改变大小，要找到对应的位置重绘，其他的位置不用动

js会阻断html和css加载线，因为js可以修改html和css,因此如果<script>写在html前会妨碍页面的渲染，因此一般写在body最后
网页一开始加载留白，就是在加载js
有时候一个js文件出现差错，就整个页面不能加载了，因此出现了异步加载js

实现js加载异步：（和html等是同时下载的）
1、defer: 在<script>里加上defer="defer"(凡是属性值等于属性名的，可以只写属性属性名）， 即<script defer="defer">
该下载好的js要等到dom文档全部被解析(不是加载，不用加载图片等的)完才会被执行，只有ie能用
也可以将代码写到内部，
<script defer="defer"> var a = 123; </script> 这样子的话代码块就要等到执行<script>才会执行了(这个时候就不可写src了，就相当于在<script>里写
代码了，而不是引入了）

2、async: 加载完就执行，async只能加载外部脚本，不能把js写在script标签里（非ie和ie高端可以用，符合w3c就可以用）

兼容：不能<script defer="defer" async="async“>ie9以上都能识别，就崩了
     不能<script defer="defer"> <script async="async“> 同时写，这样子<script defer="defer">会在解析后执行，冲突，代码执行的结果可能就不对了

<script>
  var script = document.creatElement("script");
  script.type = "text/javascript";
  script.src = "..."; //这时候只下载并不能执行
  document.head.appendChild(script); //这个时候就可以执行了
  test(); //立即调用执行不了，因为在下载js的同时，后面的代码也按顺序继续执行，下载没完就执行，因此找不到函数，所以不能执行，如果setTimeout就可以，
            但是时间是不好把控的，因此不能这么写
</script>
因此改成script.onload = function () { test(); } 就可以保证下载完再执行了
兼容性很好，但是ie不行，ie就script标签没有onload事件
ie有自己的方法：
script.onreadystatechange = function () {
    if(script.readyState == "complete" || script.readyState == "loaded") {
          test();
    }
}

1、2种方法执行时不阻塞页面

当满足一定条件才执行的函数叫回调函数（callback）
按需加载：设置个按钮，在用户需要某种功能时由用户点击再去实现加载js

3、创建script标签，插入到DOM中，加载完毕后callBack：（既能异步，又能按需加载）
封装：（全兼容，最常用）
<script>
  function loadScript (url, callback) {
      var script = document.creatElement("script");
      script.type = "text/javascript";
      if(script.readyState) {  
          script.onreadystatechange = function () {  //有可能加载完js文件后再执行到这里，这时候script.readyState == "complete"了，就不会
                                  再变了，onreadystatechange就不会生效了，事件就不会执行了，因此把 script.src = url;加载 放在绑定后
              if(script.readyState == "complete" || script.readyState == "loaded") {
                  callback();
              }
          }
      } else {
          script.onload = function () { 
               callback(); 
          }
      }
      script.src = url;
      document.head.appendChild(script); //下载同时执行，因此下载完就可以执行js文件，而且变了状态可以执行上面的函数
  }
  loadScript('demo.js', function () { test(); }); //需要加载的写在</script>前面
</script> 
尽管script标签放在body最后可以先加载html再加载script，但不是最好的方式，这不是异步（不可以一边加载html一边加载js文件，还是比较慢）
所以用第三种方式可以实现异步加按需（不用下载不必要的js文件）
检索到script就会执行，执行到函数时又因为是异步下载js文件，所以可以执行后续的代码，script标签里的执行完后，就会顺序执行html,
实现同时下载js文件和加载html文档（不会阻塞html的渲染）即异步

script放在最后的话dom的渲染是最快的，script放在head里用方案3可以使渲染加js的速度最快，但一般我们追求客户看到最快，因此一般放最后
在解析dom时要用js中的某个方法时，用3方案，但仅仅加载一个工具库暂不用到的话，直接写在最后就可以啦
（改进3方案，不用执行具体方法，只把它作为加载js用的方法也可以)
（如果想要加载效率比较高，就用改进的只下载js文件的方案3）

loadScript('demo.js', test); 报错，因为不知道test是什么东西，只知道loadScript()，里面的函数内容是执行才会解析的
loadScript('demo.js', function () { test(); }); 这样子就可以解析了function，然后传入function，在执行function的时候会执行test()
也可以loadScript('demo.js', 'test()'); 然后callback();改成eval(callback); 但不要用eval;
setInterval也可以把字符串当成代码执行
也可以把函数写在一个js对象里，loadScript('demo.js', 'test')然后callback();改成tools[callback](); tools是包含test方法的对象

js加载时间线：（浏览器在运行一个页面时，首先会初始化js功能，当初始化完js这一个功能后，js开始发挥作用的时候的时间线）
1.创建Document对象，开始解析web页面，解析HTML元素和他们的文本内容后添加Element对象和Text节点到文档中。这个阶段document.readyState = "loading"
2.遇到link外部css，创建线程加载，并继续解析文档
3.遇到script外部js，并且没有设置async，defer，浏览器加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档
4.遇到script外部js，并且设置有async，defer 浏览器创建线程加载，并继续解析文档，对于async属性的脚本，脚本加载完成后立即执行
（异步禁止使用docuemnt.write()，在文档加载后再使用该方法，会把body内的所有清空（包括script标签），然后写上docuemnt.write()所要打印的东西）
5.遇到img标签等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档
6.当文档解析完成，document.readyState = "interactive"
7.文档解析完成后，所有设置有defer的脚本会按照顺序执行
8.当文档解析完成之后，document对象触发DOMContentLoaded事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段
9.当所有async的脚本加载完成并执行后，img等加载完成后，document.readyState = "complete"  window对象触发load事件
10.从此，页面以异步响应方式处理用户输入，网络事件等

domTree建成要把节点和节点的内容解析完（文本、标签里的语句要一起解析完才算建成dom树）
使用onreadystatechange可以打印两个readyState状态（loading是一开始的状态，不会变化到loading的）（属性单词首字母大写，事件全小写）

script标签也是domtree的一个节点
js代码在DOM解析完就进行操作，加载完再操作太慢了
dom解析完触发事件：DOMContentLoaded
DOMContentLoaded事件只能addEventListener
document.addEventListener('DOMContentLoaded', function () {}, false);
jq中$(document).ready(function () {}); 当DOM解析完就执行
