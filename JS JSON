JSON: JavaScript Object Notation（JavaScript 对象标记法）。JSON 是一种存储和交换数据的语法。JSON 是通过 JavaScript 对象标记法书写的文本

当数据在浏览器与服务器之间进行交换时，这些数据只能是文本。
JSON 属于文本，并且我们能够把任何 JavaScript 对象转换为 JSON，然后将 JSON 发送到服务器。
我们也能把从服务器接收到的任何 JSON 转换为 JavaScript 对象。
以这样的方式，我们能够把数据作为 JavaScript 对象来处理，无需复杂的解析和转译

在存储数据时，数据必须是某种具体的格式，并且无论您选择在何处存储它，文本永远是合法格式之一。JSON 让 JavaScript 对象存储为文本成为可能
// 存储数据：
myObj = { "name":"Bill Gates",  "age":62, "city":"Seattle" };
myJSON = JSON.stringify(myObj);
localStorage.setItem("testJSON", myJSON);
// 取回数据：
text = localStorage.getItem("testJSON");
obj = JSON.parse(text);
document.getElementById("demo").innerHTML = obj.name;

JSON 指的是 JavaScript 对象标记法（JavaScript Object Notation）
JSON 是一种轻量级的数据交换格式
JSON 具有自我描述性且易于理解
JSON 独立于语言

JSON 使用 JavaScript 语法，但是 JSON 格式是纯文本的。
文本可被任何编程语言作为数据来读取和使用。
JSON 格式最初由 Douglas Crockford 提出

为什么使用 JSON？
因为 JSON 格式仅仅是文本，它能够轻松地在服务器浏览器之间传输，并用作任何编程语言的数据格式。
JavaScript 提供內建函数把以 JSON 格式写的字符串转换为原生 JavaScript 对象：
JSON.parse()
因此，如果您以 JSON 格式从服务器接收数据，那么您可以像任何其他 JavaScript 对象那样使用它

JSON 语法是 JavaScript 语法的子集
JSON 名称需要双引号。而 JavaScript 名称不需要
JSON – 求值为 JavaScript 对象
在 JSON 中，值必须是字符串，由双引号包围：
JSON
{ "name":"Bill Gates" }
在 JavaScript 中，值可以是字符串、数字或标识符名称：
JavaScript
{ name:"Bill Gates" }

在 JSON 中，值必须是以下数据类型之一：
字符串
数字
对象（JSON 对象）
数组
布尔
null
在 JavaScript 中，以上所列均可为值，外加其他有效的 JavaScript 表达式，包括：
函数
日期
undefined

在 JSON 中，字符串值必须由双引号编写，在 JavaScript 中，您可以书写使用双引号或单引号的字符串值
JSON 文件的文件类型是 ".json"
JSON 文本的 MIME 类型是 "application/json"

JSON 和 XML 均可用于从 web 服务器接收数据
JSON 和 XML 都能被 XMLHttpRequest 读取
XML 必须使用 XML 解析器进行解析。而 JSON 可通过标准的 JavaScript 函数进行解析

XML 比 JSON 更难解析。
JSON 被解析为可供使用的 JavaScript 对象。
对于 AJAX 应用程序，JSON 比 XML 更快更易用：
使用 XML：
读取 XML 文档
使用 XML DOM 遍历文档
提取变量中存储的值
使用 JSON：
读取 JSON 字符串
JSON.Parse JSON 字符串

{ "name":"John" }
{ "age":30 }
{"employee":{ "name":"Bill Gates", "age":62, "city":"Seattle" }}
{"employees":[ "Bill", "Steve", "David" ]}
{ "sale":true }
{ "middlename":null }

在从 web 服务器接收数据时，数据永远是字符串
<script>
var text = '{"employees":[' +
'{"firstName":"Bill","lastName":"Gates" },' +
'{"firstName":"Steve","lastName":"Jobs" },' +
'{"firstName":"Elon","lastName":"Musk" }]}';

obj = JSON.parse(text);
document.getElementById("demo").innerHTML =
obj.employees[1].firstName + " " + obj.employees[1].lastName;
</script>

var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function()  {
    if (this.readyState == 4 && this.status == 200) {
        myObj =  JSON.parse(this.responseText);
        document.getElementById("demo").innerHTML  = myObj.name;
    }
};
xmlhttp.open("GET", "json_demo.txt", true);
xmlhttp.send();

在对衍生自数组的 JSON 使用 JSON.parse() 后，此方法将返回 JavaScript 数组，而不是 JavaScript 对象
var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function()  {
    if (this.readyState == 4 && this.status == 200) {
        myArr =  JSON.parse(this.responseText);
        document.getElementById("demo").innerHTML  = myArr[0];
    }
};
xmlhttp.open("GET", "json_demo_array.txt", true);
xmlhttp.send();

JSON 中不允许日期对象。如果您需要包含日期，请写为字符串。之后您可以将其转换回日期对象：
var text =  '{ "name":"Bill Gates", "birth":"1955-10-28", "city":"Seattle"}';
var obj = JSON.parse(text);
obj.birth = new Date(obj.birth);（数字，变量名做参数不加引号，字符串要加引号，2019-02-34含有非数字也要加引号）
document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth;

或者您可以已使用 JSON.parse() 函数的第二个参数，被称为 reviver
这个 reviver 参数是函数，在返回值之前，它会检查每个属性
var text =  '{ "name":"Bill Gates", "birth":"1955-10-28", "city":"Seattle"}';
var obj = JSON.parse(text, function (key, value) {
    if  (key == "birth") {
        return new Date(value);
    } else {
         return value;
   }});
document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth;

JSON 中不允许函数，如果您需要包含函数，请把它写作字符串。稍后您可以把它转换回函数：
var text =  '{ "name":"Bill Gates", "age":"function () {return 62;}", "city":"Seattle"}';
var obj = JSON.parse(text);
obj.age = eval("(" + obj.age + ")");
document.getElementById("demo").innerHTML = obj.name + ", " +  obj.age();
您应该避免在 JSON 中使用函数，函数会丢失它们的作用域，而且您还需要使用 eval() 把它们转换回函数

eval函数见谷歌收藏
eval 返回最后一个表达式的值
var x = 5;
var str = "if (x == 5) {console.log('z is 42'); z = 42; x = 420; } else z = 0;";
console.log('x is %i', eval(str)); // z is 42  x is 420 最后一个表达式是x=420，因此返回420

eval 中函数作为字符串被定义需要“（”和“）”作为前缀和后缀
var fctStr1 = 'function a() {}'
var fctStr2 = '(function a() {})'
var fct1 = eval(fctStr1)  // 返回undefined
var fct2 = eval(fctStr2)  // 返回一个函数

在向 web 服务器发送数据时，数据必须是字符串
在 JSON 中，不允许日期对象。JSON.stringify() 函数将把任何日期转换为字符串
在 JSON 中，不允许函数作为对象值。JSON.stringify() 函数将从 JavaScript 对象删除任何函数，包括键(属性)和值
如果您在运行 JSON.stringify() 函数前已将函数转换为字符串，这个环节可以省略

您能够通过使用 for-in 遍历对象属性：
myObj =  { "name":"Bill Gates", "age":62, "car":null };
for (x in myObj) {
   document.getElementById("demo").innerHTML  += x;
}输出的是属性名
在 for-in 循环中，请使用括号标记法(不可以用.属性)来访问属性值：document.getElementById("demo").innerHTML  += myObj[x]; 输出的是属性值
myObj.cars.car2 = "Mercedes Benz";
for (i in myObj.cars) {
  x += myObj.cars[i] + "<br>";
}(x += myObj.cars.i + "<br>";输出的全部是undefined)
for (i in myObj.cars)中x的属性值不可以用.x访问值，必须用[x]访问，其他的可以用.属性  
txt += myObj[x].name + "<br>";是可以的 name是x属性值的name属性

使用 delete 关键词来删除 JSON 对象的属性：delete myObj.cars.car1;

可以通过使用 for-in 循环来访问数组值：
for (i in myObj.cars) {
     x  += myObj.cars[i];
}

通过使用 PHP 函数 json_encode()，PHP 中的对象可转换为 JSON:
<?php
$myObj->name = "Bill Gates";
$myObj->age = 62;
$myObj->city = "Seattle";

$myJSON = json_encode($myObj);

echo $myJSON;//返回$myJSON JSON
?>

在使用 PHP 函数 json_encode() 时，PHP 中的数组也将被转换为 JSON：
<?php
$myArr = array("Bill Gates", "Steve Jobs", "Elon Musk");

$myJSON = json_encode($myArr);

echo $myJSON;
?>
将请求转换为对象，使用 PHP 函数 json_decode()

在向服务器发送数据时，通常最好是使用 HTTP POST 方法。如需使用 POST 方法来发送 AJAX 请求，请指定该方法和正确的头部。
发送到服务器的数据现在必须是 .send() 方法的参数：
xmlhttp.open("POST", "demo_json_db.php", true);
xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xmlhttp.send("x=" + dbParam);

