JavaScript 对网页行为进行编程
JavaScript 的核心 ECMAScript 描述了该语言的语法和基本对象；
DOM 描述了处理网页内容的方法和接口；
BOM 描述了与浏览器进行交互的方法和接口；

尽管 ECMAScript 是一个重要的标准，但它并不是 JavaScript 唯一的部分，当然，也不是唯一被标准化的部分。
实际上，一个完整的 JavaScript 实现是由以下 3 个不同部分组成的：
核心（ECMAScript）
文档对象模型（DOM）
浏览器对象模型（BOM）
ECMAScript 可以为不同种类的宿主环境提供核心的脚本编程能力，因此核心的脚本语言是与任何特定的宿主环境分开进行规定的
ECMAScript 描述了以下内容：语法，类型，语句，关键字，保留字，运算符，对象

DOM（文档对象模型）是 HTML 和 XML 的应用程序接口（API）。DOM 将把整个页面规划成由节点层级构成的文档。HTML 或 XML 页面的每个部分都是一个节点的衍生物
DOM Level 1 是 W3C 于 1998 年 10 月提出的。它由两个模块组成，即 DOM Core 和 DOM HTML。
前者提供了基于 XML 的文档的结构图，以便访问和操作文档的任意部分；后者添加了一些 HTML 专用的对象和方法，从而扩展了 DOM Core

 BOM（浏览器对象模型），可以对浏览器窗口进行访问和操作。使用 BOM，开发者可以移动窗口、改变状态栏中的文本以及执行其他与页面内容不直接相关的动作
 使 BOM 独树一帜且又常常令人怀疑的地方在于，它只是 JavaScript 的一个部分，没有任何相关的标准
 
 type 属性不是必需的。JavaScript 是 HTML 中的默认脚本语言
 脚本可被放置与 HTML 页面的 <body> 或 <head> 部分中，或兼而有之
 把脚本置于 <body> 元素的底部，可改善显示速度，因为脚本编译会拖慢显示
 <script src="myScript.js"></script> 外部脚本不能包含 <script> 标签。
 在外部文件中放置脚本有如下优势：
分离了 HTML 和代码
使 HTML 和 JavaScript 更易于阅读和维护
已缓存的 JavaScript 文件可加速页面加载

输出：
innerHTML 属性定义 HTML 内容
document.getElementById("demo").innerHTML = 5 + 6;
在 HTML 文档完全加载后使用 document.write() 将删除所有已有的 HTML
<!DOCTYPE html>
<html>
<body>
<h1>我的第一张网页</h1>
<p>我的第一个段落</p>
<script>
document.write(5 + 6);
</script>
</body>
</html> （全部显示）我的。。我的。。11
<!DOCTYPE html>
<html>
<body>
<h1>我的第一张网页</h1>
<p>我的第一个段落</p>
<button onclick="document.write(5 + 6)">试一试</button>
</body>
</html>（全部显示我的。。我的。。按钮）点击后只显示11

使用警告框来显示数据window.alert(5 + 6);
使用 console.log() 方法来显示数据。请通过 F12 来激活浏览器控制台，并在菜单中选择“控制台”

JavaScript 语句是由 web 浏览器“执行”的“指令”
JavaScript 会忽略多个空格。您可以向脚本添加空格，以增强可读性
JavaScript 关键词指的是保留的单词。保留词无法用作变量名

JavaScript 语句定义两种类型的值：混合值和变量值。混合值被称为字面量（literal）。变量值被称为变量
"Bill" + " " + "Gates"，计算为 "Bill Gates"（没引号的是变量名，+是拼接符）

JavaScript 关键词用于标识被执行的动作，var 关键词告知浏览器创建新的变量
JavaScript 中不能使用连字符。它是为减法预留的（下划线或驼峰）

单行注释以 // 开头。任何位于 // 与行末之间的文本都会被 JavaScript 忽略（不会执行）
多行注释以 /* 开头，以 */ 结尾。任何位于 /* 和 */ 之间的文本都会被 JavaScript 忽略
多行注释（注释块），注释块常用于官方声明
/*
 下面的代码会改变
 网页中
 id = "myH" 的标题
 以及 id = "myP" 的段落：
*/

JavaScript 变量必须以唯一的名称的标识。这些唯一的名称称为标识符
标识符用于命名变量（以及关键词、函数和标签），首字符必须是字母、下划线（-）或美元符号（$）
JavaScript 标识符对大小写敏感，JavaScript 中的“等于”运算符是 ==
字符串被包围在双引号或单引号中。数值不用引号。如果把数值放在引号中，会被视作文本字符串
声明之后，变量是没有值的。（技术上，它的值是 undefined。）
var carName = "porsche";
document.getElementById("demo").innerHTML = carName; 
以逗号分隔变量var person = "Bill Gates", carName = "porsche", price = 15000;

如果再次声明某个 JavaScript 变量，将不会丢它的值。
var carName = "porsche";
var carName;
在这两条语句执行后，变量 carName 的值仍然是 "porsche"

字符串也可以使用加号，但是字符串将被级联（拼接）
var x = "8" + 3 + 5; 结果是835（一个是字符就会从这个字符开始之后全部当成字符，前面的依然是算数运算）
var x = 3 + 5 + "8";结果是88
z = "Hello" + 7;结果是Hello7 对数字和字符串相加，结果将是字符串！仅一个数字，遵从下面的括号
（第一个引号前的是数值，其后的全是字符）
z = 7 + 8 + "Hello" + 7;结果是15Hello7

系数运算符（%）返回除法的余数
取幂运算符（**）将第一个操作数提升到第二个操作数的幂，x ** y 产生的结果与 Math.pow(x,y) 相同
var x = 5;
var z = x ** 2;          // 结果是 25

当多个运算拥有相同的优先级时（比如加法和减法），对它们的计算是从左向右的

JavaScript 变量能够保存多种数据类型：数值、字符串值、数组、对象等等：
var length = 7;                             // 数字
var lastName = "Gates";                      // 字符串
var cars = ["Porsche", "Volvo", "BMW"];         // 数组
var x = {firstName:"Bill", lastName:"Gates"};    // 对象 

小数点.00不会显示出来
超大或超小的数值可以用科学计数法来写
var y = 123e5;      // 12300000
var z = 123e-5;     // 0.00123
数组索引基于零，这意味着第一个项目是 [0]，第二个项目是 [1]，以此类推

JavaScript 对象用花括号来书写。对象属性是 name:value 对，由逗号分隔
var person = {firstName:"Bill", lastName:"Gates", age:62, eyeColor:"blue"};
上例中的对象（person）有四个属性：firstName、lastName、age 以及 eyeColor

typeof 运算符返回变量或表达式的类型
typeof ""                  // 返回 "string"
typeof "Bill"              // 返回 "string"
typeof 0                   // 返回 "number"
typeof 314                 // 返回 "number"
typeof 运算符对数组返回 "object"，因为在 JavaScript 中数组属于对象
JavaScript 中，没有值的变量，其值是 undefined。typeof 也返回 undefined
空值与 undefined 不是一回事。空的字符串变量既有值也有类型  var car = "";                // 值是 ""，类型是 "string"
在 JavaScript 中，null 是 "nothing"。它被看做不存在的事物。不幸的是，在 JavaScript 中，null 的数据类型是对象
var person = null;           // 值是 null，但是类型仍然是对象（object)
可以通过设置值为 null 清空对象,也可以通过设置值为 undefined 清空对象
Undefined 与 null 的值相等，但类型不相等
null === undefined            // false(类型和值都等）
null == undefined             // true（值）

原始数据：原始数据值是一种没有额外属性和方法的单一简单数据值
typeof true                // 返回 "boolean"
string，number，undefined，boolean
复杂数据：function，object
typeof 运算符把对象、数组或 null 返回 object
typeof {name:'Bill', age:62} // 返回 "object"
typeof function myFunc(){}   // 返回 "function"

() 运算符调用函数,toCelsius 引用的是函数对象，而 toCelsius() 引用的是函数结果
不使用 () 访问函数将返回函数声明而不是函数结果：function toCelsius(f) { return (5/9) * (f-32); }
document.getElementById("demo").innerHTML = toCelsius;

对象也是变量。但是对象包含很多值,（JavaScript 对象中的）名称:值对被称为属性
方法以函数定义被存储在属性中:
var person = {
  firstName: "Bill",
  lastName : "Gates",
  id       : 678,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

在函数定义中，this 引用该函数的“拥有者”。
在上面的例子中，this 指的是“拥有” fullName 函数的 person 对象。换言之，this.firstName 的意思是 this 对象的 firstName 属性
能够以两种方式访问属性：objectName.propertyName或者objectName["propertyName"]
person.lastName;或者person["lastName"];
能够通过如下语法访问对象方法：objectName.methodName()； name = person.fullName();
不使用 () 访问 fullName 方法，则将返回函数定义
方法实际上是以属性值的形式存储的函数定义

如果通过关键词 "new" 来声明 JavaScript 变量，则该变量会被创建为对象：
var x = new String();        // 把 x 声明为 String 对象
var y = new Number();        // 把 y 声明为 Number 对象
var z = new Boolean();       //	把 z 声明为 Boolean 对象
请避免字符串、数值或逻辑对象。他们会增加代码的复杂性并降低执行速度

字符串长度，内建属性 length 可返回字符串的长度
var y = "中国是瓷器的故乡，因此 china 与"China（中国）"同名。"该字符串将被切为 "中国是瓷器的故乡，因此 china 与"。
避免此问题的解决方法是，使用 \ 转义字符：var x = "中国是瓷器的故乡，因此 china 与\"China（中国）\"同名。"
\b	退格键
\f	换页
\n	新行
\r	回车
\t	水平制表符
\v	垂直制表符  这六个转义字符最初设计用于控制打字机、电传打字机和传真机。它们在 HTML 中没有任何意义
\'	'	单引号
\"	"	双引号
\\	\	反斜杠 有意义就这三个

同一个字符串内不能换行：
document.getElementById("demo").innerHTML = "Hello 
Kitty!";  错误
document.getElementById("demo").innerHTML =
"Hello Kitty.";  正确
可以在字符串中换行，通过一个反斜杠即可：
document.getElementById("demo").innerHTML = "Hello \
Kitty!";
对长字符串换行的最安全做法（但是有点慢）是使用字符串加法：
document.getElementById("demo").innerHTML = "Hello" + 
"Kitty!";
不能通过反斜杠对代码行进行换行：
document.getElementById("demo").innerHTML = \ 
"Hello Kitty!"; 错误

字符串也可通过关键词 new 定义为对象：var firstName = new String("Bill")
两个对象无法比较，都会返回false：
var x = new String("Bill");             
var y = new String("Bill");
// (x ==/=== y) 为 false，因为 x 和 y 是不同的对象

通过 JavaScript，方法和属性也可用于原始值，因为在执行方法和属性时 JavaScript 将原始值视为对象
length 属性返回字符串的长度：var sln = txt.length;
字符串方法：
indexOf() 方法返回字符串中指定文本首次出现的索引（位置）：var pos = str.indexOf("China");（C刚出现的位置）
JavaScript 从零计算位置。0 是字符串中的第一个位置，1 是第二个，2 是第三个 ...
lastIndexOf() 方法返回指定文本在字符串中最后一次出现的索引
var str = "The full name of China is the People's Republic of China.";
var pos = str.lastIndexOf("China");（最后一个China的C出现的位置）
如果未找到文本， indexOf() 和 lastIndexOf() 均返回 -1
两种方法都接受作为检索起始位置的第二个参数
lastIndexOf() 方法向后进行检索（从尾到头），这意味着：假如第二个参数是 50，则从位置 50 开始检索，直到字符串的起点，位置 50 指的是从开头算起的位置 50
var pos = str.lastIndexOf("China", 50); 前面的最后一个（也就是从后往前第一个）

indexOf() 与 search()，是相等的
search() 方法无法设置第二个开始位置参数
indexOf() 方法无法设置更强大的搜索值（正则表达式）

slice() 提取字符串的某个部分并在新字符串中返回被提取的部分
该方法设置两个参数：起始索引（开始位置），终止索引（结束位置）
如果某个参数为负，则从字符串的结尾开始计数（最后一个是-1，倒数第二个是-2，slice(-13,-1),从-2开始到-13，共12个）
slice(2，7)从3开始到7
如果省略第二个参数，则该方法将裁剪字符串的剩余部分
var res = str.slice(7);从8到最后
var res = str.slice(-13);从-13到-1
都是从左到右到最后一个字符

substring() 类似于 slice()。不同之处在于 substring() 无法接受负的索引
substr() 类似于 slice()。不同之处在于第二个参数规定被提取部分的长度，如果省略第二个参数，则该 substr() 将裁剪字符串的剩余部分
第二个参数不能为负，因为它定义的是长度
规则同slice()

replace() 方法用另一个值替换在字符串中指定的值，replace() 方法不会改变调用它的字符串。它返回的是新字符串，replace() 对大小写敏感
默认地，replace() 只替换首个匹配（从左到右）
var n = str.replace("Microsoft", "W3School"); W3School替换Microsoft
如需执行大小写不敏感的替换，请使用正则表达式 /i（大小写不敏感）：var n = str.replace(/MICROSOFT/i, "W3School");（字母对就行）
如需替换所有匹配，请使用正则表达式的 g 标志（用于全局搜索）：var n = str.replace(/Microsoft/g, "W3School");

通过 toUpperCase() 把字符串转换为大写：var text2 = text1.toUpperCase();
通过 toLowerCase() 把字符串转换为小写

concat() 连接两个或多个字符串，下面两行是等效的：
var text = "Hello" + " " + "World!";
var text = "Hello".concat(" ","World!");
所有字符串方法都会返回新字符串。它们不会修改原始字符串

trim() 方法删除字符串两端的空白符：var str = "       Hello World!        ";  alert(str.trim());
charAt() 方法返回字符串中指定下标（位置）的字符串:(从0开始，找不到返回空字符串）
var str = "HELLO WORLD";
str.charAt(0);            // 返回 H
charCodeAt() 方法返回字符串中指定索引的字符 unicode 编码：
var str = "HELLO WORLD";
str.charCodeAt(0);         // 返回 72

对字符串的属性访问 [ ]：
var str = "HELLO WORLD";
str[0];                   // 返回 H
找不到字符，[ ] 返回 undefined
它是只读的。str[0] = "A" 不会产生错误（但也不会工作！）

可以通过 split() 将字符串转换为数组：
var txt = "a,b,c,d,e";   // 字符串
txt.split(",");          // 用逗号分隔 数组元素是 a b c d e ,a[0]是
txt.split(" ");          // 用空格分隔 数组元素是 a,b,c,d,e
txt.split("|");          // 用竖线分隔
（遇到分隔符算一个元素）
var str = "a,b,c,d,e,f";
var arr = str.split(",");  数组元素是 a b c d e f ,arr[0]是a
var arr = str.split(" ");  数组元素是 a,b,c,d,e,f ,arr[0]是a,b,c,d,e,f(只有一个元素）
如果省略分隔符split()，则arr[0]等于全部
如果分隔符是 ""，则一个字符是一个数组元素

整数（不使用指数或科学计数法）会被精确到 15 位（16位的全9就会舍入成1加16个0，其他的照常显示）
小数的最大数是 17 位，但是浮点的算数并不总是 100% 精准

在所有数字运算中，JavaScript 会尝试将字符串转换为数字：
var x = "100";
var y = "10";
var z = x / y;       // z 将是 10
（加法考虑级联，其他的数字运算）

NaN - 非数值，NaN 属于 JavaScript 保留词，指示某个数不是合法数。尝试用一个非数字字符串进行除法会得到 NaN（Not a Number）：
var x = 100 / "Apple";  // x 将是 NaN（Not a Number）
不过，假如字符串包含数值，则结果将是数：var x = 100 / "10";     // x 将是 10
使用全局 JavaScript 函数 isNaN() 来确定某个值是否是数：var x = 100 / "Apple";
isNaN(x);               // 返回 true，因为 x 不是数
假如您在数学运算中使用了 NaN，则结果也将是 NaN
NaN 是数，typeof NaN 返回 number
和数字运算结果全为NaN, 和字符级联

Infinity （或 -Infinity）是 JavaScript 在计算数时超出最大可能数范围时返回的值
除以 0（零）也会生成 Infinity
var x =  2 / 0;          // x 将是 Infinity
var y = -2 / 0;          // y 将是 -Infinity
Infinity 是数：typeOf Infinity 返回 number

JavaScript 会把前缀为 0x 的数值常量解释为十六进制
绝不要用前导零写数字（比如 07）。一些 JavaScript 版本会把带有前导零的数解释为八进制
toString() 方法把数输出为十六进制、八进制或二进制
var myNumber = 128;
myNumber.toString(16);     // 返回 80
myNumber.toString(8);      // 返回 200
myNumber.toString(2);      // 返回 10000000

通过关键词 new 定义为对象：var y = new Number(123)
var x = 123;// typeof x 返回 number
var y = new Number(123);// typeof y 返回 object
数字方法：
toString() 以字符串返回数值。所有数字方法可用于任意类型的数字（字面量、变量或表达式）
var x = 123;
x.toString();            // 从变量 x 返回 123
(123).toString();        // 从文本 123 返回 123
(100 + 23).toString();   // 从表达式 100 + 23 返回 123

toExponential() 返回字符串值，它包含已被四舍五入并使用指数计数法的数字。参数定义小数点后的字符数，该参数是可选的。
如果您没有设置它，JavaScript 不会对数字进行舍入

toFixed() 返回字符串值，它包含了指定位数小数的数字（四舍五入） toFixed(2) 非常适合处理金钱
toPrecision() 返回字符串值，它包含了指定长度的数字（四舍五入）整数加小数

valueOf() 以数值返回数值 数字可以是原始值（typeof = number）或对象（typeof = object）(to String()也一样)
在 JavaScript 内部使用 valueOf() 方法可将 Number 对象转换为原始值

这三种 JavaScript 方法可用于将变量转换为数字：
Number() 方法
parseInt() 方法
parseFloat() 方法
这些方法并非数字方法，而是全局 JavaScript 方法
Number() 可用于把 JavaScript 变量转换为数值，如果无法转换数字，则返回 NaN
x = "10 20"
Number(x);        // 返回 NaN
x = true;
Number(x);        // 返回 1
Number("John");   //返回NaN
Number() 还可以把日期转换为数字：Number(new Date("2019-04-15"));    // 返回 1506729600000
Number() 方法返回 1970 年 1 月 1 日至今的毫秒数

parseInt() 解析一段字符串并返回数值。允许空格,允许逗号。只返回首个数字：
parseInt("10.33");      // 返回 10
parseInt("10 20 30");   // 返回 10
parseInt("10 years");   // 返回 10
parseInt("years 10");   // 返回 NaN
如果无法转换为数值，则返回 NaN (Not a Number)

数值属性
MAX_VALUE 返回 JavaScript 中可能的最大数字 var x = Number.MAX_VALUE;
MIN_VALUE 返回 JavaScript 中可能的最小数字
var x = Number.POSITIVE_INFINITY;  返回Infinity
var x = Number.NEGATIVE_INFINITY;  返回-Infinity
var x = Number.NaN; 返回NaN  尝试使用非数字字符串进行算术运算（- * / %等）将导致 NaN（非数字）

数字属性不可用于变量
数字属性属于名为 number 的 JavaScript 数字对象包装器。
这些属性只能作为 Number.MAX_VALUE 访问。
使用 myNumber.MAX_VALUE，其中 myNumber 是变量、表达式或值，将返回 undefined

数组：
不要最后一个元素之后写逗号（比如 "BMW",）。可能存在跨浏览器兼容性问题
var cars = ["Saab", "Volvo", "BMW"];
var cars = new Array("Saab", "Volvo", "BMW");
出于简洁、可读性和执行速度的考虑，请使用第一种方法（数组文本方法）

访问完整数组
通过 JavaScript，可通过引用数组名来访问完整数组：
var cars = ["Saab", "Volvo", "BMW"];
document.getElementById("demo").innerHTML = cars; 

数组是一种特殊类型的对象。在 JavaScript 中对数组使用 typeof 运算符会返回 "object"
数组元素可以是对象
向数组添加新元素的最佳方法是使用 push() 方法：var fruits = ["Banana", "Orange", "Apple", "Mango"];  fruits.push("Lemon"); 
也可以使用 length 属性向数组添加新元素：fruits[fruits.length] = "Lemon";     // 向 fruits 添加一个新元素 (Lemon)

添加最高索引的元素可在数组中创建未定义的“洞”：var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[6] = "Lemon";                 // 向 fruits 添加一个新元素 (Lemon)
4，5都是undefined

很多编程元素支持命名索引的数组。具有命名索引的数组被称为关联数组（或散列）。
JavaScript 不支持命名索引的数组。在 JavaScript 中，数组只能使用数字索引
使用命名索引，JavaScript 会把数组重定义为标准对象。之后，所有数组的方法和属性将产生非正确结果(没有定义数组，而是定义了很多对象）
var person = [];
person["firstName"] = "Bill";
person["lastName"] = "Gates";
person["age"] = 62;
var x = person.length;         // person.length 将返回 0
var y = person[0];              // person[0] 将返回 undefined

在 JavaScript 中，数组使用数字索引。在 JavaScript 中，对象使用命名索引。数组是特殊类型的对象，具有数字索引

没有必要使用 JavaScript 的内建数组构造器 new Array()，请使用 [] 取而代之！
new 关键词只会使代码复杂化。它还会产生某些不可预期的结果：var points = new Array(40, 100);  // 创建包含两个元素的数组（40 和 100）
假如删除其中一个元素会怎么样？var points = new Array(40);       // 创建包含 40 个未定义元素的数组！！！

如何识别数组：
document.getElementById("demo").innerHTML = Array.isArray(fruits);    // 返回 true
创建您自己的 isArray() 函数以解决此问题：
function isArray(x) {
    return x.constructor.toString().indexOf("Array") > -1;
}
假如对象原型包含单词 "Array" 则返回 true
假如对象由给定的构造器创建，则 instanceof 运算符返回 true：
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits instanceof Array;     // 返回 true

数组方法：
toString() 把数组转换为数组值（逗号分隔）的字符串
document.getElementById("demo").innerHTML = fruits.toString(); 
join() 方法也可将所有数组元素结合为一个字符串。它的行为类似 toString()，但是您还可以规定分隔符：
默认是， document.getElementById("demo").innerHTML = fruits.join(" * "); 

pop() 方法从数组中删除最后一个元素，pop() 方法返回“被弹出”的值
document.getElementById("demo2").innerHTML = fruits.pop(); 返回的是弹出的值
push() 方法（在数组结尾处）向数组添加一个新的元素，push() 方法返回新数组的长度
shift() 方法会删除首个数组元素，并把所有其他元素“位移”到更低的索引，shift() 方法返回被“位移出”的字符串
unshift() 方法（在开头）向数组添加新元素，并“反向位移”旧元素，unshift() 方法返回新数组的长度

可以使用 JavaScript delete 运算符来删除 delete fruits[0];           // 把 fruits 中的首个元素改为 undefined
使用 delete 会在数组留下未定义的空洞。请使用 pop() 或 shift() 取而代之

splice() 方法可用于向数组添加新项：fruits.splice(2, 0, "Lemon", "Kiwi");
第一个参数（2）定义了应添加新元素的位置（拼接）
第二个参数（0）定义应删除多少元素（插入之后后面的元素，不留“空洞”的情况下移除元素）
其余参数（“Lemon”，“Kiwi”）定义要添加的新元素
splice() 方法返回一个包含已删除项的数组（由被删除的项组成的数组）

concat() 方法通过合并（连接）现有数组来创建一个新数组
concat() 方法不会更改现有数组。它总是返回一个新数组。concat() 方法可以使用任意数量的数组参数
var myChildren = arr1.concat(arr2, arr3);   // 将arr1、arr2 与 arr3 连接在一起

slice() 方法用数组的某个片段切出新数组（一个元素提取出来）
slice() 方法创建新数组。它不会从源数组中删除任何元素
slice() 可接受两个参数，比如 (1, 3)。该方法会从开始参数选取元素，直到结束参数（不包括）为止（1到2）
如果结束参数被省略，则 slice() 会切出数组的剩余部分（一个元素提取出来）

如果需要原始值，则 JavaScript 会自动把数组转换为字符串
document.getElementById("demo").innerHTML = fruits; 
结果和toString()相同

所有 JavaScript 对象都拥有 toString() 方法

sort() 方法以字母顺序对数组进行排序（A到Z）,fruits.sort();            // 对 fruits 中的元素进行排序
reverse() 方法反转数组中的元素。可以使用它以降序对数组进行排序

如果数字按照字符串来排序，则 "25" 大于 "100"，因为 "2" 大于 "1"。
正因如此，sort() 方法在对数值排序时会产生不正确的结果
通过一个比值函数来修正此问题
当 sort() 函数比较两个值时，会将值发送到比较函数，并根据所返回的值（负、零或正值）对这些值进行排序
当比较 40 和 100 时，sort() 方法会调用比较函数 function(40,100)。该函数计算 40-100，然后返回 -60（负值）。排序函数将把 40 排序为比 100 更低的值
points.sort(function(a, b){return a - b}); 升序
points.sort(function(a, b){return b - a}); 降序

以随机顺序排序数组
var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return 0.5 - Math.random()});

JavaScript 不提供查找数组中最大或最小数组值的内建函数。不过，在对数组进行排序之后，您能够使用索引来获得最高或最低值（效率极低）
使用 Math.max.apply 来查找数组中的最高值：Math.max.apply(null, arr);
使用 Math.min.apply 来查找数组中的最低值：Math.min.apply(null, arr);
Math.max方法可以求出给定参数中最大的数，但如果是数组，就不能这样调用了。此时就用到了apply方法：
XXX.apply是一个调用函数的方法，其参数为：apply(Function, Args)，Function为要调用的方法，Args是参数列表，当Function为null时，默认为上文，
即Math.max.apply(null, arr)可认为是apply(Math.max, arr)
Math.min.apply([1, 2, 3]) 等于 Math.min(1, 2, 3)

即使对象拥有不同数据类型的属性，sort() 方法仍可用于对数组进行排序。解决方法是通过比较函数来对比属性值：
var cars = [{type:"Volvo", year:2016},{type:"Saab", year:2001},{type:"BMW", year:2010}];
cars.sort(function(a, b){return a.year - b.year});
比较字符串属性: 
cars.sort(function(a, b){
	  var x = a.type.toLowerCase();
	  var y = b.type.toLowerCase();
	  if (x < y) {return -1;}
	  if (x > y) {return 1;}
	  return 0;
});

forEach() 方法为每个数组元素调用一次函数（回调函数）:
numbers.forEach(myFunction);
function myFunction(value, index, array) {
  txt = txt + value + "<br>"; 
}
该函数接受 3 个参数：项目值|项目索引|数组本身

map() 方法通过对每个数组元素执行函数来创建新数组。map() 方法不会对没有值的数组元素执行函数。map() 方法不会更改原始数组
该函数接受 3 个参数：项目值|项目索引|数组本身
var numbers2 = numbers1.map(myFunction);
function myFunction(value, index, array) {
  return value * 2;
}

filter() 方法创建一个包含通过测试的数组元素的新数组
该函数接受 3 个参数：项目值|项目索引|数组本身
var over18 = numbers.filter(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}

reduce() 方法在每个数组元素上运行函数，以生成（减少它）单个值。
reduce() 方法在数组中从左到右工作。另请参见 reduceRight（）。reduce() 方法不会减少原始数组
该函数接受 4 个参数：总数（初始值/先前返回的值）|项目值|项目索引|数组本身
确定数组中所有数字的总和：
var numbers1 = [45, 4, 9, 16, 25];
var sum = numbers1.reduce(myFunction);
function myFunction(total, value, index, array) {
  return total + value;
}
reduce() 方法能够接受一个初始值：var sum = numbers1.reduce(myFunction, 100);(没写默认为0(total)）

reduceRight()同reduce()不过从右往左，即从最后一项开始

every() 方法检查所有数组值是否通过测试
该函数接受 3 个参数：项目值|项目索引|数组本身
检查所有数组值是否大于 18：
var numbers = [45, 4, 9, 16, 25];
var allOver18 = numbers.every(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}结果返回false

some() 方法检查某些数组值是否通过了测试
这个例子检查某些数组值是否大于 18（有值大于18就可以）：
var numbers = [45, 4, 9, 16, 25];
var someOver18 = numbers.some(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}返回true

indexOf() 方法在数组中搜索元素值并返回其位置
注释：第一个项目的位置是 0，第二个项目的位置是 1，以此类推
var a = fruits.indexOf("Apple");
array.indexOf(item, start)
item	必需。要检索的项目。
start	可选。从哪里开始搜索。负值将从结尾开始的给定位置开始，并搜索到结尾（从2开始2有的话就是2)
开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，
即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，
查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0
从当前位置向后找，找到就返回索引（0，1，2，3...)，数组结束就停止，不循环
如果未找到项目，Array.indexOf() 返回 -1。如果项目多次出现，则返回第一次出现的位置
array.lastIndexOf(item, start)(从后往前）
item	必需。要检索的项目。
start	可选。从哪里开始搜索。负值将从结尾开始的给定位置开始，并搜索到开头

find() 方法返回通过测试函数的第一个数组元素的值
该函数接受 3 个参数：项目值|项目索引|数组本身
findIndex() 方法返回通过测试函数的第一个数组元素的索引
该函数接受 3 个参数：项目值|项目索引|数组本身

new Date(year, month, ...) 用指定日期和时间创建新的日期对象
7个数字分别指定年、月、日、小时、分钟、秒和毫秒（按此顺序）（其他省略的默认是默认值）
您不能省略月份。如果只提供一个参数，则将其视为毫秒
一个参数会被解释为：new Date(milliseconds)。
Thu Jan 01 1970 08:00:02 GMT+0800 (中国标准时间)
显示的日期是起始日期距今2018毫秒（默认是1970年）

一位和两位数年份将被解释为 19xx 年：var d = new Date(99, 11, 24); var d = new Date(9, 11, 24);
new Date(dateString) 从日期字符串创建一个新的日期对象：var d = new Date("October 13, 2014 11:13:00");
JavaScript 将日期存储为自 1970 年 1 月 1 日 00:00:00 UTC（协调世界时）以来的毫秒数。零时间是 1970 年 1 月 1 日 00:00:00 UTC
1970 年 1 月 1 日减去 100 000 000 000 毫秒大约是 1966 年 10 月 31 日：var d = new Date(-100000000000);
一天（24 小时）是 86 400 000 毫秒

JavaScript（默认情况下）将以全文本字符串格式输出日期：Wed Mar 25 2015 08:00:00 GMT+0800 (中国标准时间)
在 HTML 中显示日期对象时，会使用 toString() 方法自动转换为字符串
toUTCString() 方法将日期转换为 UTC 字符串（一种日期显示标准）
toDateString() 方法将日期转换为更易读的格式：document.getElementById("demo").innerHTML = d.toDateString();

四种 JavaScript 日期输入格式：
ISO 日期	"2018-02-19" （国际标准）
短日期	"02/19/2018" 或者 "2018/02/19"
长日期	"Feb 19 2018" 或者 "19 Feb 2019"
完整日期	"Monday February 25 2015"
ISO 格式遵守 JavaScript 中的严格标准

ISO 8601 是表现日期和时间的国际标准
var d = new Date("2018-02-19"); 计算的日期相对于您的时区。根据您的时区，上面的结果将在 2 月 18 日至 2 月 19 日之间变化
写日期也可以添加时、分和秒 (YYYY-MM-DDTHH:MM:SS)：var d = new Date("2018-02-19T12:00:00");日期和时间通过大写字母 T 来分隔
UTC 时间通过大写字母 Z 来定义，希望修改相对于 UTC 的时间，请删除 Z 并用 +HH:MM 或 -HH:MM 代替
var d = new Date("2018-02-19T12:00:00-08:30");
UTC（Universal Time Coordinated）等同于 GMT（格林威治时间）

短日期：var d = new Date("02/19/2018");
某些浏览器中，不带前导零的月或其会产生错误
长日期：var d = new Date("Feb 19 2018"); 月和天能够以任意顺序出现，var d = new Date("19 Feb 2018");
月能够以全称 (January) 或缩写 (Jan) 来写，逗号会被忽略，且对大小写不敏感
完整日期：var d = new Date("Mon Feb 19 2018 06:55:23 GMT+0100 (W. Europe Standard Time)");
JavaScript 会忽略日期名称和时间括号中的错误

getTime() 方法返回自 1970 年 1 月 1 日以来的毫秒数
getFullYear() 方法以四位数字形式返回日期年份
var d = new Date();
document.getElementById("demo").innerHTML = d.getFullYear();
getMonth() 以数字（0-11）返回日期的月份：在 JavaScript 中，第一个月（1 月）是月号 0，因此 12 月返回月号 11
使用名称数组，并使用 getMonth() 将月份作为名称返回：
var d = new Date();
var months = 
            [
            "January", "February", "March", "April", "May", "June", 
            "July", "August", "September", "October", "November", "December"
            ];
document.getElementById("demo").innerHTML = months[d.getMonth()];

getDate() 方法以数字（1-31）返回日期的日
getHours() 方法以数字（0-23）返回日期的小时数
getMinutes() 方法以数字（0-59）返回日期的分钟数
getSeconds() 方法以数字（0-59）返回日期的秒数
getMilliseconds() 方法以数字（0-999）返回日期的毫秒数
getDay() 方法以数字（0-6）返回日期的星期名（weekday）（方法同getMonth())
UTC 日期方法用于处理 UTC 日期（通用时区日期，Univeral Time Zone dates）:
getUTCDate()	等于 getDate()，但返回 UTC 日期 以此类推

setFullYear() 方法设置日期对象的年份：
var d = new Date();
d.setFullYear(2020);
setFullYear() 方法可以选择设置月和日：d.setFullYear(2020, 11, 3);

setMonth() 方法设置日期对象的月份（0-11）

setDate() 方法设置日期对象的日（1-31）
setDate() 方法也可用于将天数添加到日期
d.setDate(d.getDate() + 50); 如果添加天数，切换月份或年份，则更改将由 Date 对象自动处理

setHours() 方法设置日期对象的小时（0-23）
setMinutes() 方法设置日期对象的分钟（0-59）
setSeconds() 方法设置日期对象的秒数（0-59）

someday.setFullYear(2049, 0, 16);2049 年 1 月 16 日
if (someday > today) {
  text = "今天在 2049 年 1 月 16 日之前";
} 
JavaScript 从 0 到 11 计数月份。1 月是 0。12 月是 11

Math.PI;            // 返回 3.141592653589793
Math.round(x) 的返回值是 x 四舍五入为最接近的整数
Math.pow(x, y) 的返回值是 x 的 y 次幂
Math.sqrt(x) 返回 x 的平方根
Math.abs(x) 返回 x 的绝对（正）值
Math.ceil(x) 的返回值是 x 上舍入最接近的整数（上取整）：Math.ceil(6.4);     // 返回 7
Math.floor(x) 的返回值是 x 下舍入最接近的整数（下取整）
Math.sin(x) 返回角 x（以弧度计）的正弦（介于 -1 与 1 之间的值），希望使用角度替代弧度，则需要将角度转换为弧度
Math.sin(90 * Math.PI / 180);     // 返回 1（90 度的正弦）
Math.cos(x) 返回角 x（以弧度计）的余弦（介于 -1 与 1 之间的值）
Math.min() 和 Math.max() 可用于查找参数列表中的最低或最高值
Math.random() 返回介于 0（包括） 与 1（不包括） 之间的随机数

Math.E          // 返回欧拉指数（Euler's number）
Math.PI         // 返回圆周率（PI）
Math.SQRT2      // 返回 2 的平方根
Math.SQRT1_2    // 返回 1/2 的平方根
Math.LN2        // 返回 2 的自然对数
Math.LN10       // 返回 10 的自然对数
Math.LOG2E      // 返回以 2 为底的 e 的对数（约等于 1.414）
Math.LOG10E     // 返回以 10 为底的 e 的对数（约等于0.434）

与其他全局对象不同，Math对象没有构造函数(new后面的)。方法和属性是静态的
可以在不首先创建Math对象的情况下使用所有方法和属性（常量）

acos(x)	返回 x 的反余弦值，以弧度计
asin(x)	返回 x 的反正弦值，以弧度计
atan(x)	以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。
atan2(y,x)	返回从 x 轴到点 (x,y) 的角度
exp(x)	返回 Ex 的值
log(x)	返回 x 的自然对数（底为e）
tan(x)	返回角的正切

Math.floor(Math.random() * 10);		// 返回 0 至 9 之间的数
Math.floor(Math.random() * 11);		// 返回 0 至 10 之间的数
Math.floor(Math.random() * 100);	// 返回 0 至 99 之间的数
Math.floor(Math.random() * 10) + 1;	// 返回 1 至 10 之间的数
始终返回介于 min（包括）和 max（不包括）之间的随机数:Math.floor(Math.random() * (max - min) ) + min;
始终返回介于 min 和 max（都包括）之间的随机数:Math.floor(Math.random() * (max - min + 1) ) + min;

Boolean() 函数来确定表达式（或变量）是否为真
Boolean(10 > 9)        // 返回 true
具有“真实”值的即为 True
不具有“真实”值的即为 False 0,-0,""(空值),undefined,null,false,NaN
