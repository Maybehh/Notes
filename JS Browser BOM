所有浏览器都支持 window 对象。它代表浏览器的窗口。
所有全局 JavaScript 对象，函数和变量自动成为 window 对象的成员
全局变量是 window 对象的属性。全局函数是 window 对象的方法
甚至（HTML DOM 的）document 对象也是 window 对象属性：window.document.getElementById("header");
等同于：document.getElementById("header");

两个属性可用用于确定浏览器窗口的尺寸。这两个属性都以像素返回尺寸：
window.innerHeight - 浏览器窗口的内高度（以像素计）
window.innerWidth - 浏览器窗口的内宽度（以像素计）
浏览器窗口（浏览器视口）不包括工具栏和滚动条。
对于 Internet Explorer 8, 7, 6, 5：document.documentElement.clientHeight document.documentElement.clientWidth
或document.body.clientHeight document.body.clientWidth
一个实用的 JavaScript 解决方案（包括所有浏览器）：
var w = window.innerWidth
|| document.documentElement.clientWidth
|| document.body.clientWidth;
var h = window.innerHeight
|| document.documentElement.clientHeight
|| document.body.clientHeight; 

window.open() - 打开新窗口
window.close() - 关闭当前窗口
window.moveTo() -移动当前窗口
window.resizeTo() -重新调整当前窗口

window.screen 对象包含用户屏幕的信息
window.screen 对象不带 window 前缀也可以写：
screen.width
screen.height
screen.availWidth
screen.availHeight
screen.colorDepth
screen.pixelDepth

screen.width 属性返回以像素计的访问者屏幕宽度
screen.height 属性返回以像素计的访问者屏幕的高度
screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去诸如窗口工具条之类的界面特征
screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去诸如窗口工具条之类的界面特征

screen.colorDepth 属性返回用于显示一种颜色的比特数
所有现代计算机都使用 24 位或 32 位硬件的色彩分辨率：
24 bits =16,777,216 种不同的 "True Colors"
32 bits = 4,294,967,296 中不同的 "Deep Colors"
document.getElementById("demo").innerHTML = "Screen Color Depth: " + screen.colorDepth; 返回24之类的数字显示以位计的屏幕色彩深度
HTML 中使用的 #rrggbb (rgb) 值代表 "True Colors" （16,777,216 中不同的颜色）

screen.pixelDepth 属性返回屏幕的像素深度，对于现代计算机，颜色深度和像素深度是相等的
显示以位计的屏幕像素深度：document.getElementById("demo").innerHTML = "Screen Pixel Depth: " + screen.pixelDepth;
结果将是：Screen Pixel Depth: 24

window.location 对象可用于获取当前页面地址（URL）并把浏览器重定向到新页面
window.location 对象可不带 window 前缀书写。
window.location.href 返回当前页面的 href (URL)
window.location.hostname 属性返回（当前页面的）因特网主机的名称（网站名）
window.location.pathname 返回当前页面的路径或文件名
window.location.protocol 返回使用的 web 协议（http: 或 https:）

window.location.assign()方法加载新文档
function newDoc() {
    window.location.assign("https://www.w3school.com.cn")
 }

window.location.port 属性返回（当前页面的）互联网主机端口的编号
注释：如果端口号是默认值（对于 http 为 80，对于 https 为 443），则大多数浏览器将显示 0 或不显示

window.history 对象包含浏览器历史，为了保护用户的隐私，JavaScript 访问此对象存在限制
history.back() 方法加载历史列表中前一个 URL，等同于在浏览器点击后退按钮
history forward() 方法加载历史列表中下一个 URL。这等同于在浏览器中点击前进按钮

window.navigator 对象包含有关访问者的信息
window.navigator 对象可以不带 window 前缀来写
navigator.appName
navigator.appCodeName
navigator.platform

cookieEnabled 属性返回 true，如果 cookie 已启用，否则返回 false
document.getElementById("demo").innerHTML = "cookiesEnabled is " + navigator.cookieEnabled;

appName 属性返回浏览器的应用程序名称：Netscape” 是 IE11、Chrome、Firefox 和 Safari 的应用程序名称的统称
appCodeName 属性返回浏览器的应用程序代码名称：Mozilla” 是 Chrome、Firefox、IE、Safari 和 Opera 的应用程序代码名称
product 属性返回浏览器引擎的产品名称：大多数浏览器都将 “Gecko” 作为产品名称返回！
appVersion 属性返回有关浏览器的版本信息
userAgent 属性返回由浏览器发送到服务器的用户代理报头（user-agent header）
platform 属性返回浏览器平台（操作系统）navigator.platform 是：Win32
language 属性返回浏览器语言
onLine 属性返回 true，假如浏览器在线（是否有网络连接，有可能连的是虚拟网卡）
javaEnabled() 方法返回 true，如果 Java 已启用

来自 navigator 对象的信息通常是误导性的，不应该用于检测浏览器版本，因为：
不同浏览器能够使用相同名称
导航数据可被浏览器拥有者更改
某些浏览器会错误标识自身以绕过站点测试
浏览器无法报告发布晚于浏览器的新操作系统

JavaScript 有三种类型的弹出框：警告框、确认框和提示框

如果要确保信息传递给用户，通常会使用警告框。当警告框弹出时，用户将需要单击“确定”来继续：window.alert("sometext");
window.alert() 方法可以不带 window 前缀来写：alert("我是一个警告框！");

如果您希望用户验证或接受某个东西，则通常使用“确认”框。
当确认框弹出时，用户将不得不单击“确定”或“取消”来继续进行。如果用户单击“确定”，该框返回 true。如果用户单击“取消”，该框返回 false。
window.confirm("sometext");    window.confirm() 方法可以不带 window 前缀来编写：confirm("请按按钮");

如果您希望用户在进入页面前输入值，通常会使用提示框。当提示框弹出时，用户将不得不输入值后单击“确定”或点击“取消”来继续进行。（输入框在提示框内）
如果用户单击“确定”，该框返回输入值。如果用户单击“取消”，该框返回 NULL
window.prompt("sometext"（提示文本）,"defaultText"（输入框的默认输入值）);   
window.prompt() 方法可以不带 window 前缀来编写：prompt("请输入您的姓名", "比尔盖茨");
输入框的默认值只有一行，多的不显示，也不折行

如需在弹出框中显示折行，请在反斜杠后面加一个字符 n：alert("Hello\nHow are you?");
alert, confirm, prompt中的提示文本都会折行，但prompt的输入框的默认值不会折行，会在文本中的换行处多一个符号(换行符）

JavaScript 可以在时间间隔内执行。这就是所谓的定时事件（ Timing Events）
setTimeout(function, milliseconds)在等待指定的毫秒数后执行函数。
setInterval(function, milliseconds)等同于 setTimeout()，但持续重复执行该函数
setTimeout() 和 setInterval() 都属于 HTML DOM Window 对象的方法

单击按钮。等待 3 秒，然后页面会提示 "Hello"：<button onclick="setTimeout(myFunction, 3000)">试一试</button>
clearTimeout() 方法停止执行 setTimeout() 中规定的函数。window.clearTimeout(timeoutVariable)
window.clearTimeout() 方法可以不带 window 前缀来写。
clearTimeout() 使用从 setTimeout() 返回的变量：
myVar = setTimeout(function, milliseconds);
clearTimeout(myVar);
<button onclick="myVar = setTimeout(myFunction, 3000)">试一试</button>
<button onclick="clearTimeout(myVar)">停止执行</button>

本例每秒执行一次函数 "myTimer"（就像数字手表）：
var myVar = setInterval(myTimer, 1000);
function myTimer() {
  var d = new Date();
  document.getElementById("demo").innerHTML = d.toLocaleTimeString();
} 显示为 下午11：17：22（当时的时间，像正常的时钟一样，会走）

一秒有 1000 毫秒

clearInterval() 方法使用从 setInterval() 返回的变量：
myVar = setInterval(function, milliseconds);
clearInterval(myVar);

Cookie 让您在网页中存储用户信息
Cookie 是在您的计算机上存储在小的文本文件中的数据。
当 web 服务器向浏览器发送网页后，连接被关闭，服务器会忘记用户的一切
Cookie 是为了解决“如何记住用户信息”而发明的：
当用户访问网页时，他的名字可以存储在 cookie 中。
下次用户访问该页面时，cookie 会“记住”他的名字

Cookie 保存在名称值对中，如：username = Bill Gates
当浏览器从服务器请求一个网页时，将属于该页的 cookie 添加到该请求中。这样服务器就获得了必要的数据来“记住”用户的信息。
如果浏览器已关闭本地 cookie 支持，则无法工作

JavaScript 可以用 document.cookie 属性创建、读取、删除 cookie。
通过 JavaScript，可以这样创建 cookie：document.cookie = "username=Bill Gates";
您还可以添加有效日期（UTC 时间）。默认情况下，在浏览器关闭时会删除 cookie：
document.cookie = "username=John Doe; expires=Sun, 31 Dec 2017 12:00:00 UTC";
通过 path 参数，您可以告诉浏览器 cookie 属于什么路径。默认情况下，cookie 属于当前页。
document.cookie = "username=Bill Gates; expires=Sun, 31 Dec 2017 12:00:00 UTC; path=/";

通过 JavaScript，可以这样读取 cookie：var x = document.cookie;
document.cookie 会在一条字符串中返回所有 cookie，比如：cookie1=value; cookie2=value; cookie3=value;

通过使用 JavaScript，你可以像你创建 cookie 一样改变它：
document.cookie = "username=Steve Jobs; expires=Sun, 31 Dec 2017 12:00:00 UTC; path=/"; 旧 cookie 被覆盖。

删除 cookie 非常简单。删除 cookie 时不必指定 cookie 值：直接把 expires 参数设置为过去的日期即可：
document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
您应该定义 cookie 路径以确保删除正确的 cookie。如果你不指定路径，一些浏览器不会让你删除 cookie

document.cookie 属性看起来像一个正常的文本字符串。但它不是。
即使你向 document.cookie 写一份完整的 cookie 字符串，当再次读取时，你只能看到它的名称-值对
如果设置了新 cookie，则旧的 cookie 不会被覆盖。新的 Cookie 会被添加到 document.cookie，所以如果你读取 document.cookie，你得到的东西会像这样：
cookie1 = value; cookie2 = value;
显示所有 cookie 创建 cookie 1 创建 cookie 2 删除 cookie 1 删除 cookie 2
如果你想找到一个指定 cookie 的值，你必须编写 JavaScript 函数来搜索 cookie 字符串中的 cookie 值
具体cookie见csdn收藏
