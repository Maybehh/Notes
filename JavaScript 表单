function validateForm() {
    var x = document.forms["myForm"]["fname"].value;
    if (x == "") {
        alert("必须填写姓名");
        return false;
    }
}
该函数能够在表单提交时被调用：
HTML 表单实例
<form name="myForm" action="/action_page_post.php" onsubmit="return validateForm()" method="post">
姓名：<input type="text" name="fname">
<input type="submit" value="Submit">
</form>

x = document.getElementById("numb").value;

服务器端验证是由 web 服务器执行的，在输入被送往服务器之后
客户端验证是由 web 浏览器执行的，在输入被送往 web 服务器之前
HTML5 引入了一种新的 HTML 验证概念，名为约束验证（constraint validation）
HTML 约束验证基于：
约束验证 HTML 输入属性
约束验证 CSS 伪选择器
约束验证 DOM 属性和方法

:disabled	选择设置了 "disabled" 属性的 input 元素。
:invalid	选择带有无效值的 input 元素。
:optional	选择未设置 "required" 属性的 input 元素。
:required	选择设置了 "required" 属性的 input 元素。
:valid	选择带有有效值的 input 元素。

checkValidity() 方法
如果输入字段包含无效的数据，显示一条消息：
<input id="id1" type="number" min="100" max="300" required>
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
 function myFunction() {
    var inpObj = document.getElementById("id1");
    if (inpObj.checkValidity() == false) {
        document.getElementById("demo").innerHTML = inpObj.validationMessage;
    }
}
</script>
validity	包含与 input 元素的合法性相关的布尔属性。
validationMessage	包含当 validity 为 false 时浏览器显示的消息。
willValidate	指示是否验证 input 元素。

input 元素的 validity 属性包含了与数据合法性相关的一系列属性：
customError	设置为 true，如果设置自定义的合法性消息。
patternMismatch	设置为 true，如果元素值不匹配其 pattern 属性。
rangeOverflow	设置为 true，如果元素值大约其 max 属性。
rangeUnderflow	设置为 true，如果元素值小于其 min 属性。
stepMismatch	当字段拥有 step 属性，且输入的 value 值不符合设定的间隔值时，该属性值为 true。
tooLong	设置为 true，如果元素值超过了其 maxLength 属性。
typeMismatch	当字段的 type 是 email 或者 url 但输入的值不是正确的类型时，属性值为 true。
valueMissing	设置为 true，如果元素（包含 required）没有值。
valid	设置为 true，如果元素值是有效的

rangeOverflow 属性
<input id="id1" type="number" max="100">
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
function myFunction() {
    var txt = "";
    if (document.getElementById("id1").validity.rangeOverflow) {
        txt = "值太大";
    }
     document.getElementById("demo").innerHTML = txt;
}
</script> 

