HTML5 将成为 HTML、XHTML 以及 HTML DOM 的新标准

大多数视频是通过插件（比如 Flash）来显示的。然而，并非所有浏览器都拥有同样的插件
HTML5 规定了一种通过 video 元素来包含视频的标准方法
video 元素支持三种视频格式:
Ogg = 带有 Theora 视频编码和 Vorbis 音频编码的 Ogg 文件
MPEG4 = 带有 H.264 视频编码和 AAC 音频编码的 MPEG 4 文件
WebM = 带有 VP8 视频编码和 Vorbis 音频编码的 WebM 文件

<video> 与 </video> 之间插入的内容是供不支持 video 元素的浏览器显示的
video 元素允许多个 source 元素。source 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式
autoplay	如果出现该属性，则视频在就绪后马上播放(自动播放）
preload	如果出现该属性，则视频在页面加载时进行加载，并预备播放（按键才能播放）
play()	 currentSrc        if (myVideo.paused)  myVideo.play(); else myVideo.pause(); 
pause()	 currentTime
load()	 videoWidth
canPlayType：videoHeight，duration，ended，error，paused，muted，seeking，volume，height	width
在所有属性中，只有 videoWidth 和 videoHeight 属性是立即可用的。在视频的元数据已加载后，其他属性才可用

大多数音频是通过插件（比如 Flash）来播放的。然而，并非所有浏览器都拥有同样的插件
HTML5 规定了一种通过 audio 元素来包含音频的标准方法。
audio 元素能够播放声音文件或者音频流
Ogg Vorbis	MP3	 Wav
<audio> 与 </audio> 之间插入的内容是供不支持 audio 元素的浏览器显示的
同上

watchPosition() - 返回用户的当前位置，并继续返回用户移动时的更新位置
clearWatch() - 停止 watchPosition() 方法

保存客户端数据：
这些都是由 cookie 完成的。但是 cookie 不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得 cookie 速度很慢而且效率也不高
在 HTML5 中，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。它使在不影响网站性能的情况下存储大量数据成为可能
对于不同的网站，数据存储于不同的区域，并且一个网站只能访问其自身的数据
HTML5 使用 JavaScript 来存储和访问数据
sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除（刷新不会）

Input 类型 - Date Pickers（日期选择器）
date - 选取日、月、年
month - 选取月、年
week - 选取周和年
time - 选取时间（小时和分钟）
datetime - 选取时间、日、月、年（UTC 时间）
datetime-local - 选取时间、日、月、年（本地时间）

Input 类型 - search
search 类型用于搜索域，比如站点搜索或 Google 搜索
search 域显示为常规的文本域

keygen 元素
keygen 元素的作用是提供一种验证用户的可靠方法
keygen 元素是密钥对生成器（key-pair generator）。当提交表单时，会生成两个键，一个是私钥，一个公钥
私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）

output:
<form onsubmit="return false">
 <input id="num_a" /> +
 <input id="num_b" /> =
 <output id="result" onforminput="resCalc()"></output>
</form>
