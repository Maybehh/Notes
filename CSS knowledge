当同一个 HTML 元素被不止一个样式定义时，会使用哪个样式呢？
一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权
1.浏览器缺省设置
2.外部样式表
3.内部样式表（位于 <head> 标签内部）
4.内联样式（在 HTML 元素内部）

CSS 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的

用逗号将需要分组的选择器分开。在下面的例子中，我们对所有的标题元素进行了分组
h1,h2,h3,h4,h5,h6 {
  color: green;
  }

 CSS子元素从父元素继承属性
 
 派生选择器
 li strong {
    font-style: italic;
    font-weight: normal;
  }
 <li><strong>我是斜体字。这是因为 strong 元素位于 li 元素内。</strong></li>
 
id 选择器以 "#" 来定义
类选择器以一个点号显示
类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用
都可以用作派生选择器

老版本的 Windows/IE 浏览器可能会忽略这条规则，除非你特别地定义这个选择器所属的元素：
div#sidebar {
	border: 1px dotted #000;
	padding: 10px;
	}
  
属性选择器
为带有 title 属性的所有元素设置样式：
[title]
{
color:red;
}
为 title="W3School" 的所有元素设置样式：
[title=W3School]
{
border:5px solid blue;
}
为包含指定值的 title 属性的所有元素设置样式。适用于由空格分隔的属性值：[title~=hello] { color:red; }
为带有包含指定值的 lang 属性的所有元素设置样式。适用于由连字符分隔的属性值：[lang|=en] { color:red; }

属性选择器在为不带有 class 或 id 的表单设置样式时特别有用：
input[type="text"]
{
  width:150px;
  display:block;
  margin-bottom:10px;
  background-color:yellow;
  font-family: Verdana, Arial;
}

input[type="button"]
{
  width:120px;
  margin-left:35px;
  display:block;
  font-family: Verdana, Arial;
}
[attribute]	用于选取带有指定属性的元素。
[attribute=value]	用于选取带有指定属性和值的元素。
[attribute~=value]	用于选取属性值中包含指定词汇的元素。
[attribute|=value]	用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。
[attribute^=value]	匹配属性值以指定值开头的每个元素。
[attribute$=value]	匹配属性值以指定值结尾的每个元素。
[attribute*=value]	匹配属性值中包含指定值的每个元素。

CSS样式继承同时有三种：不同属性都会继承，相同属性按照就近原则

background-image 属性为元素设置背景图像，元素的背景占据了元素的全部尺寸，包括内边距和边框，但不包括外边距
默认地，背景图像位于元素的左上角，并在水平和垂直方向上重复
继承性：no
url('URL') 指向图像的路径
none	默认值。不显示背景图像
inherit	规定应该从父元素继承 background-image 属性的设置

background-repeat 属性设置是否及如何重复背景图像，默认地，背景图像在水平和垂直方向上重复
repeat	默认。背景图像将在垂直方向和水平方向重复。
repeat-x	背景图像将在水平方向重复。
repeat-y	背景图像将在垂直方向重复。
no-repeat	背景图像将仅显示一次。
inherit	规定应该从父元素继承 background-repeat 属性的设置

background-position 属性设置背景图像的起始位置
这个属性设置背景原图像（由 background-image 定义）的位置，背景图像如果要重复，将从这一点开始
提示：您需要把 background-attachment 属性设置为 "fixed"，才能保证该属性在 Firefox 和 Opera 中正常工作
默认值：0% 0% 继承性：no
top left
top center
top right
center left
center center
center right
bottom left
bottom center
bottom right
如果您仅规定了一个关键词，那么第二个值将是"center"（位置有两种，center一个在前一个在后）
x% y%	
第一个值是水平位置，第二个值是垂直位置
左上角是 0% 0%。右下角是 100% 100%
如果您仅规定了一个值，另一个值将是 50%，所提供的这个值将用作水平值，垂直值将假设为 50%
百分数值同时应用于元素和图像。也就是说，图像中描述为 50% 50% 的点（中心点）与元素中描述为 50% 50% 的点（中心点）对齐
xpos ypos	
第一个值是水平位置，第二个值是垂直位置
左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位
如果您仅规定了一个值，另一个值将是50%
您可以混合使用 % 和 position 值

background-origin 属性规定 background-position 属性相对于什么位置来定位
padding-box	背景图像相对于内边距框来定位
border-box	背景图像相对于边框盒来定位
content-box	背景图像相对于内容框来定位

background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。
默认值：scroll
scroll	默认值。背景图像会随着页面其余部分的滚动而移动
fixed	当页面的其余部分滚动时，背景图像不会移动
inherit	规定应该从父元素继承 background-attachment 属性的设置

background-size 属性规定背景图像的尺寸
length	设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 "auto"。
percentage 以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 "auto"。
cover	把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。
contain	把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域

background-clip 属性规定背景的绘制区域
border-box	背景被裁剪到边框盒
padding-box	背景被裁剪到内边距框
content-box	背景被裁剪到内容框

background 简写属性在一个声明中设置所有的背景属性，例：
background: #00FF00 url(bgimage.gif) no-repeat fixed top;
通常建议使用这个属性，而不是分别使用单个属性

所有背景属性都不能继承

文本中没说都是继承的
text-indent 属性规定文本块中首行文本的缩进
注释：允许使用负值。如果使用负值，那么首行会被缩进到左边
%定义基于父元素宽度的百分比的缩进
可以为所有块级元素应用 text-indent，但无法将该属性应用于行内元素，图像之类的替换元素上也无法应用 text-indent 属性
不过，如果一个块级元素（比如段落）的首行中有一个图像，它会随该行的其余文本移动
提示：如果想把一个行内元素的第一行“缩进”，可以用左内边距或外边距创造这种效果
text-indent 属性可以继承

text-align 属性规定元素中的文本的水平对齐方式（作用于父元素）
默认值： 如果 direction 属性是 ltr，则默认值是 left；如果 direction 是 rtl，则为 right
justify	实现两端对齐文本效果
值 justify 可以使文本的两端都对齐。在两端对齐文本中，文本行的左右两端都放在父元素的内边界上。然后，调整单词和字母间的间隔，使各行的长度恰好相等
CSS 规范特别指出，如果 letter-spacing 属性指定为一个长度值，“用户代理不能进一步增加或减少字符间的空间”
CSS 没有定义连字符行为
<CENTER> 不仅影响文本，还会把整个元素居中。text-align 不会控制元素的对齐，而只影响内部内容

text-transform 属性控制文本的大小写
none	默认。定义带有小写字母和大写字母的标准的文本
capitalize 文本中的每个单词以大写字母开头（看具体浏览器如何定义一个单词）
uppercase 定义仅有大写字母
lowercase 定义无大写字母，仅有小写字母

text-decoration 属性规定添加到文本的修饰
none	默认。定义标准的文本
underline	定义文本下的一条线
overline	定义文本上的一条线
line-through	定义穿过文本下的一条线
blink	定义闪烁的文本
text-decoration 值会替换而不是累积起来

white-space 属性设置如何处理元素内的空白（换行符均为回车，br均有效）
normal	默认。换行字符（回车）会转换为空格，一行中多个空格的序列也会转换为一个空格，允许自动换行
pre	空白会被浏览器保留。浏览器将会注意额外的空格，甚至回车，不允许自动换行
nowrap  不允许自动换行（空格无效，换行符无效）
pre-wrap 浏览器不仅会保留空白符并保留换行符，还允许自动换行
pre-line 合并空白符序列，但是保留换行符，允许自动换行

direction 属性规定文本的方向 / 书写方向(仅仅改变块的顺序，块从右边开始）
该属性指定了块的基本书写方向（从块的左右开始写，文字的方向都一样，默认是都向右），可继承
对于行内元素，只有当 unicode-bidi 属性设置为 embed 或 bidi-override 时才会应用 direction 属性

line-height 属性设置行间的距离（行高），不允许使用负值
应用到一个块级元素时，它定义了该元素中基线之间的最小距离而不是最大距离
line-height 与 font-size 的计算值之差（在 CSS 中成为“行间距”）分为两半，分别加到一个文本行内容的顶部和底部。可以包含这些内容的最小框就是行框
normal	默认。设置合理的行间距。
number	设置数字，此数字会与当前的字体尺寸相乘来设置行间距。
length	设置固定的行间距。
%	基于当前字体尺寸的百分比行间距

字体可继承：
通过结合特定字体名和通用字体系列：h1 {font-family: Georgia, serif;}
如果读者没有安装 Georgia，但安装了 Times 字体（serif 字体系列中的一种字体），用户代理就可能对 h1 元素使用 Times
尽管 Times 与 Georgia 并不完全匹配，但至少足够接近
建议在所有 font-family 规则中都提供一个通用字体系列。这样就提供了一条后路，在用户代理无法提供与规则匹配的特定字体时，就可以选择一个候选字
也可以为给定的元素指定一系列类似的字体，需要把这些字体按照优先顺序排列，然后用逗号进行连接：
p {font-family: Times, TimesNR, 'New Century Schoolbook',
     Georgia, 'New York', serif;}
当字体名中有一个或多个空格（比如 New York），或者如果字体名包括 # 或 $ 之类的符号，才需要在 font-family 声明中加引号
如果把一个 font-family 属性放在 HTML 的 style 属性中，则需要使用该属性本身未使用的那种引号

font-style 属性设置使用斜体、倾斜或正常字体
normal - 文本正常显示
italic - 文本斜体显示
oblique - 文本倾斜显示
斜体（italic）是一种简单的字体风格，对每个字母的结构有一些小改动，来反映变化的外观。与此不同，倾斜（oblique）文本则是正常竖直文本的一个倾斜版

font-variant 属性设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小
normal	默认值。浏览器会显示一个标准的字体
small-caps  浏览器会显示小型大写字母的字体

font-weight 属性设置文本的粗细
normal	默认值。定义标准的字符
bold	定义粗体字符
bolder	定义更粗的字符
lighter	定义更细的字符
100
200
300
400
500
600
700
800
900
定义由粗到细的字符。400 等同于 normal，而 700 等同于 bold
加粗设置为 bolder，浏览器会设置比所继承值更粗的一个字体加粗。与此相反，关键词 lighter 会导致浏览器将加粗度下移而不是上移

font-size 属性可设置字体的尺寸
实际上它设置的是字体中字符框的高度；实际的字符字形可能比这些框高或矮（通常会矮）
xx-small
x-small
small
medium
large
x-large
xx-large
把字体的尺寸设置为不同的尺寸，从 xx-small 到 xx-large。
默认值：medium
smaller	把 font-size 设置为比父元素更小的尺寸。
larger	把 font-size 设置为比父元素更大的尺寸。
length	把 font-size 设置为一个固定的值。
%	把 font-size 设置为基于父元素的一个百分比值
如果您没有规定字体大小，普通文本（比如段落）的默认大小是 16 像素 (16px=1em)
1em 等于当前的字体尺寸。如果一个元素的 font-size 为 16 像素，那么对于该元素，1em 就等于 16 像素

px在 Internet Explorer 中不行,em所有浏览器都可以
在设置字体大小时，em 的值会相对于父元素的字体大小改变
公式将像素转换为 em：pixels/16=em
（注：16 等于父元素的默认字体大小，假设父元素的 font-size 为 20px，那么公式需改为：pixels/20=em）
不幸的是，在 IE 中仍存在问题。在重设文本大小时，会比正常的尺寸更大或更小
结合使用百分比和 EM，在所有浏览器中均有效的方案是为 body 元素（父元素）以百分比设置默认的 font-size 值：
body {font-size:100%;}
h1 {font-size:3.75em;}
h2 {font-size:2.5em;}
p {font-size:0.875em;}
在所有浏览器中，可以显示相同的文本大小，并允许所有浏览器缩放文本的大小

font 简写属性在一个声明中设置所有字体属性，注释：此属性也有第六个值："line-height"，可设置行间距
可以按顺序设置如下属性：
font-style
font-variant
font-weight
font-size/line-height
font-family
可以不设置其中的某个值，比如 font:100% verdana; 也是允许的。未设置的属性会使用其默认值
font还有可能的值：
caption	定义被标题控件（比如按钮、下拉列表等）使用的字体。
icon	定义被图标标记使用的字体。
menu	定义被下拉列表使用的字体。
message-box	定义被对话框使用的字体。
small-caption	caption 字体的小型版本。
status-bar	定义被窗口状态栏使用的字体
例：<p style="font: caption">This is a paragraph with a "caption" font</p>

font-size-adjust 属性为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height（CSS2.1 已删除该属性。）
字体的小写字母 "x" 的高度与 "font-size" 高度之间的比率被称为一个字体的 aspect 值
当字体拥有高的 aspect 值时，那么当此字体被设置为很小的尺寸时会更易阅读
举例：Verdana 的 aspect 值是 0.58（意味着当字体尺寸为 100px 时，它的 x-height 是 58px ）。Times New Roman 的 aspect 值是 0.46
这就意味着 Verdana 在小尺寸时比 Times New Roman 更易阅读
none	默认。如果此字体不可用，则不保持此字体的 x-height
number	定义字体的 aspect 值比率
可使用的公式：首选字体的字体尺寸 * （font-size-adjust 值 / 可用字体的 aspect 值）=可应用到可用字体的字体尺寸
举例：
如果 14px 的 Verdana（aspect 值是 0.58）不可用，但是某个可用的字体的 aspect 值是 0.46，那么替代字体的尺寸将是 14 * (0.58/0.46) = 17.65px

font-stretch 属性可对当前的 font-family 进行伸缩变形（CSS2.1 已删除该属性。）

链接的四种状态：
a:link - 普通的、未被访问的链接
a:visited - 用户已访问的链接
a:hover - 鼠标指针位于链接的上方
a:active - 链接被点击的时刻
a:hover 必须位于 a:link 和 a:visited 之后
a:active 必须位于 a:hover 之后

列表继承：
list-style-type 属性设置列表项标记的类型
none	无标记。
disc	默认。标记是实心圆。
circle	标记是空心圆。
square	标记是实心方块。
decimal	标记是数字。
decimal-leading-zero	0开头的数字标记。(01, 02, 03, 等。)
lower-roman	小写罗马数字(i, ii, iii, iv, v, 等。)
upper-roman	大写罗马数字(I, II, III, IV, V, 等。)
lower-alpha	小写英文字母The marker is lower-alpha (a, b, c, d, e, 等。)
upper-alpha	大写英文字母The marker is upper-alpha (A, B, C, D, E, 等。)
lower-greek	小写希腊字母(alpha, beta, gamma, 等。)
lower-latin	小写拉丁字母(a, b, c, d, e, 等。)
upper-latin	大写拉丁字母(A, B, C, D, E, 等。)
hebrew	传统的希伯来编号方式
armenian	传统的亚美尼亚编号方式
georgian	传统的乔治亚编号方式(an, ban, gan, 等。)
cjk-ideographic	简单的表意数字
hiragana	标记是：a, i, u, e, o, ka, ki, 等。（日文片假名）
katakana	标记是：A, I, U, E, O, KA, KI, 等。（日文片假名）
hiragana-iroha	标记是：i, ro, ha, ni, ho, he, to, 等。（日文片假名）
katakana-iroha	标记是：I, RO, HA, NI, HO, HE, TO, 等。（日文片假名）

list-style-image 属性使用图像来替换列表项的标记
指定作为一个有序或无序列表项标志的图像。图像相对于列表项内容的放置位置通常使用 list-style-position 属性控制
注释：请始终规定一个 "list-style-type" 属性以防图像不可用
URL	图像的路径。
none	默认。无图形被显示

list-style-position 属性设置在何处放置列表项标记
该属性用于声明列表标志相对于列表项内容的位置。外部 (outside) 标志会放在离列表项边框边界一定距离处，不过这距离在 CSS 中未定义
内部 (inside) 标志处理为好像它们是插入在列表项内容最前面的行内元素一样
inside	列表项目标记放置在文本以内，且环绕文本根据标记对齐。
outside	默认值。保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐

list-style 简写属性在一个声明中设置所有的列表属性
应用到所有 display 为 list-item 的元素，所以在普通的 HTML 和 XHTML 中只能用于 li 元素，不过实际上它可以应用到任何元素，并由 list-item 元素继承
可以按顺序设置如下属性：
list-style-type
list-style-position
list-style-image

边框可继承：
table, th, td
  {
  border: 1px solid blue;
  }
请注意，上例中的表格具有双线条边框。这是由于 table、th 以及 td 元素都有独立的边框。
如果需要把表格显示为单线条边框，请使用 border-collapse 属性（这个列表的边框都设置为单边，故对table使用）
table
  {
  border-collapse:collapse;
  }
table,th, td
  {
  border: 1px solid black;
  }

border-collapse 属性设置表格的边框是否被合并为一个单一的边框，还是象在标准的 HTML 中那样分开显示
separate 默认值。边框会被分开。不会忽略 border-spacing 和 empty-cells 属性。
collapse 如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性

border-spacing 属性设置相邻单元格的边框间的距离（仅用于“边框分离”模式）
第一个是水平间隔，第二个是垂直间隔。除非 border-collapse 被设置为 separate，否则将忽略这个属性。尽管这个属性只应用于表，不过它可以由表中的所有元素继承
length length	
规定相邻单元的边框之间的距离。使用 px、cm 等单位。不允许使用负值
如果定义一个 length 参数，那么定义的是水平和垂直间距
如果定义两个 length 参数，那么第一个设置水平间距，而第二个设置垂直间距

caption-side 属性设置表格标题的位置
指定了表标题相对于表框的放置位置。表标题显示为好像它是表之前（或之后）的一个块级元素
top	默认值。把表格标题定位在表格之上
bottom	把表格标题定位在表格之下

empty-cells 属性设置是否显示表格中的空单元格（仅用于“分离边框”模式）
定义了不包含任何内容的表单元格如何表示。如果显示，就会绘制出单元格的边框和背景。除非 border-collapse 设置为 separate，否则将忽略这个属性
hide	不在空单元格周围绘制边框
show	在空单元格周围绘制边框。默认

table-layout 属性用来显示表格单元格、行、列的算法规则
固定表格布局：
固定表格布局与自动表格布局相比，允许浏览器更快地对表格进行布局
在固定表格布局中，水平布局仅取决于表格宽度、列宽度、表格边框宽度、单元格间距，而与单元格的内容无关
通过使用固定表格布局，用户代理在接收到第一行后就可以显示表格
自动表格布局：
在自动表格布局中，列的宽度是由列单元格中没有折行的最宽的内容设定的
此算法有时会较慢，这是由于它需要在确定最终的布局之前访问表格中所有的内容
automatic 默认。列宽度由单元格内容设定
fixed	列宽由表格宽度和列宽度设定

轮廓不继承：
outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用
注释：轮廓线不会占据空间，也不一定是矩形
可以按顺序设置如下属性：
outline-color
outline-style
outline-width

始终在 outline-color 属性之前声明 outline-style 属性。元素只有获得轮廓以后才能改变其轮廓的颜色
color_name	规定颜色值为颜色名称的轮廓颜色（比如 red）。
hex_number	规定颜色值为十六进制值的轮廓颜色（比如 #ff0000）。
rgb_number	规定颜色值为 rgb 代码的轮廓颜色（比如 rgb(255,0,0)）。
invert	默认。执行颜色反转（逆向的颜色）。可使轮廓在不同的背景颜色中都是可见（000反转为fff)

outline-style 属性用于设置元素的整个轮廓的样式。样式不能是 none，否则轮廓不会出现
none	默认。定义无轮廓。
dotted	定义点状的轮廓。
dashed	定义虚线轮廓。
solid	定义实线轮廓。
double	定义双线轮廓。双线的宽度等同于 outline-width 的值。
groove	定义 3D 凹槽轮廓。此效果取决于 outline-color 值。
ridge	定义 3D 凸槽轮廓。此效果取决于 outline-color 值。
inset	定义 3D 凹边轮廓。此效果取决于 outline-color 值。
outset	定义 3D 凸边轮廓。此效果取决于 outline-color 值

outline-width 属性设置元素整个轮廓的宽度，只有当轮廓样式不是 none 时，这个宽度才会起作用。如果样式为 none，宽度实际上会重置为 0。不允许设置负长度值
thin	规定细轮廓。
medium	默认。规定中等的轮廓。
thick	规定粗的轮廓。
length	允许您规定轮廓粗细的值

边距不继承：
背景应用于由内容和内边距、边框组成的区域
CSS 中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸
外边距可以是负值，而且在很多情况下都要使用负值的外边距
IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和
解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素

padding 属性定义元素的内边距。padding 属性接受长度值或百分比值，但不允许使用负值
padding-top 属性设置元素的上内边距（空间）
length	规定以具体单位计的固定的上内边距值，比如像素、厘米等。默认值是 0px
%	定义基于父元素宽度的百分比上内边距。此值不会如预期的那样工作于所有的浏览器中
padding-right 属性设置元素右内边距（空白）
length	规定以具体单位计的固定的右内边距值，比如像素、厘米等。默认值是 0px。
%	定义基于父元素宽度的百分比右内边距。此值不会如预期地那样工作于所有的浏览器中
padding-bottom 属性设置元素的下内边距（底部空白）
length	规定以具体单位计的固定的下内边距值，比如像素、厘米等。默认值是 0px。
%	定义基于父元素宽度的百分比下内边距。此值不会如预期地那样工作于所有的浏览器中
padding-left 属性设置元素左内边距（空白）
length	规定以具体单位计的固定的左内边距值，比如像素、厘米等。默认值是 0px。
%	定义基于父元素宽度的百分比左内边距。此值不会如预期地那样工作于所有的浏览器中

百分数值是相对于其父元素的 width 计算的，这一点与外边距一样。所以，如果父元素的 width 改变，它们也会改变
上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度

padding 简写属性在一个声明中设置所有内边距属性                     替换元素(img这些呈现的内容是链接的内容替换的）
这个简写属性设置元素所有内边距的宽度，或者设置各边上内边距的宽度。行内非替换元素(span这些写什么呈现什么）上设置的内边距不会影响行高计算；
因此，如果一个元素既有内边距又有背景，从视觉上看可能会延伸到其他行，有可能还会与其他内容重叠。元素的背景会延伸穿过内边距。不允许指定负边距值。
注释：不允许使用负值。
padding:10px 5px 15px 20px;
上内边距是 10px
右内边距是 5px
下内边距是 15px
左内边距是 20px
padding:10px 5px 15px;
上内边距是 10px
右内边距和左内边距是 5px
下内边距是 15px
padding:10px 5px;
上内边距和下内边距是 10px
右内边距和左内边距是 5px
padding:10px;
所有 4 个内边距都是 10px
auto	浏览器计算内边距。
length	规定以具体单位计的内边距值，比如像素、厘米等。默认值是 0px。
%	规定基于父元素的宽度的百分比的内边距

边框不继承：
border-style 属性用于设置元素所有边框的样式，或者单独地为各边设置边框样式。
只有当这个值不是 none 时边框才可能出现，书写规则同上
none	定义无边框。
hidden	与 "none" 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。
dotted	定义点状边框。在大多数浏览器中呈现为实线。
dashed	定义虚线。在大多数浏览器中呈现为实线。
solid	定义实线。
double	定义双线。双线的宽度等于 border-width 的值。
groove	定义 3D 凹槽边框。其效果取决于 border-color 的值。
ridge	定义 3D 垄状边框。其效果取决于 border-color 的值。
inset	定义 3D inset 边框。其效果取决于 border-color 的值。
outset	定义 3D outset 边框。其效果取决于 border-color 的值

border-top-style 设置元素上边框的样式，只有当这个值不是 none 时边框才可能出现
border-right-style 设置元素右边框的样式，只有当这个值不是 none 时边框才可能出现
border-bottom-style 设置元素下边框的样式，只有当这个值不是 none 时边框才可能出现
border-left-style 设置元素左边框的样式，只有当这个值不是 none 时边框才可能出现

两种方法是等价的：
p {border-style: solid solid solid none;}
p {border-style: solid; border-left-style: none;}
注意：如果要使用第二种方法，必须把单边属性放在简写属性之后。因为如果把单边属性放在 border-style 之前，简写属性的值就会覆盖单边值 none

border-width 简写属性为元素的所有边框设置宽度，或者单独地为各边边框设置宽度
只有当边框样式不是 none 时才起作用。如果边框样式是 none，边框宽度实际上会重置为 0。不允许指定负长度值
thin	定义细的边框。
medium	默认。定义中等的边框。
thick	定义粗的边框。
length	允许您自定义边框的宽度

border-top-width
border-right-width
border-bottom-width
border-left-width

如果您希望边框出现，就必须声明一个边框样式，然后再设置其他属性，否则不会有边框出现

border-color 属性设置四条边框的颜色。此属性可设置 1 到 4 种颜色
color_name	规定颜色值为颜色名称的边框颜色（比如 red）。
hex_number	规定颜色值为十六进制值的边框颜色（比如 #ff0000）。
rgb_number	规定颜色值为 rgb 代码的边框颜色（比如 rgb(255,0,0)）。
transparent	边框颜色为透明
边框颜色值 transparent。这个值用于创建有宽度的不可见边框
a:link, a:visited {
  border-style: solid;
  border-width: 5px;
  border-color: transparent;
  }
a:hover {border-color: gray;}
利用 transparent，使用边框就像是额外的内边距一样；此外还有一个好处，就是能在你需要的时候使其可见
这种透明边框相当于内边距，因为元素的背景会延伸到边框区域（如果有可见背景的话）
注释：默认的边框颜色是元素本身的前景色。如果没有为边框声明颜色，它将与元素的文本颜色相同。另一方面，如果元素没有任何文本
假设它是一个表格，其中只包含图像，那么该表的边框颜色就是其父元素的文本颜色（因为 color 可以继承）。这个父元素很可能是 body、div 或另一个 table
border-top-color
border-right-color
border-bottom-color
border-left-color

border 简写属性在一个声明设置所有的边框属性
可以按顺序设置如下属性：
border-width
border-style
border-color

margin 简写属性在一个声明中设置所有外边距属性。该属性可以有 1 到 4 个值。
这个简写属性设置一个元素所有外边距的宽度，或者设置各边上外边距的宽度。
块级元素的垂直相邻外边距会合并，而行内元素实际上不占上下外边距。行内元素的的左右外边距不会合并。
同样地，浮动元素的外边距也不会合并。允许指定负的外边距值，不过使用时要小心。允许使用负值
auto	浏览器计算外边距。
length	规定以具体单位计的外边距值，比如像素、厘米等。默认值是 0px。
%	规定基于父元素的宽度的百分比的外边距

简写的写法称为值复制
如果缺少左外边距的值，则使用右外边距的值。
如果缺少下外边距的值，则使用上外边距的值。
如果缺少右外边距的值，则使用上外边距的值

margin-top
margin-right
margin-bottom
margin-left

外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距，合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者(详见W3C外边距合并)
只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并

定位不继承：
display 属性规定元素应该生成的框的类型
none	此元素不会被显示。
block	此元素将显示为块级元素，此元素前后会带有换行符。
inline	默认。此元素会被显示为内联元素，元素前后没有换行符。
inline-block	行内块元素。（CSS2.1 新增的值）
list-item	此元素会作为列表显示。
run-in	此元素会根据上下文作为块级元素或内联元素显示。
compact	CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。
marker	CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。
table	此元素会作为块级表格来显示（类似 <table>），表格前后带有换行符。
inline-table	此元素会作为内联表格来显示（类似 <table>），表格前后没有换行符。
table-row-group	此元素会作为一个或多个行的分组来显示（类似 <tbody>）。
table-header-group	此元素会作为一个或多个行的分组来显示（类似 <thead>）。
table-footer-group	此元素会作为一个或多个行的分组来显示（类似 <tfoot>）。
table-row	此元素会作为一个表格行显示（类似 <tr>）。
table-column-group	此元素会作为一个或多个列的分组来显示（类似 <colgroup>）。
table-column	此元素会作为一个单元格列显示（类似 <col>）
table-cell	此元素会作为一个表格单元格显示（类似 <td> 和 <th>）
table-caption	此元素会作为一个表格标题显示（类似 <caption>）

无法直接对无名块或行框应用样式，因为没有可以应用样式的地方（注意，行框和行内框是两个概念）。但是，这有助于理解在屏幕上看到的所有东西都形成某种框

CSS 有三种基本的定位机制：普通流、浮动和绝对定位
除非专门指定，否则所有框都在普通流中定位。也就是说，普通流中的元素的位置由元素在 (X)HTML 中的位置决定
垂直内边距、边框和外边距不影响行内框的高度（行内框是内容区域，如有行高，（行高-字体尺寸）/2，各加到上下，总和为行内框）
由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度

position 属性规定元素的定位类型
不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移
absolute生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。
fixed生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。
relative生成相对定位的元素，相对于其正常位置进行定位。因此，"left:20" 会向元素的 LEFT 位置添加 20 像素。
static	默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）

static元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。
relative元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。
absolute元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块
元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。
fixed元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。
提示：相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置

top 属性规定元素的顶部边缘。该属性定义了一个定位元素的上外边距边界与其包含块上边界之间的偏移
注释：如果 "position" 属性的值为 "static"，那么设置 "top" 属性不会产生任何效果
对于 static 元素，为 auto；对于长度值，则为相应的绝对长度；对于百分比数值，为指定值；否则为 auto
对于相对定义元素，如果 top 和 bottom 都是 auto，其计算值则都是 0；如果其中之一为 auto，则取另一个值的相反数；
如果二者都不是 auto，bottom 将取 top 值的相反数
auto	默认值。通过浏览器计算上边缘的位置。
%	设置以包含元素的百分比计的上边位置。可使用负值。
length	使用 px、cm 等单位设置元素的上边位置。可使用负值

right 属性规定元素的右边缘。该属性定义了定位元素右外边距边界与其包含块右边界之间的偏移，同上
对于相对定义元素，left 的计算值始终等于 right
auto	默认值。通过浏览器计算右边缘的位置。
%	设置以包含元素的百分比计的右边位置。可使用负值。
length	使用 px、cm 等单位设置元素的右边位置。可使用负值

bottom	定义了定位元素下外边距边界与其包含块下边界之间的偏移，同top
left	定义了定位元素左外边距边界与其包含块左边界之间的偏移，同right
（%:top,bottom按height, left,right按width)

overflow 属性规定当内容溢出元素框时发生的事情
定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条
visible	默认值。内容不会被修剪，会呈现在元素框之外。
hidden	内容会被修剪，并且其余内容是不可见的。
scroll	内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容(超不超出都使用滚动条控件)
auto	如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容(在确定如果超出的话自动使用滚动条，不超出就不使用滚动条的情况下使用)

clip 属性剪裁绝对定位元素
对于一个绝对定义元素，在这个矩形内的内容才可见。出了这个剪裁区域的内容会根据 overflow 的值来处理。剪裁区域可能比元素的内容区大，也可能比内容区小
shape	设置元素的形状。唯一合法的形状值是：rect (top, right, bottom, left)
auto	默认值。不应用任何剪裁
rect (top, right, bottom, left) 每一个数值表示位置（也就是四条边），是相对于父元素的左上角而言的

vertical-align 属性设置元素的垂直对齐方式（作用于自身，作用于行内元素）
定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。
这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式
baseline	默认。元素放置在父元素的基线上(同行的基线）
sub	垂直对齐文本的下标（同一行）
super	垂直对齐文本的上标（同一行）
top	把元素的顶端与行中最高元素的顶端对齐
text-top把元素的顶端与父元素字体的顶端对齐（同行）
middle	把此元素放置在父元素的中部(同行）
bottom	把元素的顶端与行中最低的元素的顶端对齐。
text-bottom把元素的底端与父元素字体的底端对齐（同行）
length  同行元素的基线之上的长度值（正的基线之上，负的基线之下）
%	使用 "line-height" 属性（父元素）的百分比值来排列此元素（同行元素的基线之上的百分比值）。允许使用负值

z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面
注释：元素可拥有负的 z-index 属性值。
注释：Z-index 仅能在定位元素上奏效（例如 position:absolute;）！
设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远
auto	默认。堆叠顺序与父元素相等
number	设置元素的堆叠顺序
参与规则：仅在position为absolute,relative,fixed有效，在z轴上定位，兄弟结点间进行比较
顺序规则：后会覆盖前的
定位规则：设置了position的会覆盖没有设position（或值为static)的
从父规则：A父与B父相同值，（B在A后面写）由于顺序规则，B父在A父上，A子值大于B子，结果B子还是在A子上（不可逾越的层级）
默认值规则：w3c不设z-index默认值为auto，IE6和7是0
层级数规则：设置为整数属性值的时候遵守从父规则
参与规则2：不设z-index属性的时候，auto不参与比较（不参与级数比较，但参与DOM中兄弟节点的比较（定位规则）） 整数0参与比较

