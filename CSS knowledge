当同一个 HTML 元素被不止一个样式定义时，会使用哪个样式呢？
一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权
1.浏览器缺省设置
2.外部样式表
3.内部样式表（位于 <head> 标签内部）
4.内联样式（在 HTML 元素内部）

CSS 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的

用逗号将需要分组的选择器分开。在下面的例子中，我们对所有的标题元素进行了分组
h1,h2,h3,h4,h5,h6 {
  color: green;
  }

 CSS子元素从父元素继承属性
 
 派生选择器
 li strong {
    font-style: italic;
    font-weight: normal;
  }
 <li><strong>我是斜体字。这是因为 strong 元素位于 li 元素内。</strong></li>
 
id 选择器以 "#" 来定义
类选择器以一个点号显示
类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用
都可以用作派生选择器

老版本的 Windows/IE 浏览器可能会忽略这条规则，除非你特别地定义这个选择器所属的元素：
div#sidebar {
	border: 1px dotted #000;
	padding: 10px;
	}
  
属性选择器
为带有 title 属性的所有元素设置样式：
[title]
{
color:red;
}
为 title="W3School" 的所有元素设置样式：
[title=W3School]
{
border:5px solid blue;
}
为包含指定值的 title 属性的所有元素设置样式。适用于由空格分隔的属性值：[title~=hello] { color:red; }
为带有包含指定值的 lang 属性的所有元素设置样式。适用于由连字符分隔的属性值：[lang|=en] { color:red; }

属性选择器在为不带有 class 或 id 的表单设置样式时特别有用：
input[type="text"]
{
  width:150px;
  display:block;
  margin-bottom:10px;
  background-color:yellow;
  font-family: Verdana, Arial;
}

input[type="button"]
{
  width:120px;
  margin-left:35px;
  display:block;
  font-family: Verdana, Arial;
}
[attribute]	用于选取带有指定属性的元素。
[attribute=value]	用于选取带有指定属性和值的元素。
[attribute~=value]	用于选取属性值中包含指定词汇的元素。
[attribute|=value]	用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。
[attribute^=value]	匹配属性值以指定值开头的每个元素。
[attribute$=value]	匹配属性值以指定值结尾的每个元素。
[attribute*=value]	匹配属性值中包含指定值的每个元素。

CSS样式继承同时有三种：不同属性都会继承，相同属性按照就近原则

background-image 属性为元素设置背景图像，元素的背景占据了元素的全部尺寸，包括内边距和边框，但不包括外边距
默认地，背景图像位于元素的左上角，并在水平和垂直方向上重复
继承性：no
url('URL') 指向图像的路径
none	默认值。不显示背景图像
inherit	规定应该从父元素继承 background-image 属性的设置

background-repeat 属性设置是否及如何重复背景图像，默认地，背景图像在水平和垂直方向上重复
repeat	默认。背景图像将在垂直方向和水平方向重复。
repeat-x	背景图像将在水平方向重复。
repeat-y	背景图像将在垂直方向重复。
no-repeat	背景图像将仅显示一次。
inherit	规定应该从父元素继承 background-repeat 属性的设置

background-position 属性设置背景图像的起始位置
这个属性设置背景原图像（由 background-image 定义）的位置，背景图像如果要重复，将从这一点开始
提示：您需要把 background-attachment 属性设置为 "fixed"，才能保证该属性在 Firefox 和 Opera 中正常工作
默认值：0% 0% 继承性：no
top left
top center
top right
center left
center center
center right
bottom left
bottom center
bottom right
如果您仅规定了一个关键词，那么第二个值将是"center"（位置有两种，center一个在前一个在后）
x% y%	
第一个值是水平位置，第二个值是垂直位置
左上角是 0% 0%。右下角是 100% 100%
如果您仅规定了一个值，另一个值将是 50%，所提供的这个值将用作水平值，垂直值将假设为 50%
百分数值同时应用于元素和图像。也就是说，图像中描述为 50% 50% 的点（中心点）与元素中描述为 50% 50% 的点（中心点）对齐
xpos ypos	
第一个值是水平位置，第二个值是垂直位置
左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位
如果您仅规定了一个值，另一个值将是50%
您可以混合使用 % 和 position 值

background-origin 属性规定 background-position 属性相对于什么位置来定位
padding-box	背景图像相对于内边距框来定位
border-box	背景图像相对于边框盒来定位
content-box	背景图像相对于内容框来定位

background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。
默认值：scroll
scroll	默认值。背景图像会随着页面其余部分的滚动而移动
fixed	当页面的其余部分滚动时，背景图像不会移动
inherit	规定应该从父元素继承 background-attachment 属性的设置

background-size 属性规定背景图像的尺寸
length	设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 "auto"。
percentage 以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 "auto"。
cover	把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。
contain	把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域

background-clip 属性规定背景的绘制区域
border-box	背景被裁剪到边框盒
padding-box	背景被裁剪到内边距框
content-box	背景被裁剪到内容框

background 简写属性在一个声明中设置所有的背景属性，例：
background: #00FF00 url(bgimage.gif) no-repeat fixed top;
通常建议使用这个属性，而不是分别使用单个属性

所有背景属性都不能继承

文本中没说都是继承的
text-indent 属性规定文本块中首行文本的缩进
注释：允许使用负值。如果使用负值，那么首行会被缩进到左边
%定义基于父元素宽度的百分比的缩进
可以为所有块级元素应用 text-indent，但无法将该属性应用于行内元素，图像之类的替换元素上也无法应用 text-indent 属性
不过，如果一个块级元素（比如段落）的首行中有一个图像，它会随该行的其余文本移动
提示：如果想把一个行内元素的第一行“缩进”，可以用左内边距或外边距创造这种效果
text-indent 属性可以继承

text-align 属性规定元素中的文本的水平对齐方式
默认值： 如果 direction 属性是 ltr，则默认值是 left；如果 direction 是 rtl，则为 right
justify	实现两端对齐文本效果
值 justify 可以使文本的两端都对齐。在两端对齐文本中，文本行的左右两端都放在父元素的内边界上。然后，调整单词和字母间的间隔，使各行的长度恰好相等
CSS 规范特别指出，如果 letter-spacing 属性指定为一个长度值，“用户代理不能进一步增加或减少字符间的空间”
CSS 没有定义连字符行为
<CENTER> 不仅影响文本，还会把整个元素居中。text-align 不会控制元素的对齐，而只影响内部内容

text-transform 属性控制文本的大小写
none	默认。定义带有小写字母和大写字母的标准的文本
capitalize 文本中的每个单词以大写字母开头（看具体浏览器如何定义一个单词）
uppercase 定义仅有大写字母
lowercase 定义无大写字母，仅有小写字母

text-decoration 属性规定添加到文本的修饰
none	默认。定义标准的文本
underline	定义文本下的一条线
overline	定义文本上的一条线
line-through	定义穿过文本下的一条线
blink	定义闪烁的文本
text-decoration 值会替换而不是累积起来

white-space 属性设置如何处理元素内的空白（换行符均为回车，br均有效）
normal	默认。换行字符（回车）会转换为空格，一行中多个空格的序列也会转换为一个空格，允许自动换行
pre	空白会被浏览器保留。浏览器将会注意额外的空格，甚至回车，不允许自动换行
nowrap  不允许自动换行（空格无效，换行符无效）
pre-wrap 浏览器不仅会保留空白符并保留换行符，还允许自动换行
pre-line 合并空白符序列，但是保留换行符，允许自动换行

direction 属性规定文本的方向 / 书写方向(仅仅改变块的顺序，块从右边开始）
该属性指定了块的基本书写方向（从块的左右开始写，文字的方向都一样，默认是都向右），可继承
对于行内元素，只有当 unicode-bidi 属性设置为 embed 或 bidi-override 时才会应用 direction 属性

line-height 属性设置行间的距离（行高），不允许使用负值
应用到一个块级元素时，它定义了该元素中基线之间的最小距离而不是最大距离
line-height 与 font-size 的计算值之差（在 CSS 中成为“行间距”）分为两半，分别加到一个文本行内容的顶部和底部。可以包含这些内容的最小框就是行框
normal	默认。设置合理的行间距。
number	设置数字，此数字会与当前的字体尺寸相乘来设置行间距。
length	设置固定的行间距。
%	基于当前字体尺寸的百分比行间距

字体可继承：
通过结合特定字体名和通用字体系列：h1 {font-family: Georgia, serif;}
如果读者没有安装 Georgia，但安装了 Times 字体（serif 字体系列中的一种字体），用户代理就可能对 h1 元素使用 Times
尽管 Times 与 Georgia 并不完全匹配，但至少足够接近
建议在所有 font-family 规则中都提供一个通用字体系列。这样就提供了一条后路，在用户代理无法提供与规则匹配的特定字体时，就可以选择一个候选字
也可以为给定的元素指定一系列类似的字体，需要把这些字体按照优先顺序排列，然后用逗号进行连接：
p {font-family: Times, TimesNR, 'New Century Schoolbook',
     Georgia, 'New York', serif;}
当字体名中有一个或多个空格（比如 New York），或者如果字体名包括 # 或 $ 之类的符号，才需要在 font-family 声明中加引号
如果把一个 font-family 属性放在 HTML 的 style 属性中，则需要使用该属性本身未使用的那种引号

font-style 属性设置使用斜体、倾斜或正常字体
normal - 文本正常显示
italic - 文本斜体显示
oblique - 文本倾斜显示
斜体（italic）是一种简单的字体风格，对每个字母的结构有一些小改动，来反映变化的外观。与此不同，倾斜（oblique）文本则是正常竖直文本的一个倾斜版

font-variant 属性设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小
normal	默认值。浏览器会显示一个标准的字体
small-caps  浏览器会显示小型大写字母的字体

font-weight 属性设置文本的粗细
normal	默认值。定义标准的字符
bold	定义粗体字符
bolder	定义更粗的字符
lighter	定义更细的字符
100
200
300
400
500
600
700
800
900
定义由粗到细的字符。400 等同于 normal，而 700 等同于 bold
加粗设置为 bolder，浏览器会设置比所继承值更粗的一个字体加粗。与此相反，关键词 lighter 会导致浏览器将加粗度下移而不是上移

font-size 属性可设置字体的尺寸
实际上它设置的是字体中字符框的高度；实际的字符字形可能比这些框高或矮（通常会矮）
xx-small
x-small
small
medium
large
x-large
xx-large
把字体的尺寸设置为不同的尺寸，从 xx-small 到 xx-large。
默认值：medium
smaller	把 font-size 设置为比父元素更小的尺寸。
larger	把 font-size 设置为比父元素更大的尺寸。
length	把 font-size 设置为一个固定的值。
%	把 font-size 设置为基于父元素的一个百分比值
如果您没有规定字体大小，普通文本（比如段落）的默认大小是 16 像素 (16px=1em)
1em 等于当前的字体尺寸。如果一个元素的 font-size 为 16 像素，那么对于该元素，1em 就等于 16 像素

px在 Internet Explorer 中不行,em所有浏览器都可以
在设置字体大小时，em 的值会相对于父元素的字体大小改变
公式将像素转换为 em：pixels/16=em
（注：16 等于父元素的默认字体大小，假设父元素的 font-size 为 20px，那么公式需改为：pixels/20=em）
不幸的是，在 IE 中仍存在问题。在重设文本大小时，会比正常的尺寸更大或更小
结合使用百分比和 EM，在所有浏览器中均有效的方案是为 body 元素（父元素）以百分比设置默认的 font-size 值：
body {font-size:100%;}
h1 {font-size:3.75em;}
h2 {font-size:2.5em;}
p {font-size:0.875em;}
在所有浏览器中，可以显示相同的文本大小，并允许所有浏览器缩放文本的大小

font 简写属性在一个声明中设置所有字体属性，注释：此属性也有第六个值："line-height"，可设置行间距
可以按顺序设置如下属性：
font-style
font-variant
font-weight
font-size/line-height
font-family
可以不设置其中的某个值，比如 font:100% verdana; 也是允许的。未设置的属性会使用其默认值
font还有可能的值：
caption	定义被标题控件（比如按钮、下拉列表等）使用的字体。
icon	定义被图标标记使用的字体。
menu	定义被下拉列表使用的字体。
message-box	定义被对话框使用的字体。
small-caption	caption 字体的小型版本。
status-bar	定义被窗口状态栏使用的字体
例：<p style="font: caption">This is a paragraph with a "caption" font</p>

font-size-adjust 属性为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height（CSS2.1 已删除该属性。）
字体的小写字母 "x" 的高度与 "font-size" 高度之间的比率被称为一个字体的 aspect 值
当字体拥有高的 aspect 值时，那么当此字体被设置为很小的尺寸时会更易阅读
举例：Verdana 的 aspect 值是 0.58（意味着当字体尺寸为 100px 时，它的 x-height 是 58px ）。Times New Roman 的 aspect 值是 0.46
这就意味着 Verdana 在小尺寸时比 Times New Roman 更易阅读
none	默认。如果此字体不可用，则不保持此字体的 x-height
number	定义字体的 aspect 值比率
可使用的公式：首选字体的字体尺寸 * （font-size-adjust 值 / 可用字体的 aspect 值）=可应用到可用字体的字体尺寸
举例：
如果 14px 的 Verdana（aspect 值是 0.58）不可用，但是某个可用的字体的 aspect 值是 0.46，那么替代字体的尺寸将是 14 * (0.58/0.46) = 17.65px

font-stretch 属性可对当前的 font-family 进行伸缩变形（CSS2.1 已删除该属性。）

链接的四种状态：
a:link - 普通的、未被访问的链接
a:visited - 用户已访问的链接
a:hover - 鼠标指针位于链接的上方
a:active - 链接被点击的时刻
a:hover 必须位于 a:link 和 a:visited 之后
a:active 必须位于 a:hover 之后
