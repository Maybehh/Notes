函数声明：function functionName(parameters) {
   要执行的代码
}
被声明的函数不会直接执行。它们被“保存供稍后使用”，将在稍后执行，当它们被调用时
分号用于分隔可执行的 JavaScript 语句。由于函数声明不是可执行的语句，以分号结尾并不常见

函数表达式可以在变量中存储：var x = function (a, b) {return a * b};
在变量中保存函数表达式之后，此变量可用作函数：
var x = function (a, b) {return a * b};
var z = x(4, 3);
存放在变量中的函数不需要函数名。他们总是使用变量名调用。上面的函数使用分号结尾，因为它是可执行语句的一部分

Function() 构造器：var myFunction = new Function("a", "b", "return a * b");
大多数情况下，您可以避免在 JavaScript 中使用 new 关键词

Hoisting 应用于变量声明和函数声明。正因如此，JavaScript 函数能够在声明之前被调用：
myFunction(5);
function myFunction(y) {
     return y * y;
}
使用表达式定义的函数不会被提升

函数表达式可以作为“自调用”。自调用表达式是自动被调用（开始）的，在不进行调用的情况下。函数表达式会自动执行，假如表达式后面跟着 ()。
您无法对函数声明进行自调用。您需要在函数周围添加括号，以指示它是一个函数表达式：
(function () {
    var x = "Hello!!";      //我会调用我自己
})();
上面的函数实际上是一个匿名的自调用函数（没有名称的函数）

JavaScript 函数可被用作值：var x = myFunction(4, 3);
JavaScript 函数可用在表达式中：var x = myFunction(4, 3) * 2;

JavaScript 中的 typeof 运算符会为函数返回 "function"。但是最好是把 JavaScript 函数描述为对象。JavaScript 函数都有属性和方法。
arguments.length 会返回函数被调用时收到的参数数目：function myFunction(a, b) {return arguments.length;}

toString() 方法以字符串返回函数：document.getElementById("demo").innerHTML = myFunction.toString();
返回function myFunction(a, b) { return a * b; }

定义为对象属性的函数，被称为对象的方法。为创建新对象而设计的函数，被称为对象构造函数（对象构造器）

函数参数（parameter）指的是在函数定义中列出的名称。函数参数（argument）指的是传递到函数或由函数接收到的真实值
JavaScript 函数定义不会为参数（parameter）规定数据类型。JavaScript 函数不会对所传递的参数（argument）实行类型检查。
JavaScript 函数不会检查所接收参数（argument）的数量

JavaScript 函数有一个名为 arguments 对象的内置对象。arguments 对象包含函数调用时使用的参数数组。
这样，您就可以简单地使用函数来查找（例如）数字列表中的最高值：
x = findMax(1, 123, 500, 115, 44, 88);
function findMax() {
    var i;
    var max = -Infinity;
    for (i = 0; i < arguments.length; i++) {
        if (arguments[i] > max) {
            max = arguments[i];
        }
    }
    return max;
}

JavaScript 参数通过值传递：函数只知道值，而不是参数的位置。如果函数改变了参数的值，它不会改变参数的原始值。参数的改变在函数之外是不可见的
在 JavaScript 中，对象引用是值。正因如此，对象的行为就像它们通过引用来传递：如果函数改变了对象属性，它也改变了原始值。对象属性的改变在函数之外是可见的

在函数被定义时，函数内部的代码不会执行。在函数被调用时，函数内部的代码会被执行
以函数形式调用函数：function myFunction(a, b) { return a * b; }       myFunction(10, 2);           // 将返回 20
以上函数不属于任何对象。但是在 JavaScript 中，始终存在一种默认的全局对象。
在 HTML 中，默认全局对象是 HTML 页面本身，所有上面的函数“属于”HTML 页面。在浏览器中，这个页面对象就是浏览器窗口。上面的函数自动成为一个窗口函数。
myFunction() 和 window.myFunction() 是同一个函数：
function myFunction(a, b) {
    return a * b;
}
window.myFunction(10, 2);    // 也会返回 20
这是调用函数的常见方法，但并不是一个好习惯。全局变量、方法或函数很容易在全局对象中产生命名冲突和漏洞

当不带拥有者对象调用对象时，this 的值成为全局对象。在 web 浏览器中，全局对象就是浏览器对象。
本例以 this 的值返回这个 window 对象：（myFunction没有对象拥有它，于是this成为全局对象）
var x = myFunction();
function myFunction() {
  return this;
}
document.getElementById("demo").innerHTML = x; 返回[object Window]（返回普通对象就是[object Object])

调用一个函数作为一个全局函数，会导致 this 的值成为全局对象，作为变量来使用 window 对象很容易使程序崩溃
var myObject = {
    firstName:"John",
    lastName: "Doe",
    fullName: function () {
        return this;（this是myObject,也就是return myObject)
    }
}
myObject.fullName();          // 将返回 [object Object]（拥有者对象）

通过函数构造器来调用函数：它看起来像你创建一个新的函数，但由于 JavaScript 函数是对象，你实际上创建一个新对象
构造器调用会创建新对象。新对象会从其构造器继承属性和方法，构造器内的 this 关键词没有值。this 的值会成为调用函数时创建的新对象

fullName 属性属于 person 对象的方法
call() 方法是预定义的 JavaScript 方法。它可以用来调用所有者对象作为参数的方法(改变this的指向）
var person = {
    fullName: function() {
        return this.firstName + " " + this.lastName;
    }
}
var person1 = {
    firstName:"Bill",
    lastName: "Gates",
}
var person2 = {
    firstName:"Steve",
    lastName: "Jobs",
}
person.fullName.call(person1);  // 将返回 "Bill Gates" （调用person的fullName()方法，改变fullName()方法中的this的指向为person1)
带参数的call()：
var person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}
var person1 = {
  firstName:"Bill",
  lastName: "Gates"
}
person.fullName.call(person1, "Seattle", "USA");（第一个是this指向的对象,后续是fullName()方法的参数列表）

apply() 方法与 call() 方法非常相似，不同之处是：call() 方法分别接受参数。apply() 方法接受数组形式的参数。
如果要使用数组而不是参数列表，则 apply() 方法非常方便
var x = person.fullName.apply(person1, ["Seatle", "USA"]); 
